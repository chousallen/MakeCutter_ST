
new_h563zi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce4  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009f30  08009f30  00019f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f70  08009f70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009f70  08009f70  00019f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f78  08009f78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f78  08009f78  00019f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  2000000c  08009f8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  08009f8c  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019eaf  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bc1  00000000  00000000  00039f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  0003caf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db9  00000000  00000000  0003dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036854  00000000  00000000  0003ea89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bf0  00000000  00000000  000752dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015eb66  00000000  00000000  0008decd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cc4  00000000  00000000  001eca34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001f16f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	08009f18 	.word	0x08009f18

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	08009f18 	.word	0x08009f18

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005ba:	4909      	ldr	r1, [pc, #36]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005c6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4013      	ands	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d0:	68fb      	ldr	r3, [r7, #12]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	44020c00 	.word	0x44020c00

080005e4 <LL_APB1_GRP2_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1HENR, Periphs);
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005f2:	4909      	ldr	r1, [pc, #36]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1HENR, Periphs);
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4013      	ands	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000608:	68fb      	ldr	r3, [r7, #12]
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	44020c00 	.word	0x44020c00

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fda8 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f810 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f9da 	bl	80009e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800062c:	f000 f87c 	bl	8000728 <MX_ADC1_Init>
  MX_ETH_Init();
 8000630:	f000 f8de 	bl	80007f0 <MX_ETH_Init>
  MX_ICACHE_Init();
 8000634:	f000 f928 	bl	8000888 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 8000638:	f000 f932 	bl	80008a0 <MX_LPUART1_UART_Init>
  MX_UCPD1_Init();
 800063c:	f000 f97a 	bl	8000934 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000640:	f000 f99c 	bl	800097c <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x28>
	...

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	; 0x70
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2250      	movs	r2, #80	; 0x50
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f009 fc32 	bl	8009ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066e:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <SystemClock_Config+0xdc>)
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	4a2c      	ldr	r2, [pc, #176]	; (8000724 <SystemClock_Config+0xdc>)
 8000674:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000678:	6113      	str	r3, [r2, #16]
 800067a:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <SystemClock_Config+0xdc>)
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000686:	bf00      	nop
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <SystemClock_Config+0xdc>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	f003 0308 	and.w	r3, r3, #8
 8000690:	2b08      	cmp	r3, #8
 8000692:	d1f9      	bne.n	8000688 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000694:	2323      	movs	r3, #35	; 0x23
 8000696:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000698:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069e:	2301      	movs	r3, #1
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2340      	movs	r3, #64	; 0x40
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006b4:	2303      	movs	r3, #3
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006bc:	2310      	movs	r3, #16
 80006be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80006cc:	230c      	movs	r3, #12
 80006ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fca5 	bl	800302c <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006e8:	f000 f9f6 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	231f      	movs	r3, #31
 80006ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2303      	movs	r3, #3
 80006f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2103      	movs	r1, #3
 800070a:	4618      	mov	r0, r3
 800070c:	f003 f8c6 	bl	800389c <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000716:	f000 f9df 	bl	8000ad8 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3770      	adds	r7, #112	; 0x70
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	44020800 	.word	0x44020800

08000728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	2220      	movs	r2, #32
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f009 fbc3 	bl	8009ec0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800073c:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <MX_ADC1_Init+0xc0>)
 800073e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000740:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800075a:	2204      	movs	r2, #4
 800075c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000760:	2200      	movs	r2, #0
 8000762:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000766:	2200      	movs	r2, #0
 8000768:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800076c:	2201      	movs	r2, #1
 800076e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000780:	2200      	movs	r2, #0
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800078e:	2200      	movs	r2, #0
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_ADC1_Init+0xbc>)
 8000794:	2200      	movs	r2, #0
 8000796:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_ADC1_Init+0xbc>)
 800079a:	2200      	movs	r2, #0
 800079c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a0:	4810      	ldr	r0, [pc, #64]	; (80007e4 <MX_ADC1_Init+0xbc>)
 80007a2:	f000 ff75 	bl	8001690 <HAL_ADC_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80007ac:	f000 f994 	bl	8000ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_ADC1_Init+0xc4>)
 80007b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b4:	2306      	movs	r3, #6
 80007b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007bc:	237f      	movs	r3, #127	; 0x7f
 80007be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007c0:	2304      	movs	r3, #4
 80007c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_ADC1_Init+0xbc>)
 80007ce:	f001 f8b3 	bl	8001938 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80007d8:	f000 f97e 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000120 	.word	0x20000120
 80007e8:	42028000 	.word	0x42028000
 80007ec:	4b840000 	.word	0x4b840000

080007f0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <MX_ETH_Init+0x80>)
 80007f6:	4a1f      	ldr	r2, [pc, #124]	; (8000874 <MX_ETH_Init+0x84>)
 80007f8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_ETH_Init+0x88>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_ETH_Init+0x88>)
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_ETH_Init+0x88>)
 8000808:	22e1      	movs	r2, #225	; 0xe1
 800080a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_ETH_Init+0x88>)
 800080e:	2200      	movs	r2, #0
 8000810:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_ETH_Init+0x88>)
 8000814:	2200      	movs	r2, #0
 8000816:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_ETH_Init+0x88>)
 800081a:	2200      	movs	r2, #0
 800081c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_ETH_Init+0x80>)
 8000820:	4a15      	ldr	r2, [pc, #84]	; (8000878 <MX_ETH_Init+0x88>)
 8000822:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_ETH_Init+0x80>)
 8000826:	2201      	movs	r2, #1
 8000828:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_ETH_Init+0x80>)
 800082c:	4a13      	ldr	r2, [pc, #76]	; (800087c <MX_ETH_Init+0x8c>)
 800082e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_ETH_Init+0x80>)
 8000832:	4a13      	ldr	r2, [pc, #76]	; (8000880 <MX_ETH_Init+0x90>)
 8000834:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_ETH_Init+0x80>)
 8000838:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800083c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_ETH_Init+0x80>)
 8000840:	f001 fd60 	bl	8002304 <HAL_ETH_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800084a:	f000 f945 	bl	8000ad8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800084e:	2238      	movs	r2, #56	; 0x38
 8000850:	2100      	movs	r1, #0
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_ETH_Init+0x94>)
 8000854:	f009 fb34 	bl	8009ec0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_ETH_Init+0x94>)
 800085a:	2221      	movs	r2, #33	; 0x21
 800085c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_ETH_Init+0x94>)
 8000860:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000864:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_ETH_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000188 	.word	0x20000188
 8000874:	40028000 	.word	0x40028000
 8000878:	200005d4 	.word	0x200005d4
 800087c:	200000c0 	.word	0x200000c0
 8000880:	20000060 	.word	0x20000060
 8000884:	20000028 	.word	0x20000028

08000888 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800088c:	f002 fac0 	bl	8002e10 <HAL_ICACHE_Enable>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000896:	f000 f91f 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008a4:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008a6:	4a21      	ldr	r2, [pc, #132]	; (800092c <MX_LPUART1_UART_Init+0x8c>)
 80008a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008ac:	4a20      	ldr	r2, [pc, #128]	; (8000930 <MX_LPUART1_UART_Init+0x90>)
 80008ae:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008c4:	220c      	movs	r2, #12
 80008c6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008dc:	2200      	movs	r2, #0
 80008de:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008e2:	f008 fb6f 	bl	8008fc4 <HAL_UART_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80008ec:	f000 f8f4 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 80008f4:	f008 fff6 	bl	80098e4 <HAL_UARTEx_SetTxFifoThreshold>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80008fe:	f000 f8eb 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4808      	ldr	r0, [pc, #32]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 8000906:	f009 f82b 	bl	8009960 <HAL_UARTEx_SetRxFifoThreshold>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000910:	f000 f8e2 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_LPUART1_UART_Init+0x88>)
 8000916:	f008 ffac 	bl	8009872 <HAL_UARTEx_DisableFifoMode>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000920:	f000 f8da 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000238 	.word	0x20000238
 800092c:	44002400 	.word	0x44002400
 8000930:	00033324 	.word	0x00033324

08000934 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
 8000948:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800094a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800094e:	f7ff fe49 	bl	80005e4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000952:	2002      	movs	r0, #2
 8000954:	f7ff fe2a 	bl	80005ac <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB13   ------> UCPD1_CC1
  PB14   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8000958:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800095c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800095e:	2303      	movs	r3, #3
 8000960:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	463b      	mov	r3, r7
 8000968:	4619      	mov	r1, r3
 800096a:	4803      	ldr	r0, [pc, #12]	; (8000978 <MX_UCPD1_Init+0x44>)
 800096c:	f009 f9cf 	bl	8009d0e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	42020400 	.word	0x42020400

0800097c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <MX_USB_PCD_Init+0x60>)
 8000984:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 8000988:	2208      	movs	r2, #8
 800098a:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 800098e:	2202      	movs	r2, #2
 8000990:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 8000994:	2202      	movs	r2, #2
 8000996:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USB_PCD_Init+0x5c>)
 80009c4:	f002 fa34 	bl	8002e30 <HAL_PCD_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 80009ce:	f000 f883 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200002cc 	.word	0x200002cc
 80009dc:	40016000 	.word	0x40016000

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f6:	4b35      	ldr	r3, [pc, #212]	; (8000acc <MX_GPIO_Init+0xec>)
 80009f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009fc:	4a33      	ldr	r2, [pc, #204]	; (8000acc <MX_GPIO_Init+0xec>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a06:	4b31      	ldr	r3, [pc, #196]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a0c:	f003 0310 	and.w	r3, r3, #16
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a1a:	4a2c      	ldr	r2, [pc, #176]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a38:	4a24      	ldr	r2, [pc, #144]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a56:	4a1d      	ldr	r2, [pc, #116]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a74:	4a15      	ldr	r2, [pc, #84]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a76:	f043 0302 	orr.w	r3, r3, #2
 8000a7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_GPIO_Init+0xf0>)
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_GPIO_Init+0xf4>)
 8000abe:	f002 f855 	bl	8002b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	; 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	44020c00 	.word	0x44020c00
 8000ad0:	10110000 	.word	0x10110000
 8000ad4:	42021800 	.word	0x42021800

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>

08000ae2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0cc      	sub	sp, #304	; 0x130
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000afe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b14:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000b1e:	461a      	mov	r2, r3
 8000b20:	2100      	movs	r1, #0
 8000b22:	f009 f9cd 	bl	8009ec0 <memset>
  if(hadc->Instance==ADC1)
 8000b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a30      	ldr	r2, [pc, #192]	; (8000bf4 <HAL_ADC_MspInit+0x104>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d157      	bne.n	8000be8 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b3c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000b40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b50:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000b54:	2200      	movs	r2, #0
 8000b56:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 f9de 	bl	8003f20 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8000b6a:	f7ff ffb5 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b6e:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <HAL_ADC_MspInit+0x108>)
 8000b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b74:	4a20      	ldr	r2, [pc, #128]	; (8000bf8 <HAL_ADC_MspInit+0x108>)
 8000b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <HAL_ADC_MspInit+0x108>)
 8000b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b84:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b8c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b96:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000b9a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_ADC_MspInit+0x108>)
 8000b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ba2:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <HAL_ADC_MspInit+0x108>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_ADC_MspInit+0x108>)
 8000bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bb2:	f003 0201 	and.w	r2, r3, #1
 8000bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bc4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000bc8:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <HAL_ADC_MspInit+0x10c>)
 8000be4:	f001 ffc2 	bl	8002b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000be8:	bf00      	nop
 8000bea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	42028000 	.word	0x42028000
 8000bf8:	44020c00 	.word	0x44020c00
 8000bfc:	42020000 	.word	0x42020000

08000c00 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	; 0x38
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a59      	ldr	r2, [pc, #356]	; (8000d84 <HAL_ETH_MspInit+0x184>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	f040 80ab 	bne.w	8000d7a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c24:	4b58      	ldr	r3, [pc, #352]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a57      	ldr	r2, [pc, #348]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000c2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000c34:	4b54      	ldr	r3, [pc, #336]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c3e:	623b      	str	r3, [r7, #32]
 8000c40:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8000c42:	4b51      	ldr	r3, [pc, #324]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c48:	4a4f      	ldr	r2, [pc, #316]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000c52:	4b4d      	ldr	r3, [pc, #308]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8000c60:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a48      	ldr	r2, [pc, #288]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000c70:	4b45      	ldr	r3, [pc, #276]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	4b42      	ldr	r3, [pc, #264]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c84:	4a40      	ldr	r2, [pc, #256]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c8e:	4b3e      	ldr	r3, [pc, #248]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	4b3a      	ldr	r3, [pc, #232]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ca2:	4a39      	ldr	r2, [pc, #228]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cac:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cc0:	4a31      	ldr	r2, [pc, #196]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cca:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cde:	4a2a      	ldr	r2, [pc, #168]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <HAL_ETH_MspInit+0x188>)
 8000cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cf6:	2332      	movs	r3, #50	; 0x32
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d02:	2302      	movs	r3, #2
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d06:	230b      	movs	r3, #11
 8000d08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	481e      	ldr	r0, [pc, #120]	; (8000d8c <HAL_ETH_MspInit+0x18c>)
 8000d12:	f001 ff2b 	bl	8002b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d16:	2386      	movs	r3, #134	; 0x86
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d22:	2302      	movs	r3, #2
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d26:	230b      	movs	r3, #11
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4817      	ldr	r0, [pc, #92]	; (8000d90 <HAL_ETH_MspInit+0x190>)
 8000d32:	f001 ff1b 	bl	8002b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d44:	2302      	movs	r3, #2
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d48:	230b      	movs	r3, #11
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4810      	ldr	r0, [pc, #64]	; (8000d94 <HAL_ETH_MspInit+0x194>)
 8000d54:	f001 ff0a 	bl	8002b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000d58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d66:	2302      	movs	r3, #2
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d6a:	230b      	movs	r3, #11
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4808      	ldr	r0, [pc, #32]	; (8000d98 <HAL_ETH_MspInit+0x198>)
 8000d76:	f001 fef9 	bl	8002b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3738      	adds	r7, #56	; 0x38
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40028000 	.word	0x40028000
 8000d88:	44020c00 	.word	0x44020c00
 8000d8c:	42020800 	.word	0x42020800
 8000d90:	42020000 	.word	0x42020000
 8000d94:	42020400 	.word	0x42020400
 8000d98:	42021800 	.word	0x42021800

08000d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0cc      	sub	sp, #304	; 0x130
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000da6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000daa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000dc0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2100      	movs	r1, #0
 8000dce:	f009 f877 	bl	8009ec0 <memset>
  if(huart->Instance==LPUART1)
 8000dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000dd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a33      	ldr	r2, [pc, #204]	; (8000eac <HAL_UART_MspInit+0x110>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d15d      	bne.n	8000ea0 <HAL_UART_MspInit+0x104>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000de8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000dec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000dfc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e00:	2200      	movs	r2, #0
 8000e02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 f888 	bl	8003f20 <HAL_RCCEx_PeriphCLKConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000e16:	f7ff fe5f 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <HAL_UART_MspInit+0x114>)
 8000e1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e20:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <HAL_UART_MspInit+0x114>)
 8000e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e26:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000e2a:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <HAL_UART_MspInit+0x114>)
 8000e2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e30:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e42:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000e46:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_UART_MspInit+0x114>)
 8000e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e4e:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <HAL_UART_MspInit+0x114>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_UART_MspInit+0x114>)
 8000e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e5e:	f003 0202 	and.w	r2, r3, #2
 8000e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e70:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000e74:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000e76:	23c0      	movs	r3, #192	; 0xc0
 8000e78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e8e:	2308      	movs	r3, #8
 8000e90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <HAL_UART_MspInit+0x118>)
 8000e9c:	f001 fe66 	bl	8002b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	44002400 	.word	0x44002400
 8000eb0:	44020c00 	.word	0x44020c00
 8000eb4:	42020400 	.word	0x42020400

08000eb8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0cc      	sub	sp, #304	; 0x130
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ec2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ec6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000edc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f008 ffe9 	bl	8009ec0 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ef2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a33      	ldr	r2, [pc, #204]	; (8000fc8 <HAL_PCD_MspInit+0x110>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d15e      	bne.n	8000fbe <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f04:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	f04f 0310 	mov.w	r3, #16
 8000f10:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f18:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f1c:	2230      	movs	r2, #48	; 0x30
 8000f1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fffa 	bl	8003f20 <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_PCD_MspInit+0x7e>
    {
      Error_Handler();
 8000f32:	f7ff fdd1 	bl	8000ad8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <HAL_PCD_MspInit+0x114>)
 8000f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f3c:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <HAL_PCD_MspInit+0x114>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_PCD_MspInit+0x114>)
 8000f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f4c:	f003 0201 	and.w	r2, r3, #1
 8000f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f54:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f5e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f62:	681b      	ldr	r3, [r3, #0]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000f64:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000f7e:	230a      	movs	r3, #10
 8000f80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <HAL_PCD_MspInit+0x118>)
 8000f8c:	f001 fdee 	bl	8002b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_PCD_MspInit+0x114>)
 8000f92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f96:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_PCD_MspInit+0x114>)
 8000f98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f9c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_PCD_MspInit+0x114>)
 8000fa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000fa6:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8000faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fb8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000fbc:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40016000 	.word	0x40016000
 8000fcc:	44020c00 	.word	0x44020c00
 8000fd0:	42020000 	.word	0x42020000

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 f904 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800102e:	4b35      	ldr	r3, [pc, #212]	; (8001104 <SystemInit+0xdc>)
 8001030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001034:	4a33      	ldr	r2, [pc, #204]	; (8001104 <SystemInit+0xdc>)
 8001036:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <SystemInit+0xe0>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001044:	4b30      	ldr	r3, [pc, #192]	; (8001108 <SystemInit+0xe0>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800104a:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <SystemInit+0xe0>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <SystemInit+0xe0>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	492c      	ldr	r1, [pc, #176]	; (8001108 <SystemInit+0xe0>)
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <SystemInit+0xe4>)
 8001058:	4013      	ands	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <SystemInit+0xe0>)
 800105e:	2200      	movs	r2, #0
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <SystemInit+0xe0>)
 8001064:	2200      	movs	r2, #0
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <SystemInit+0xe0>)
 800106a:	2200      	movs	r2, #0
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <SystemInit+0xe0>)
 8001070:	4a27      	ldr	r2, [pc, #156]	; (8001110 <SystemInit+0xe8>)
 8001072:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <SystemInit+0xe0>)
 8001076:	2200      	movs	r2, #0
 8001078:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <SystemInit+0xe0>)
 800107c:	4a24      	ldr	r2, [pc, #144]	; (8001110 <SystemInit+0xe8>)
 800107e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <SystemInit+0xe0>)
 8001082:	2200      	movs	r2, #0
 8001084:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <SystemInit+0xe0>)
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <SystemInit+0xe8>)
 800108a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <SystemInit+0xe0>)
 800108e:	2200      	movs	r2, #0
 8001090:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <SystemInit+0xe0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <SystemInit+0xe0>)
 8001098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <SystemInit+0xe0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <SystemInit+0xdc>)
 80010a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010aa:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <SystemInit+0xec>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80010b4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80010bc:	d003      	beq.n	80010c6 <SystemInit+0x9e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80010c4:	d117      	bne.n	80010f6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <SystemInit+0xec>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <SystemInit+0xec>)
 80010d4:	4a10      	ldr	r2, [pc, #64]	; (8001118 <SystemInit+0xf0>)
 80010d6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <SystemInit+0xec>)
 80010da:	4a10      	ldr	r2, [pc, #64]	; (800111c <SystemInit+0xf4>)
 80010dc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <SystemInit+0xec>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <SystemInit+0xec>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <SystemInit+0xec>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a09      	ldr	r2, [pc, #36]	; (8001114 <SystemInit+0xec>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	61d3      	str	r3, [r2, #28]
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	44020c00 	.word	0x44020c00
 800110c:	eae2eae3 	.word	0xeae2eae3
 8001110:	01010280 	.word	0x01010280
 8001114:	40022000 	.word	0x40022000
 8001118:	08192a3b 	.word	0x08192a3b
 800111c:	4c5d6e7f 	.word	0x4c5d6e7f

08001120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001122:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001124:	f7ff ff80 	bl	8001028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <LoopForever+0x6>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	; (8001160 <LoopForever+0xa>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <LoopForever+0xe>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	; (800116c <LoopForever+0x16>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800114e:	f008 febf 	bl	8009ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001152:	f7ff fa63 	bl	800061c <main>

08001156 <LoopForever>:

LoopForever:
    b LoopForever
 8001156:	e7fe      	b.n	8001156 <LoopForever>
  ldr   r0, =_estack
 8001158:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001164:	08009f80 	.word	0x08009f80
  ldr r2, =_sbss
 8001168:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800116c:	200005e0 	.word	0x200005e0

08001170 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC1_IRQHandler>
	...

08001174 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f001 f891 	bl	80022a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800117e:	f002 fd45 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8001182:	4602      	mov	r2, r0
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x40>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	490a      	ldr	r1, [pc, #40]	; (80011b8 <HAL_Init+0x44>)
 800118e:	5ccb      	ldrb	r3, [r1, r3]
 8001190:	fa22 f303 	lsr.w	r3, r2, r3
 8001194:	4a09      	ldr	r2, [pc, #36]	; (80011bc <HAL_Init+0x48>)
 8001196:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001198:	200f      	movs	r0, #15
 800119a:	f000 f811 	bl	80011c0 <HAL_InitTick>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e002      	b.n	80011ae <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fc9b 	bl	8000ae2 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	44020c00 	.word	0x44020c00
 80011b8:	08009f30 	.word	0x08009f30
 80011bc:	20000000 	.word	0x20000000

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_InitTick+0x60>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e021      	b.n	8001218 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_InitTick+0x64>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_InitTick+0x60>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 f87d 	bl	80022ea <HAL_SYSTICK_Config>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00e      	b.n	8001218 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d80a      	bhi.n	8001216 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f001 f855 	bl	80022b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <HAL_InitTick+0x68>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000008 	.word	0x20000008
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008
 8001250:	200005dc 	.word	0x200005dc

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200005dc 	.word	0x200005dc

0800126c <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001276:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800127a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800127e:	4905      	ldr	r1, [pc, #20]	; (8001294 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4313      	orrs	r3, r2
 8001284:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	44000400 	.word	0x44000400

08001298 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	609a      	str	r2, [r3, #8]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	609a      	str	r2, [r3, #8]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800130e:	f043 0201 	orr.w	r2, r3, #1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <LL_ADC_EnableChannel0_GPIO+0x24>)
 800132e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	42028000 	.word	0x42028000

0800134c <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3360      	adds	r3, #96	; 0x60
 800135e:	461a      	mov	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <LL_ADC_SetOffset+0x44>)
 800136e:	4013      	ands	r3, r2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	4313      	orrs	r3, r2
 800137c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001384:	bf00      	nop
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	03fff000 	.word	0x03fff000

08001394 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3360      	adds	r3, #96	; 0x60
 80013a2:	461a      	mov	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3360      	adds	r3, #96	; 0x60
 80013d0:	461a      	mov	r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013ea:	bf00      	nop
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b087      	sub	sp, #28
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3360      	adds	r3, #96	; 0x60
 8001406:	461a      	mov	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	431a      	orrs	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001420:	bf00      	nop
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800142c:	b480      	push	{r7}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	3360      	adds	r3, #96	; 0x60
 800143c:	461a      	mov	r2, r3
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	431a      	orrs	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001456:	bf00      	nop
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	615a      	str	r2, [r3, #20]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3330      	adds	r3, #48	; 0x30
 8001498:	461a      	mov	r2, r3
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	4413      	add	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	211f      	movs	r1, #31
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	401a      	ands	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	0e9b      	lsrs	r3, r3, #26
 80014c0:	f003 011f 	and.w	r1, r3, #31
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	431a      	orrs	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014d4:	bf00      	nop
 80014d6:	371c      	adds	r7, #28
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3314      	adds	r3, #20
 80014f0:	461a      	mov	r2, r3
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	0e5b      	lsrs	r3, r3, #25
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	4413      	add	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	0d1b      	lsrs	r3, r3, #20
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	2107      	movs	r1, #7
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	401a      	ands	r2, r3
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	0d1b      	lsrs	r3, r3, #20
 800151a:	f003 031f 	and.w	r3, r3, #31
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	431a      	orrs	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800152a:	bf00      	nop
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001550:	43db      	mvns	r3, r3
 8001552:	401a      	ands	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0318 	and.w	r3, r3, #24
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <LL_ADC_SetChannelSingleDiff+0x44>)
 800155c:	40d9      	lsrs	r1, r3
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	400b      	ands	r3, r1
 8001562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001566:	431a      	orrs	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	000fffff 	.word	0x000fffff

08001580 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001590:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6093      	str	r3, [r2, #8]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015b8:	d101      	bne.n	80015be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001608:	d101      	bne.n	800160e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <LL_ADC_IsEnabled+0x18>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <LL_ADC_IsEnabled+0x1a>
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	2b04      	cmp	r3, #4
 8001654:	d101      	bne.n	800165a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b08      	cmp	r3, #8
 800167a:	d101      	bne.n	8001680 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e136      	b.n	8001918 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fa19 	bl	8000af0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff67 	bl	80015a4 <LL_ADC_IsDeepPowerDownEnabled>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff4d 	bl	8001580 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff82 	bl	80015f4 <LL_ADC_IsInternalRegulatorEnabled>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d115      	bne.n	8001722 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff66 	bl	80015cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001700:	4b87      	ldr	r3, [pc, #540]	; (8001920 <HAL_ADC_Init+0x290>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	4a87      	ldr	r2, [pc, #540]	; (8001924 <HAL_ADC_Init+0x294>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	3301      	adds	r3, #1
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001714:	e002      	b.n	800171c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3b01      	subs	r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f9      	bne.n	8001716 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff64 	bl	80015f4 <LL_ADC_IsInternalRegulatorEnabled>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10d      	bne.n	800174e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f043 0210 	orr.w	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff75 	bl	8001642 <LL_ADC_REG_IsConversionOngoing>
 8001758:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b00      	cmp	r3, #0
 8001764:	f040 80cf 	bne.w	8001906 <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 80cb 	bne.w	8001906 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001778:	f043 0202 	orr.w	r2, r3, #2
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff49 	bl	800161c <LL_ADC_IsEnabled>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d110      	bne.n	80017b2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001790:	4865      	ldr	r0, [pc, #404]	; (8001928 <HAL_ADC_Init+0x298>)
 8001792:	f7ff ff43 	bl	800161c <LL_ADC_IsEnabled>
 8001796:	4604      	mov	r4, r0
 8001798:	4864      	ldr	r0, [pc, #400]	; (800192c <HAL_ADC_Init+0x29c>)
 800179a:	f7ff ff3f 	bl	800161c <LL_ADC_IsEnabled>
 800179e:	4603      	mov	r3, r0
 80017a0:	4323      	orrs	r3, r4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4619      	mov	r1, r3
 80017ac:	4860      	ldr	r0, [pc, #384]	; (8001930 <HAL_ADC_Init+0x2a0>)
 80017ae:	f7ff fd73 	bl	8001298 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7e5b      	ldrb	r3, [r3, #25]
 80017b6:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017bc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80017c2:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017c8:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d0:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d106      	bne.n	80017ee <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	3b01      	subs	r3, #1
 80017e6:	045b      	lsls	r3, r3, #17
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	4b48      	ldr	r3, [pc, #288]	; (8001934 <HAL_ADC_Init+0x2a4>)
 8001812:	4013      	ands	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	69b9      	ldr	r1, [r7, #24]
 800181a:	430b      	orrs	r3, r1
 800181c:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff15 	bl	8001668 <LL_ADC_INJ_IsConversionOngoing>
 800183e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d13d      	bne.n	80018c2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d13a      	bne.n	80018c2 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7e1b      	ldrb	r3, [r3, #24]
 8001850:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001858:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001868:	f023 0302 	bic.w	r3, r3, #2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	69b9      	ldr	r1, [r7, #24]
 8001872:	430b      	orrs	r3, r1
 8001874:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800187c:	2b01      	cmp	r3, #1
 800187e:	d118      	bne.n	80018b2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800188a:	f023 0304 	bic.w	r3, r3, #4
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001896:	4311      	orrs	r1, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800189c:	4311      	orrs	r1, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80018a2:	430a      	orrs	r2, r1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	e007      	b.n	80018c2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d10c      	bne.n	80018e4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	f023 010f 	bic.w	r1, r3, #15
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	1e5a      	subs	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	631a      	str	r2, [r3, #48]	; 0x30
 80018e2:	e007      	b.n	80018f4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 020f 	bic.w	r2, r2, #15
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	f023 0303 	bic.w	r3, r3, #3
 80018fc:	f043 0201 	orr.w	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	659a      	str	r2, [r3, #88]	; 0x58
 8001904:	e007      	b.n	8001916 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	f043 0210 	orr.w	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001916:	7ffb      	ldrb	r3, [r7, #31]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3724      	adds	r7, #36	; 0x24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd90      	pop	{r4, r7, pc}
 8001920:	20000000 	.word	0x20000000
 8001924:	053e2d63 	.word	0x053e2d63
 8001928:	42028000 	.word	0x42028000
 800192c:	42028100 	.word	0x42028100
 8001930:	42028300 	.word	0x42028300
 8001934:	fff04007 	.word	0xfff04007

08001938 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b0b6      	sub	sp, #216	; 0xd8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_ADC_ConfigChannel+0x22>
 8001956:	2302      	movs	r3, #2
 8001958:	e3d8      	b.n	800210c <HAL_ADC_ConfigChannel+0x7d4>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fe6b 	bl	8001642 <LL_ADC_REG_IsConversionOngoing>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 83bd 	bne.w	80020ee <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d104      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fccf 	bl	8001324 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	6859      	ldr	r1, [r3, #4]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	f7ff fd78 	bl	8001488 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fe50 	bl	8001642 <LL_ADC_REG_IsConversionOngoing>
 80019a2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fe5c 	bl	8001668 <LL_ADC_INJ_IsConversionOngoing>
 80019b0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f040 81d9 	bne.w	8001d70 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 81d4 	bne.w	8001d70 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019d0:	d10f      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2200      	movs	r2, #0
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff fd7f 	bl	80014e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fd39 	bl	8001462 <LL_ADC_SetSamplingTimeCommonConfig>
 80019f0:	e00e      	b.n	8001a10 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6819      	ldr	r1, [r3, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	461a      	mov	r2, r3
 8001a00:	f7ff fd6e 	bl	80014e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fd29 	bl	8001462 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	08db      	lsrs	r3, r3, #3
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d022      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6919      	ldr	r1, [r3, #16]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a42:	f7ff fc83 	bl	800134c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6919      	ldr	r1, [r3, #16]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	461a      	mov	r2, r3
 8001a54:	f7ff fccf 	bl	80013f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d102      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x136>
 8001a68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a6c:	e000      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x138>
 8001a6e:	2300      	movs	r3, #0
 8001a70:	461a      	mov	r2, r3
 8001a72:	f7ff fcdb 	bl	800142c <LL_ADC_SetOffsetSaturation>
 8001a76:	e17b      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fc88 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10a      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x16c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fc7d 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	0e9b      	lsrs	r3, r3, #26
 8001a9e:	f003 021f 	and.w	r2, r3, #31
 8001aa2:	e01e      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x1aa>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fc72 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8001ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8001aca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 8001ad2:	2320      	movs	r3, #32
 8001ad4:	e004      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 8001ad6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d105      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x1c2>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	0e9b      	lsrs	r3, r3, #26
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	e018      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x1f4>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8001b1e:	2320      	movs	r3, #32
 8001b20:	e004      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8001b22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d106      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fc41 	bl	80013c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2101      	movs	r1, #1
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fc25 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10a      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x232>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fc1a 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	0e9b      	lsrs	r3, r3, #26
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	e01e      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x270>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2101      	movs	r1, #1
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fc0f 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	e004      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8001b9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d105      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x288>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0e9b      	lsrs	r3, r3, #26
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	e018      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x2ba>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001bd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8001be4:	2320      	movs	r3, #32
 8001be6:	e004      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8001be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d106      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fbde 	bl	80013c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2102      	movs	r1, #2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fbc2 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10a      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x2f8>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2102      	movs	r1, #2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fbb7 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001c26:	4603      	mov	r3, r0
 8001c28:	0e9b      	lsrs	r3, r3, #26
 8001c2a:	f003 021f 	and.w	r2, r3, #31
 8001c2e:	e01e      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x336>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2102      	movs	r1, #2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fbac 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 8001c5e:	2320      	movs	r3, #32
 8001c60:	e004      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8001c62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x34e>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	0e9b      	lsrs	r3, r3, #26
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	e016      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x37c>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	e004      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8001caa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d106      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2102      	movs	r1, #2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fb7d 	bl	80013c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2103      	movs	r1, #3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fb61 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10a      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x3ba>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2103      	movs	r1, #3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fb56 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	0e9b      	lsrs	r3, r3, #26
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	e017      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x3ea>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2103      	movs	r1, #3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fb4b 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d0c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8001d14:	2320      	movs	r3, #32
 8001d16:	e003      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8001d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d105      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x402>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0e9b      	lsrs	r3, r3, #26
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	e011      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x426>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8001d52:	2320      	movs	r3, #32
 8001d54:	e003      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8001d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d106      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2200      	movs	r2, #0
 8001d68:	2103      	movs	r1, #3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fb28 	bl	80013c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fc51 	bl	800161c <LL_ADC_IsEnabled>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 813f 	bne.w	8002000 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6819      	ldr	r1, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f7ff fbd2 	bl	8001538 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4a8e      	ldr	r2, [pc, #568]	; (8001fd4 <HAL_ADC_ConfigChannel+0x69c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	f040 8130 	bne.w	8002000 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10b      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x490>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0e9b      	lsrs	r3, r3, #26
 8001db6:	3301      	adds	r3, #1
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	bf94      	ite	ls
 8001dc0:	2301      	movls	r3, #1
 8001dc2:	2300      	movhi	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	e019      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x4c4>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dd8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8001de0:	2320      	movs	r3, #32
 8001de2:	e003      	b.n	8001dec <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8001de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	2b09      	cmp	r3, #9
 8001df4:	bf94      	ite	ls
 8001df6:	2301      	movls	r3, #1
 8001df8:	2300      	movhi	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d079      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d107      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x4e4>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0e9b      	lsrs	r3, r3, #26
 8001e12:	3301      	adds	r3, #1
 8001e14:	069b      	lsls	r3, r3, #26
 8001e16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e1a:	e015      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x510>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8001e34:	2320      	movs	r3, #32
 8001e36:	e003      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8001e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	069b      	lsls	r3, r3, #26
 8001e44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x530>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0e9b      	lsrs	r3, r3, #26
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	2101      	movs	r1, #1
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	e017      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x560>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e78:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8001e80:	2320      	movs	r3, #32
 8001e82:	e003      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8001e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	ea42 0103 	orr.w	r1, r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10a      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x586>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0e9b      	lsrs	r3, r3, #26
 8001eae:	3301      	adds	r3, #1
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	051b      	lsls	r3, r3, #20
 8001ebc:	e018      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x5b8>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	e003      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8001eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	e080      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d107      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x5d8>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0e9b      	lsrs	r3, r3, #26
 8001f06:	3301      	adds	r3, #1
 8001f08:	069b      	lsls	r3, r3, #26
 8001f0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f0e:	e015      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x604>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	e003      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8001f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	069b      	lsls	r3, r3, #26
 8001f38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x624>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0e9b      	lsrs	r3, r3, #26
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	2101      	movs	r1, #1
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	e017      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x654>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	61fb      	str	r3, [r7, #28]
  return result;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8001f74:	2320      	movs	r3, #32
 8001f76:	e003      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	ea42 0103 	orr.w	r1, r2, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10d      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x680>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	0e9b      	lsrs	r3, r3, #26
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	3b1e      	subs	r3, #30
 8001fb0:	051b      	lsls	r3, r3, #20
 8001fb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	e01d      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x6bc>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	613b      	str	r3, [r7, #16]
  return result;
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d103      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	e005      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x6a8>
 8001fd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f003 021f 	and.w	r2, r3, #31
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	3b1e      	subs	r3, #30
 8001fee:	051b      	lsls	r3, r3, #20
 8001ff0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7ff fa70 	bl	80014e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b43      	ldr	r3, [pc, #268]	; (8002114 <HAL_ADC_ConfigChannel+0x7dc>)
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d079      	beq.n	8002100 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800200c:	4842      	ldr	r0, [pc, #264]	; (8002118 <HAL_ADC_ConfigChannel+0x7e0>)
 800200e:	f7ff f969 	bl	80012e4 <LL_ADC_GetCommonPathInternalCh>
 8002012:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a40      	ldr	r2, [pc, #256]	; (800211c <HAL_ADC_ConfigChannel+0x7e4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d124      	bne.n	800206a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d11e      	bne.n	800206a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a3b      	ldr	r2, [pc, #236]	; (8002120 <HAL_ADC_ConfigChannel+0x7e8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d164      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800203a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800203e:	4619      	mov	r1, r3
 8002040:	4835      	ldr	r0, [pc, #212]	; (8002118 <HAL_ADC_ConfigChannel+0x7e0>)
 8002042:	f7ff f93c 	bl	80012be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002046:	4b37      	ldr	r3, [pc, #220]	; (8002124 <HAL_ADC_ConfigChannel+0x7ec>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	099b      	lsrs	r3, r3, #6
 800204c:	4a36      	ldr	r2, [pc, #216]	; (8002128 <HAL_ADC_ConfigChannel+0x7f0>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	099b      	lsrs	r3, r3, #6
 8002054:	3301      	adds	r3, #1
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800205a:	e002      	b.n	8002062 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3b01      	subs	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f9      	bne.n	800205c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002068:	e04a      	b.n	8002100 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a2f      	ldr	r2, [pc, #188]	; (800212c <HAL_ADC_ConfigChannel+0x7f4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d113      	bne.n	800209c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002074:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10d      	bne.n	800209c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2a      	ldr	r2, [pc, #168]	; (8002130 <HAL_ADC_ConfigChannel+0x7f8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d13a      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800208a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800208e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002092:	4619      	mov	r1, r3
 8002094:	4820      	ldr	r0, [pc, #128]	; (8002118 <HAL_ADC_ConfigChannel+0x7e0>)
 8002096:	f7ff f912 	bl	80012be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800209a:	e031      	b.n	8002100 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a24      	ldr	r2, [pc, #144]	; (8002134 <HAL_ADC_ConfigChannel+0x7fc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d113      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10d      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HAL_ADC_ConfigChannel+0x7e8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d121      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c4:	4619      	mov	r1, r3
 80020c6:	4814      	ldr	r0, [pc, #80]	; (8002118 <HAL_ADC_ConfigChannel+0x7e0>)
 80020c8:	f7ff f8f9 	bl	80012be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 80020cc:	e018      	b.n	8002100 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_ADC_ConfigChannel+0x800>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d113      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_ADC_ConfigChannel+0x7e8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00e      	beq.n	8002100 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff f90a 	bl	8001300 <LL_ADC_EnableChannelVDDcore>
 80020ec:	e008      	b.n	8002100 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	f043 0220 	orr.w	r2, r3, #32
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002108:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800210c:	4618      	mov	r0, r3
 800210e:	37d8      	adds	r7, #216	; 0xd8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	80080000 	.word	0x80080000
 8002118:	42028300 	.word	0x42028300
 800211c:	c3210000 	.word	0xc3210000
 8002120:	42028000 	.word	0x42028000
 8002124:	20000000 	.word	0x20000000
 8002128:	053e2d63 	.word	0x053e2d63
 800212c:	43290000 	.word	0x43290000
 8002130:	42028100 	.word	0x42028100
 8002134:	c7520000 	.word	0xc7520000
 8002138:	475a0000 	.word	0x475a0000

0800213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216e:	4a04      	ldr	r2, [pc, #16]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	60d3      	str	r3, [r2, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	db0a      	blt.n	80021ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	490c      	ldr	r1, [pc, #48]	; (80021ec <__NVIC_SetPriority+0x4c>)
 80021ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	440b      	add	r3, r1
 80021c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c8:	e00a      	b.n	80021e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <__NVIC_SetPriority+0x50>)
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3b04      	subs	r3, #4
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	440b      	add	r3, r1
 80021de:	761a      	strb	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000e100 	.word	0xe000e100
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f1c3 0307 	rsb	r3, r3, #7
 800220e:	2b04      	cmp	r3, #4
 8002210:	bf28      	it	cs
 8002212:	2304      	movcs	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	2b06      	cmp	r3, #6
 800221c:	d902      	bls.n	8002224 <NVIC_EncodePriority+0x30>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b03      	subs	r3, #3
 8002222:	e000      	b.n	8002226 <NVIC_EncodePriority+0x32>
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	f04f 32ff 	mov.w	r2, #4294967295
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223c:	f04f 31ff 	mov.w	r1, #4294967295
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	43d9      	mvns	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	4313      	orrs	r3, r2
         );
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	; 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800226c:	d301      	bcc.n	8002272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226e:	2301      	movs	r3, #1
 8002270:	e00f      	b.n	8002292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <SysTick_Config+0x40>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227a:	210f      	movs	r1, #15
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f7ff ff8e 	bl	80021a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <SysTick_Config+0x40>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <SysTick_Config+0x40>)
 800228c:	2207      	movs	r2, #7
 800228e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	e000e010 	.word	0xe000e010

080022a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff47 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022c4:	f7ff ff5e 	bl	8002184 <__NVIC_GetPriorityGrouping>
 80022c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	6978      	ldr	r0, [r7, #20]
 80022d0:	f7ff ff90 	bl	80021f4 <NVIC_EncodePriority>
 80022d4:	4602      	mov	r2, r0
 80022d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff5f 	bl	80021a0 <__NVIC_SetPriority>
}
 80022e2:	bf00      	nop
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff ffb2 	bl	800225c <SysTick_Config>
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0d2      	b.n	80024bc <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231c:	2b00      	cmp	r3, #0
 800231e:	d106      	bne.n	800232e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2223      	movs	r2, #35	; 0x23
 8002324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7fe fc69 	bl	8000c00 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 800232e:	4b65      	ldr	r3, [pc, #404]	; (80024c4 <HAL_ETH_Init+0x1c0>)
 8002330:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002334:	4a63      	ldr	r2, [pc, #396]	; (80024c4 <HAL_ETH_Init+0x1c0>)
 8002336:	f043 0302 	orr.w	r3, r3, #2
 800233a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800233e:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <HAL_ETH_Init+0x1c0>)
 8002340:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7a1b      	ldrb	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d103      	bne.n	800235c <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8002354:	2000      	movs	r0, #0
 8002356:	f7fe ff89 	bl	800126c <HAL_SBS_ETHInterfaceSelect>
 800235a:	e003      	b.n	8002364 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 800235c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002360:	f7fe ff84 	bl	800126c <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8002364:	4b58      	ldr	r3, [pc, #352]	; (80024c8 <HAL_ETH_Init+0x1c4>)
 8002366:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002380:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002382:	f7fe ff67 	bl	8001254 <HAL_GetTick>
 8002386:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002388:	e011      	b.n	80023ae <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800238a:	f7fe ff63 	bl	8001254 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002398:	d909      	bls.n	80023ae <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2204      	movs	r2, #4
 800239e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	22e0      	movs	r2, #224	; 0xe0
 80023a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e086      	b.n	80024bc <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e4      	bne.n	800238a <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f885 	bl	80024d0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80023c6:	f001 fd4d 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4a3f      	ldr	r2, [pc, #252]	; (80024cc <HAL_ETH_Init+0x1c8>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0c9a      	lsrs	r2, r3, #18
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	3a01      	subs	r2, #1
 80023da:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fa80 	bl	80028e4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80023f0:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002400:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d009      	beq.n	8002424 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	22e0      	movs	r2, #224	; 0xe0
 800241c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e04b      	b.n	80024bc <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002430:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002434:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6952      	ldr	r2, [r2, #20]
 800243c:	0051      	lsls	r1, r2, #1
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	430b      	orrs	r3, r1
 8002444:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002448:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fae6 	bl	8002a1e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fb2c 	bl	8002ab0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	3305      	adds	r3, #5
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	021a      	lsls	r2, r3, #8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	3303      	adds	r3, #3
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	061a      	lsls	r2, r3, #24
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	3302      	adds	r3, #2
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	041b      	lsls	r3, r3, #16
 800248a:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	3301      	adds	r3, #1
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002496:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80024a4:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80024a6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2210      	movs	r2, #16
 80024b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	44020c00 	.word	0x44020c00
 80024c8:	44000400 	.word	0x44000400
 80024cc:	431bde83 	.word	0x431bde83

080024d0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80024ea:	f001 fcbb 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 80024ee:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4a25      	ldr	r2, [pc, #148]	; (8002588 <HAL_ETH_SetMDIOClockRange+0xb8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d908      	bls.n	800250a <HAL_ETH_SetMDIOClockRange+0x3a>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4a24      	ldr	r2, [pc, #144]	; (800258c <HAL_ETH_SetMDIOClockRange+0xbc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d804      	bhi.n	800250a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e034      	b.n	8002574 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_ETH_SetMDIOClockRange+0xbc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d908      	bls.n	8002524 <HAL_ETH_SetMDIOClockRange+0x54>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d204      	bcs.n	8002524 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	e027      	b.n	8002574 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d303      	bcc.n	8002534 <HAL_ETH_SetMDIOClockRange+0x64>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4a19      	ldr	r2, [pc, #100]	; (8002594 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d91e      	bls.n	8002572 <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4a17      	ldr	r2, [pc, #92]	; (8002594 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d908      	bls.n	800254e <HAL_ETH_SetMDIOClockRange+0x7e>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4a16      	ldr	r2, [pc, #88]	; (8002598 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d804      	bhi.n	800254e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	e012      	b.n	8002574 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d908      	bls.n	8002568 <HAL_ETH_SetMDIOClockRange+0x98>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4a10      	ldr	r2, [pc, #64]	; (800259c <HAL_ETH_SetMDIOClockRange+0xcc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d804      	bhi.n	8002568 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	e005      	b.n	8002574 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e000      	b.n	8002574 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002572:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	01312cff 	.word	0x01312cff
 800258c:	02160ebf 	.word	0x02160ebf
 8002590:	03938700 	.word	0x03938700
 8002594:	05f5e0ff 	.word	0x05f5e0ff
 8002598:	08f0d17f 	.word	0x08f0d17f
 800259c:	0ee6b280 	.word	0x0ee6b280

080025a0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80025b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	791b      	ldrb	r3, [r3, #4]
 80025b8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80025ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	7b1b      	ldrb	r3, [r3, #12]
 80025c0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80025c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	7b5b      	ldrb	r3, [r3, #13]
 80025c8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80025ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	7b9b      	ldrb	r3, [r3, #14]
 80025d0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80025d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	7bdb      	ldrb	r3, [r3, #15]
 80025d8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80025da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	7c12      	ldrb	r2, [r2, #16]
 80025e0:	2a00      	cmp	r2, #0
 80025e2:	d102      	bne.n	80025ea <ETH_SetMACConfig+0x4a>
 80025e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025e8:	e000      	b.n	80025ec <ETH_SetMACConfig+0x4c>
 80025ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80025ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	7c52      	ldrb	r2, [r2, #17]
 80025f2:	2a00      	cmp	r2, #0
 80025f4:	d102      	bne.n	80025fc <ETH_SetMACConfig+0x5c>
 80025f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025fa:	e000      	b.n	80025fe <ETH_SetMACConfig+0x5e>
 80025fc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	7c9b      	ldrb	r3, [r3, #18]
 8002604:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002606:	431a      	orrs	r2, r3
               macconf->Speed |
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800260c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002612:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	7f1b      	ldrb	r3, [r3, #28]
 8002618:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800261a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	7f5b      	ldrb	r3, [r3, #29]
 8002620:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002622:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	7f92      	ldrb	r2, [r2, #30]
 8002628:	2a00      	cmp	r2, #0
 800262a:	d102      	bne.n	8002632 <ETH_SetMACConfig+0x92>
 800262c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002630:	e000      	b.n	8002634 <ETH_SetMACConfig+0x94>
 8002632:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002634:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	7fdb      	ldrb	r3, [r3, #31]
 800263a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800263c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002644:	2a00      	cmp	r2, #0
 8002646:	d102      	bne.n	800264e <ETH_SetMACConfig+0xae>
 8002648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800264c:	e000      	b.n	8002650 <ETH_SetMACConfig+0xb0>
 800264e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002650:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800265e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002660:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b57      	ldr	r3, [pc, #348]	; (80027d0 <ETH_SetMACConfig+0x230>)
 8002672:	4013      	ands	r3, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	68f9      	ldr	r1, [r7, #12]
 800267a:	430b      	orrs	r3, r1
 800267c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800268a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800268c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002694:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002696:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800269e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80026a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80026a8:	2a00      	cmp	r2, #0
 80026aa:	d102      	bne.n	80026b2 <ETH_SetMACConfig+0x112>
 80026ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026b0:	e000      	b.n	80026b4 <ETH_SetMACConfig+0x114>
 80026b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80026b4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <ETH_SetMACConfig+0x234>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	68f9      	ldr	r1, [r7, #12]
 80026ce:	430b      	orrs	r3, r1
 80026d0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	68f9      	ldr	r1, [r7, #12]
 80026f6:	430b      	orrs	r3, r1
 80026f8:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002700:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002706:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800270e:	2a00      	cmp	r2, #0
 8002710:	d101      	bne.n	8002716 <ETH_SetMACConfig+0x176>
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	e000      	b.n	8002718 <ETH_SetMACConfig+0x178>
 8002716:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002718:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002720:	4313      	orrs	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800272a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	68f9      	ldr	r1, [r7, #12]
 8002736:	430b      	orrs	r3, r1
 8002738:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002740:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002748:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	f023 0103 	bic.w	r1, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	430a      	orrs	r2, r1
 8002762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800276e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800278a:	2a00      	cmp	r2, #0
 800278c:	d101      	bne.n	8002792 <ETH_SetMACConfig+0x1f2>
 800278e:	2240      	movs	r2, #64	; 0x40
 8002790:	e000      	b.n	8002794 <ETH_SetMACConfig+0x1f4>
 8002792:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002794:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800279c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800279e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80027a6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80027b4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	430a      	orrs	r2, r1
 80027c0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	00048083 	.word	0x00048083
 80027d4:	c0f88000 	.word	0xc0f88000

080027d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80027f0:	f023 0302 	bic.w	r3, r3, #2
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	6811      	ldr	r1, [r2, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002802:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	791b      	ldrb	r3, [r3, #4]
 8002808:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800280e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	7b1b      	ldrb	r3, [r3, #12]
 8002814:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	68f9      	ldr	r1, [r7, #12]
 8002832:	430b      	orrs	r3, r1
 8002834:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002838:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	7b5b      	ldrb	r3, [r3, #13]
 800283e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002850:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002854:	4b21      	ldr	r3, [pc, #132]	; (80028dc <ETH_SetDMAConfig+0x104>)
 8002856:	4013      	ands	r3, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	68f9      	ldr	r1, [r7, #12]
 800285e:	430b      	orrs	r3, r1
 8002860:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002864:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	7d1b      	ldrb	r3, [r3, #20]
 8002870:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002872:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	7f5b      	ldrb	r3, [r3, #29]
 8002878:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002886:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <ETH_SetDMAConfig+0x108>)
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	68f9      	ldr	r1, [r7, #12]
 8002894:	430b      	orrs	r3, r1
 8002896:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800289a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	7f1b      	ldrb	r3, [r3, #28]
 80028a2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028bc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	68f9      	ldr	r1, [r7, #12]
 80028c6:	430b      	orrs	r3, r1
 80028c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	fffec000 	.word	0xfffec000
 80028e0:	ffc0efef 	.word	0xffc0efef

080028e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b0a4      	sub	sp, #144	; 0x90
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80028ec:	2301      	movs	r3, #1
 80028ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028f2:	2300      	movs	r3, #0
 80028f4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002902:	2301      	movs	r3, #1
 8002904:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002908:	2301      	movs	r3, #1
 800290a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800290e:	2301      	movs	r3, #1
 8002910:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800291a:	2301      	movs	r3, #1
 800291c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002924:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800292c:	2300      	movs	r3, #0
 800292e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800293c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002940:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002948:	2300      	movs	r3, #0
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800295e:	2300      	movs	r3, #0
 8002960:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002962:	2300      	movs	r3, #0
 8002964:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002966:	2300      	movs	r3, #0
 8002968:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800297c:	2320      	movs	r3, #32
 800297e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800298e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002994:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002998:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800299a:	2300      	movs	r3, #0
 800299c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80029a0:	2302      	movs	r3, #2
 80029a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80029be:	2300      	movs	r3, #0
 80029c0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029cc:	4619      	mov	r1, r3
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff fde6 	bl	80025a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029d4:	2301      	movs	r3, #1
 80029d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029d8:	2301      	movs	r3, #1
 80029da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80029dc:	2300      	movs	r3, #0
 80029de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002a04:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a0a:	f107 0308 	add.w	r3, r7, #8
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff fee1 	bl	80027d8 <ETH_SetDMAConfig>
}
 8002a16:	bf00      	nop
 8002a18:	3790      	adds	r7, #144	; 0x90
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	e01d      	b.n	8002a68 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68d9      	ldr	r1, [r3, #12]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2200      	movs	r2, #0
 8002a48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	3206      	adds	r2, #6
 8002a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3301      	adds	r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d9de      	bls.n	8002a2c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2303      	movs	r3, #3
 8002a80:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a90:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	e023      	b.n	8002b06 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6919      	ldr	r1, [r3, #16]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2200      	movs	r2, #0
 8002af2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	3212      	adds	r2, #18
 8002afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3301      	adds	r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d9d8      	bls.n	8002abe <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b32:	461a      	mov	r2, r3
 8002b34:	2303      	movs	r3, #3
 8002b36:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b46:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b5a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b7a:	e136      	b.n	8002dea <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2101      	movs	r1, #1
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8128 	beq.w	8002de4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x38>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b12      	cmp	r3, #18
 8002ba2:	d125      	bne.n	8002bf0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	08da      	lsrs	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3208      	adds	r2, #8
 8002bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f003 020f 	and.w	r2, r3, #15
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	08da      	lsrs	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3208      	adds	r2, #8
 8002bea:	6979      	ldr	r1, [r7, #20]
 8002bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4013      	ands	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d00b      	beq.n	8002c44 <HAL_GPIO_Init+0xd8>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d007      	beq.n	8002c44 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c38:	2b11      	cmp	r3, #17
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b12      	cmp	r3, #18
 8002c42:	d130      	bne.n	8002ca6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4013      	ands	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	f003 0201 	and.w	r2, r3, #1
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d017      	beq.n	8002cde <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d07c      	beq.n	8002de4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002cea:	4a47      	ldr	r2, [pc, #284]	; (8002e08 <HAL_GPIO_Init+0x29c>)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	3318      	adds	r3, #24
 8002cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	220f      	movs	r2, #15
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0a9a      	lsrs	r2, r3, #10
 8002d12:	4b3e      	ldr	r3, [pc, #248]	; (8002e0c <HAL_GPIO_Init+0x2a0>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	f002 0203 	and.w	r2, r2, #3
 8002d1c:	00d2      	lsls	r2, r2, #3
 8002d1e:	4093      	lsls	r3, r2
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002d26:	4938      	ldr	r1, [pc, #224]	; (8002e08 <HAL_GPIO_Init+0x29c>)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	3318      	adds	r3, #24
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002d34:	4b34      	ldr	r3, [pc, #208]	; (8002e08 <HAL_GPIO_Init+0x29c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4013      	ands	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002d58:	4a2b      	ldr	r2, [pc, #172]	; (8002e08 <HAL_GPIO_Init+0x29c>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002d5e:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <HAL_GPIO_Init+0x29c>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002d82:	4a21      	ldr	r2, [pc, #132]	; (8002e08 <HAL_GPIO_Init+0x29c>)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002d88:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <HAL_GPIO_Init+0x29c>)
 8002d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d8e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4013      	ands	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002dae:	4a16      	ldr	r2, [pc, #88]	; (8002e08 <HAL_GPIO_Init+0x29c>)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <HAL_GPIO_Init+0x29c>)
 8002db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dbc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <HAL_GPIO_Init+0x29c>)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	3301      	adds	r3, #1
 8002de8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f47f aec1 	bne.w	8002b7c <HAL_GPIO_Init+0x10>
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	44022000 	.word	0x44022000
 8002e0c:	002f7f7f 	.word	0x002f7f7f

08002e10 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_ICACHE_Enable+0x1c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <HAL_ICACHE_Enable+0x1c>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	40030400 	.word	0x40030400

08002e30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e32:	b08f      	sub	sp, #60	; 0x3c
 8002e34:	af0a      	add	r7, sp, #40	; 0x28
 8002e36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e0cd      	b.n	8002fde <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fe f82e 	bl	8000eb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2203      	movs	r2, #3
 8002e60:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f006 ffce 	bl	8009e0a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
 8002e72:	e03e      	b.n	8002ef2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	333d      	adds	r3, #61	; 0x3d
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	440b      	add	r3, r1
 8002e96:	333c      	adds	r3, #60	; 0x3c
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	333f      	adds	r3, #63	; 0x3f
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	334c      	adds	r3, #76	; 0x4c
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3350      	adds	r3, #80	; 0x50
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3354      	adds	r3, #84	; 0x54
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
 8002ef2:	7bfa      	ldrb	r2, [r7, #15]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d3bb      	bcc.n	8002e74 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	e044      	b.n	8002f8c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	f203 137d 	addw	r3, r3, #381	; 0x17d
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	440b      	add	r3, r1
 8002f26:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f2e:	7bfa      	ldrb	r2, [r7, #15]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f44:	7bfa      	ldrb	r2, [r7, #15]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	440b      	add	r3, r1
 8002f52:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d3b5      	bcc.n	8002f02 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	687e      	ldr	r6, [r7, #4]
 8002f9e:	466d      	mov	r5, sp
 8002fa0:	f106 0410 	add.w	r4, r6, #16
 8002fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fb4:	1d33      	adds	r3, r6, #4
 8002fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb8:	6838      	ldr	r0, [r7, #0]
 8002fba:	f006 ff5e 	bl	8009e7a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d102      	bne.n	8002fdc <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f805 	bl	8002fe6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fe6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	f043 0202 	orr.w	r2, r3, #2
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	f000 bc28 	b.w	8003890 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003040:	4b94      	ldr	r3, [pc, #592]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	f003 0318 	and.w	r3, r3, #24
 8003048:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800304a:	4b92      	ldr	r3, [pc, #584]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	d05b      	beq.n	8003118 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b08      	cmp	r3, #8
 8003064:	d005      	beq.n	8003072 <HAL_RCC_OscConfig+0x46>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	2b18      	cmp	r3, #24
 800306a:	d114      	bne.n	8003096 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d111      	bne.n	8003096 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f000 bc08 	b.w	8003890 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003080:	4b84      	ldr	r3, [pc, #528]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	041b      	lsls	r3, r3, #16
 800308e:	4981      	ldr	r1, [pc, #516]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 8003090:	4313      	orrs	r3, r2
 8003092:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003094:	e040      	b.n	8003118 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d023      	beq.n	80030e6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800309e:	4b7d      	ldr	r3, [pc, #500]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7c      	ldr	r2, [pc, #496]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fe f8d3 	bl	8001254 <HAL_GetTick>
 80030ae:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80030b2:	f7fe f8cf 	bl	8001254 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e3e5      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80030c4:	4b73      	ldr	r3, [pc, #460]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80030d0:	4b70      	ldr	r3, [pc, #448]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	496d      	ldr	r1, [pc, #436]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	618b      	str	r3, [r1, #24]
 80030e4:	e018      	b.n	8003118 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030e6:	4b6b      	ldr	r3, [pc, #428]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6a      	ldr	r2, [pc, #424]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80030ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe f8af 	bl	8001254 <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80030fa:	f7fe f8ab 	bl	8001254 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e3c1      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800310c:	4b61      	ldr	r3, [pc, #388]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a0 	beq.w	8003266 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	2b10      	cmp	r3, #16
 800312a:	d005      	beq.n	8003138 <HAL_RCC_OscConfig+0x10c>
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b18      	cmp	r3, #24
 8003130:	d109      	bne.n	8003146 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	f040 8092 	bne.w	8003266 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e3a4      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314e:	d106      	bne.n	800315e <HAL_RCC_OscConfig+0x132>
 8003150:	4b50      	ldr	r3, [pc, #320]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a4f      	ldr	r2, [pc, #316]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 8003156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	e058      	b.n	8003210 <HAL_RCC_OscConfig+0x1e4>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d112      	bne.n	800318c <HAL_RCC_OscConfig+0x160>
 8003166:	4b4b      	ldr	r3, [pc, #300]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a4a      	ldr	r2, [pc, #296]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 800316c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	4b48      	ldr	r3, [pc, #288]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a47      	ldr	r2, [pc, #284]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 8003178:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b45      	ldr	r3, [pc, #276]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a44      	ldr	r2, [pc, #272]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 8003184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e041      	b.n	8003210 <HAL_RCC_OscConfig+0x1e4>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003194:	d112      	bne.n	80031bc <HAL_RCC_OscConfig+0x190>
 8003196:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a3e      	ldr	r2, [pc, #248]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 800319c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	4b3c      	ldr	r3, [pc, #240]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a3b      	ldr	r2, [pc, #236]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a38      	ldr	r2, [pc, #224]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e029      	b.n	8003210 <HAL_RCC_OscConfig+0x1e4>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80031c4:	d112      	bne.n	80031ec <HAL_RCC_OscConfig+0x1c0>
 80031c6:	4b33      	ldr	r3, [pc, #204]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a32      	ldr	r2, [pc, #200]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4b30      	ldr	r3, [pc, #192]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2f      	ldr	r2, [pc, #188]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2c      	ldr	r2, [pc, #176]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e011      	b.n	8003210 <HAL_RCC_OscConfig+0x1e4>
 80031ec:	4b29      	ldr	r3, [pc, #164]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a28      	ldr	r2, [pc, #160]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b26      	ldr	r3, [pc, #152]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a25      	ldr	r2, [pc, #148]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 80031fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b23      	ldr	r3, [pc, #140]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a22      	ldr	r2, [pc, #136]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 800320a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800320e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe f81c 	bl	8001254 <HAL_GetTick>
 800321c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003220:	f7fe f818 	bl	8001254 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e32e      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x1f4>
 800323e:	e012      	b.n	8003266 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe f808 	bl	8001254 <HAL_GetTick>
 8003244:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003248:	f7fe f804 	bl	8001254 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e31a      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800325a:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <HAL_RCC_OscConfig+0x268>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 809a 	beq.w	80033a8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x25a>
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	2b18      	cmp	r3, #24
 800327e:	d149      	bne.n	8003314 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d146      	bne.n	8003314 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d104      	bne.n	8003298 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e2fe      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
 8003292:	bf00      	nop
 8003294:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800329e:	4b9a      	ldr	r3, [pc, #616]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0218 	and.w	r2, r3, #24
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d014      	beq.n	80032d8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80032ae:	4b96      	ldr	r3, [pc, #600]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 0218 	bic.w	r2, r3, #24
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	4993      	ldr	r1, [pc, #588]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80032c0:	f000 fdd0 	bl	8003e64 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032c4:	4b91      	ldr	r3, [pc, #580]	; (800350c <HAL_RCC_OscConfig+0x4e0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd ff79 	bl	80011c0 <HAL_InitTick>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e2db      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fd ffbc 	bl	8001254 <HAL_GetTick>
 80032dc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80032e0:	f7fd ffb8 	bl	8001254 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e2ce      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f2:	4b85      	ldr	r3, [pc, #532]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80032fe:	4b82      	ldr	r3, [pc, #520]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	497e      	ldr	r1, [pc, #504]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003312:	e049      	b.n	80033a8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d02c      	beq.n	8003376 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800331c:	4b7a      	ldr	r3, [pc, #488]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f023 0218 	bic.w	r2, r3, #24
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	4977      	ldr	r1, [pc, #476]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800332e:	4b76      	ldr	r3, [pc, #472]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a75      	ldr	r2, [pc, #468]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fd ff8b 	bl	8001254 <HAL_GetTick>
 800333e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003342:	f7fd ff87 	bl	8001254 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e29d      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003354:	4b6c      	ldr	r3, [pc, #432]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003360:	4b69      	ldr	r3, [pc, #420]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	041b      	lsls	r3, r3, #16
 800336e:	4966      	ldr	r1, [pc, #408]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003370:	4313      	orrs	r3, r2
 8003372:	610b      	str	r3, [r1, #16]
 8003374:	e018      	b.n	80033a8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003376:	4b64      	ldr	r3, [pc, #400]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a63      	ldr	r2, [pc, #396]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fd ff67 	bl	8001254 <HAL_GetTick>
 8003386:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800338a:	f7fd ff63 	bl	8001254 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e279      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800339c:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f0      	bne.n	800338a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d03c      	beq.n	800342e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033bc:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80033be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033c2:	4a51      	ldr	r2, [pc, #324]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80033c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fd ff42 	bl	8001254 <HAL_GetTick>
 80033d0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80033d4:	f7fd ff3e 	bl	8001254 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e254      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80033e6:	4b48      	ldr	r3, [pc, #288]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80033e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ef      	beq.n	80033d4 <HAL_RCC_OscConfig+0x3a8>
 80033f4:	e01b      	b.n	800342e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f6:	4b44      	ldr	r3, [pc, #272]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80033f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033fc:	4a42      	ldr	r2, [pc, #264]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80033fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003402:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fd ff25 	bl	8001254 <HAL_GetTick>
 800340a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800340e:	f7fd ff21 	bl	8001254 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e237      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003420:	4b39      	ldr	r3, [pc, #228]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003426:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ef      	bne.n	800340e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80d2 	beq.w	80035e0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800343c:	4b34      	ldr	r3, [pc, #208]	; (8003510 <HAL_RCC_OscConfig+0x4e4>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d118      	bne.n	800347a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003448:	4b31      	ldr	r3, [pc, #196]	; (8003510 <HAL_RCC_OscConfig+0x4e4>)
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	4a30      	ldr	r2, [pc, #192]	; (8003510 <HAL_RCC_OscConfig+0x4e4>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003454:	f7fd fefe 	bl	8001254 <HAL_GetTick>
 8003458:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345c:	f7fd fefa 	bl	8001254 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e210      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800346e:	4b28      	ldr	r3, [pc, #160]	; (8003510 <HAL_RCC_OscConfig+0x4e4>)
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d108      	bne.n	8003494 <HAL_RCC_OscConfig+0x468>
 8003482:	4b21      	ldr	r3, [pc, #132]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 8003484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003488:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003492:	e074      	b.n	800357e <HAL_RCC_OscConfig+0x552>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d118      	bne.n	80034ce <HAL_RCC_OscConfig+0x4a2>
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 800349e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034a2:	4a19      	ldr	r2, [pc, #100]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034ac:	4b16      	ldr	r3, [pc, #88]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034b2:	4a15      	ldr	r2, [pc, #84]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034bc:	4b12      	ldr	r3, [pc, #72]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034c2:	4a11      	ldr	r2, [pc, #68]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034cc:	e057      	b.n	800357e <HAL_RCC_OscConfig+0x552>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d11e      	bne.n	8003514 <HAL_RCC_OscConfig+0x4e8>
 80034d6:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034dc:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034de:	f043 0304 	orr.w	r3, r3, #4
 80034e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034ec:	4a06      	ldr	r2, [pc, #24]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034f6:	4b04      	ldr	r3, [pc, #16]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034fc:	4a02      	ldr	r2, [pc, #8]	; (8003508 <HAL_RCC_OscConfig+0x4dc>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003506:	e03a      	b.n	800357e <HAL_RCC_OscConfig+0x552>
 8003508:	44020c00 	.word	0x44020c00
 800350c:	20000004 	.word	0x20000004
 8003510:	44020800 	.word	0x44020800
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b85      	cmp	r3, #133	; 0x85
 800351a:	d118      	bne.n	800354e <HAL_RCC_OscConfig+0x522>
 800351c:	4ba2      	ldr	r3, [pc, #648]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800351e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003522:	4aa1      	ldr	r2, [pc, #644]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003524:	f043 0304 	orr.w	r3, r3, #4
 8003528:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800352c:	4b9e      	ldr	r3, [pc, #632]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800352e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003532:	4a9d      	ldr	r2, [pc, #628]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003538:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800353c:	4b9a      	ldr	r3, [pc, #616]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800353e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003542:	4a99      	ldr	r2, [pc, #612]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800354c:	e017      	b.n	800357e <HAL_RCC_OscConfig+0x552>
 800354e:	4b96      	ldr	r3, [pc, #600]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003554:	4a94      	ldr	r2, [pc, #592]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800355e:	4b92      	ldr	r3, [pc, #584]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003564:	4a90      	ldr	r2, [pc, #576]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003566:	f023 0304 	bic.w	r3, r3, #4
 800356a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800356e:	4b8e      	ldr	r3, [pc, #568]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003574:	4a8c      	ldr	r2, [pc, #560]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800357a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d016      	beq.n	80035b4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fd fe65 	bl	8001254 <HAL_GetTick>
 800358a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fd fe61 	bl	8001254 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	; 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e175      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a4:	4b80      	ldr	r3, [pc, #512]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80035a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0ed      	beq.n	800358e <HAL_RCC_OscConfig+0x562>
 80035b2:	e015      	b.n	80035e0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fd fe4e 	bl	8001254 <HAL_GetTick>
 80035b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fd fe4a 	bl	8001254 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e15e      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d2:	4b75      	ldr	r3, [pc, #468]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80035d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1ed      	bne.n	80035bc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d036      	beq.n	800365a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d019      	beq.n	8003628 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035f4:	4b6c      	ldr	r3, [pc, #432]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6b      	ldr	r2, [pc, #428]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80035fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fd fe28 	bl	8001254 <HAL_GetTick>
 8003604:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003608:	f7fd fe24 	bl	8001254 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e13a      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800361a:	4b63      	ldr	r3, [pc, #396]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x5dc>
 8003626:	e018      	b.n	800365a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003628:	4b5f      	ldr	r3, [pc, #380]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a5e      	ldr	r2, [pc, #376]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800362e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003632:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fd fe0e 	bl	8001254 <HAL_GetTick>
 8003638:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800363c:	f7fd fe0a 	bl	8001254 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e120      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800364e:	4b56      	ldr	r3, [pc, #344]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8115 	beq.w	800388e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b18      	cmp	r3, #24
 8003668:	f000 80af 	beq.w	80037ca <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	2b02      	cmp	r3, #2
 8003672:	f040 8086 	bne.w	8003782 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003676:	4b4c      	ldr	r3, [pc, #304]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a4b      	ldr	r2, [pc, #300]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800367c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fd fde7 	bl	8001254 <HAL_GetTick>
 8003686:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800368a:	f7fd fde3 	bl	8001254 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0f9      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800369c:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f0      	bne.n	800368a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80036a8:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036b0:	f023 0303 	bic.w	r3, r3, #3
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036bc:	0212      	lsls	r2, r2, #8
 80036be:	430a      	orrs	r2, r1
 80036c0:	4939      	ldr	r1, [pc, #228]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	628b      	str	r3, [r1, #40]	; 0x28
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ca:	3b01      	subs	r3, #1
 80036cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	3b01      	subs	r3, #1
 80036d6:	025b      	lsls	r3, r3, #9
 80036d8:	b29b      	uxth	r3, r3
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e0:	3b01      	subs	r3, #1
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	3b01      	subs	r3, #1
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036f6:	492c      	ldr	r1, [pc, #176]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80036fc:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 80036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003700:	4a29      	ldr	r2, [pc, #164]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003702:	f023 0310 	bic.w	r3, r3, #16
 8003706:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370c:	4a26      	ldr	r2, [pc, #152]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003712:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	4a24      	ldr	r2, [pc, #144]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003718:	f043 0310 	orr.w	r3, r3, #16
 800371c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	f023 020c 	bic.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	491f      	ldr	r1, [pc, #124]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800372c:	4313      	orrs	r3, r2
 800372e:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003730:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	f023 0220 	bic.w	r2, r3, #32
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373c:	491a      	ldr	r1, [pc, #104]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 800373e:	4313      	orrs	r3, r2
 8003740:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003742:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800374e:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a15      	ldr	r2, [pc, #84]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fd fd7b 	bl	8001254 <HAL_GetTick>
 800375e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003762:	f7fd fd77 	bl	8001254 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e08d      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x736>
 8003780:	e085      	b.n	800388e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a08      	ldr	r2, [pc, #32]	; (80037a8 <HAL_RCC_OscConfig+0x77c>)
 8003788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378e:	f7fd fd61 	bl	8001254 <HAL_GetTick>
 8003792:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003794:	e00a      	b.n	80037ac <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003796:	f7fd fd5d 	bl	8001254 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d903      	bls.n	80037ac <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e073      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
 80037a8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80037ac:	4b3a      	ldr	r3, [pc, #232]	; (8003898 <HAL_RCC_OscConfig+0x86c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ee      	bne.n	8003796 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80037b8:	4b37      	ldr	r3, [pc, #220]	; (8003898 <HAL_RCC_OscConfig+0x86c>)
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	4a36      	ldr	r2, [pc, #216]	; (8003898 <HAL_RCC_OscConfig+0x86c>)
 80037be:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80037c2:	f023 0303 	bic.w	r3, r3, #3
 80037c6:	6293      	str	r3, [r2, #40]	; 0x28
 80037c8:	e061      	b.n	800388e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80037ca:	4b33      	ldr	r3, [pc, #204]	; (8003898 <HAL_RCC_OscConfig+0x86c>)
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037d0:	4b31      	ldr	r3, [pc, #196]	; (8003898 <HAL_RCC_OscConfig+0x86c>)
 80037d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d031      	beq.n	8003842 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0203 	and.w	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d12a      	bne.n	8003842 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d122      	bne.n	8003842 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003806:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d11a      	bne.n	8003842 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	0a5b      	lsrs	r3, r3, #9
 8003810:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d111      	bne.n	8003842 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d108      	bne.n	8003842 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	0e1b      	lsrs	r3, r3, #24
 8003834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d001      	beq.n	8003846 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e024      	b.n	8003890 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003846:	4b14      	ldr	r3, [pc, #80]	; (8003898 <HAL_RCC_OscConfig+0x86c>)
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	08db      	lsrs	r3, r3, #3
 800384c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003854:	429a      	cmp	r2, r3
 8003856:	d01a      	beq.n	800388e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <HAL_RCC_OscConfig+0x86c>)
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <HAL_RCC_OscConfig+0x86c>)
 800385e:	f023 0310 	bic.w	r3, r3, #16
 8003862:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fd fcf6 	bl	8001254 <HAL_GetTick>
 8003868:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800386a:	bf00      	nop
 800386c:	f7fd fcf2 	bl	8001254 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	4293      	cmp	r3, r2
 8003876:	d0f9      	beq.n	800386c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387c:	4a06      	ldr	r2, [pc, #24]	; (8003898 <HAL_RCC_OscConfig+0x86c>)
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_OscConfig+0x86c>)
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	4a04      	ldr	r2, [pc, #16]	; (8003898 <HAL_RCC_OscConfig+0x86c>)
 8003888:	f043 0310 	orr.w	r3, r3, #16
 800388c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	44020c00 	.word	0x44020c00

0800389c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e19e      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038b0:	4b83      	ldr	r3, [pc, #524]	; (8003ac0 <HAL_RCC_ClockConfig+0x224>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d910      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b80      	ldr	r3, [pc, #512]	; (8003ac0 <HAL_RCC_ClockConfig+0x224>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 020f 	bic.w	r2, r3, #15
 80038c6:	497e      	ldr	r1, [pc, #504]	; (8003ac0 <HAL_RCC_ClockConfig+0x224>)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b7c      	ldr	r3, [pc, #496]	; (8003ac0 <HAL_RCC_ClockConfig+0x224>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e186      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d012      	beq.n	8003912 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	4b74      	ldr	r3, [pc, #464]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d909      	bls.n	8003912 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80038fe:	4b71      	ldr	r3, [pc, #452]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	496d      	ldr	r1, [pc, #436]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 800390e:	4313      	orrs	r3, r2
 8003910:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d012      	beq.n	8003944 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800392c:	429a      	cmp	r2, r3
 800392e:	d909      	bls.n	8003944 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003930:	4b64      	ldr	r3, [pc, #400]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	4961      	ldr	r1, [pc, #388]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003940:	4313      	orrs	r3, r2
 8003942:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d010      	beq.n	8003972 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800395c:	429a      	cmp	r2, r3
 800395e:	d908      	bls.n	8003972 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003960:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4955      	ldr	r1, [pc, #340]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 800396e:	4313      	orrs	r3, r2
 8003970:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d010      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	4b50      	ldr	r3, [pc, #320]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	429a      	cmp	r2, r3
 800398c:	d908      	bls.n	80039a0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800398e:	4b4d      	ldr	r3, [pc, #308]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 020f 	bic.w	r2, r3, #15
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	494a      	ldr	r1, [pc, #296]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 800399c:	4313      	orrs	r3, r2
 800399e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8093 	beq.w	8003ad4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80039b6:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d121      	bne.n	8003a06 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e113      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ce:	4b3d      	ldr	r3, [pc, #244]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d115      	bne.n	8003a06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e107      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80039e6:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0fb      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f6:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0f3      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003a06:	4b2f      	ldr	r3, [pc, #188]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f023 0203 	bic.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	492c      	ldr	r1, [pc, #176]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fd fc1c 	bl	8001254 <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d112      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a28:	f7fd fc14 	bl	8001254 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e0d7      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a3e:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 0318 	and.w	r3, r3, #24
 8003a46:	2b18      	cmp	r3, #24
 8003a48:	d1ee      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x18c>
 8003a4a:	e043      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d112      	bne.n	8003a7a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a56:	f7fd fbfd 	bl	8001254 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e0c0      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a6c:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f003 0318 	and.w	r3, r3, #24
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d1ee      	bne.n	8003a56 <HAL_RCC_ClockConfig+0x1ba>
 8003a78:	e02c      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d122      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fd fbe6 	bl	8001254 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0a9      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <HAL_RCC_ClockConfig+0x228>)
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f003 0318 	and.w	r3, r3, #24
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d1ee      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x1e8>
 8003aa6:	e015      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fd fbd4 	bl	8001254 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d906      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e097      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
 8003abe:	bf00      	nop
 8003ac0:	40022000 	.word	0x40022000
 8003ac4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ac8:	4b4b      	ldr	r3, [pc, #300]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f003 0318 	and.w	r3, r3, #24
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e9      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d010      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	4b44      	ldr	r3, [pc, #272]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d208      	bcs.n	8003b02 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003af0:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f023 020f 	bic.w	r2, r3, #15
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	493e      	ldr	r1, [pc, #248]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b02:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <HAL_RCC_ClockConfig+0x360>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d210      	bcs.n	8003b32 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b10:	4b3a      	ldr	r3, [pc, #232]	; (8003bfc <HAL_RCC_ClockConfig+0x360>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 020f 	bic.w	r2, r3, #15
 8003b18:	4938      	ldr	r1, [pc, #224]	; (8003bfc <HAL_RCC_ClockConfig+0x360>)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b20:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_RCC_ClockConfig+0x360>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e05d      	b.n	8003bee <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d010      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	4b2d      	ldr	r3, [pc, #180]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d208      	bcs.n	8003b60 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003b4e:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	4927      	ldr	r1, [pc, #156]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d012      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d209      	bcs.n	8003b92 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003b7e:	4b1e      	ldr	r3, [pc, #120]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	491a      	ldr	r1, [pc, #104]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d012      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d209      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	490e      	ldr	r1, [pc, #56]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003bc4:	f000 f822 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_ClockConfig+0x35c>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	490b      	ldr	r1, [pc, #44]	; (8003c00 <HAL_RCC_ClockConfig+0x364>)
 8003bd4:	5ccb      	ldrb	r3, [r1, r3]
 8003bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bda:	4a0a      	ldr	r2, [pc, #40]	; (8003c04 <HAL_RCC_ClockConfig+0x368>)
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003bde:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <HAL_RCC_ClockConfig+0x36c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd faec 	bl	80011c0 <HAL_InitTick>
 8003be8:	4603      	mov	r3, r0
 8003bea:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003bec:	7afb      	ldrb	r3, [r7, #11]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	44020c00 	.word	0x44020c00
 8003bfc:	40022000 	.word	0x40022000
 8003c00:	08009f30 	.word	0x08009f30
 8003c04:	20000000 	.word	0x20000000
 8003c08:	20000004 	.word	0x20000004

08003c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003c12:	4b8c      	ldr	r3, [pc, #560]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f003 0318 	and.w	r3, r3, #24
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d102      	bne.n	8003c24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003c1e:	4b8a      	ldr	r3, [pc, #552]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	e107      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c24:	4b87      	ldr	r3, [pc, #540]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f003 0318 	and.w	r3, r3, #24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d112      	bne.n	8003c56 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003c30:	4b84      	ldr	r3, [pc, #528]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c3c:	4b81      	ldr	r3, [pc, #516]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	4a81      	ldr	r2, [pc, #516]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x240>)
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	e0f1      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003c50:	4b7e      	ldr	r3, [pc, #504]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x240>)
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	e0ee      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c56:	4b7b      	ldr	r3, [pc, #492]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 0318 	and.w	r3, r3, #24
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d102      	bne.n	8003c68 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c62:	4b7b      	ldr	r3, [pc, #492]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x244>)
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	e0e5      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c68:	4b76      	ldr	r3, [pc, #472]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f003 0318 	and.w	r3, r3, #24
 8003c70:	2b18      	cmp	r3, #24
 8003c72:	f040 80dd 	bne.w	8003e30 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003c76:	4b73      	ldr	r3, [pc, #460]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003c80:	4b70      	ldr	r3, [pc, #448]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003c8c:	4b6d      	ldr	r3, [pc, #436]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003c98:	4b6a      	ldr	r3, [pc, #424]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003c9c:	08db      	lsrs	r3, r3, #3
 8003c9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80b7 	beq.w	8003e2a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d003      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0xbe>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d056      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0x16a>
 8003cc8:	e077      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003cca:	4b5e      	ldr	r3, [pc, #376]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d02d      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003cd6:	4b5b      	ldr	r3, [pc, #364]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	08db      	lsrs	r3, r3, #3
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	4a5a      	ldr	r2, [pc, #360]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x240>)
 8003ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	ee07 3a90 	vmov	s15, r3
 8003cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d00:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d10:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d14:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003e54 <HAL_RCC_GetSysClockFreq+0x248>
 8003d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003d30:	e065      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	ee07 3a90 	vmov	s15, r3
 8003d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003e58 <HAL_RCC_GetSysClockFreq+0x24c>
 8003d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d44:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d54:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d58:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003e54 <HAL_RCC_GetSysClockFreq+0x248>
 8003d5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d70:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003d74:	e043      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	ee07 3a90 	vmov	s15, r3
 8003d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d80:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003e5c <HAL_RCC_GetSysClockFreq+0x250>
 8003d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d88:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d90:	ee07 3a90 	vmov	s15, r3
 8003d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d98:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d9c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003e54 <HAL_RCC_GetSysClockFreq+0x248>
 8003da0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003db8:	e021      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc4:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e60 <HAL_RCC_GetSysClockFreq+0x254>
 8003dc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ddc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003de0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003e54 <HAL_RCC_GetSysClockFreq+0x248>
 8003de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003dfc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003dfe:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e02:	0a5b      	lsrs	r3, r3, #9
 8003e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e08:	3301      	adds	r3, #1
 8003e0a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e16:	edd7 6a06 	vldr	s13, [r7, #24]
 8003e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e22:	ee17 3a90 	vmov	r3, s15
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	e004      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e001      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x240>)
 8003e32:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003e34:	69fb      	ldr	r3, [r7, #28]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3724      	adds	r7, #36	; 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	44020c00 	.word	0x44020c00
 8003e48:	003d0900 	.word	0x003d0900
 8003e4c:	03d09000 	.word	0x03d09000
 8003e50:	007a1200 	.word	0x007a1200
 8003e54:	46000000 	.word	0x46000000
 8003e58:	4c742400 	.word	0x4c742400
 8003e5c:	4af42400 	.word	0x4af42400
 8003e60:	4a742400 	.word	0x4a742400

08003e64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e68:	f7ff fed0 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003e72:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e76:	4907      	ldr	r1, [pc, #28]	; (8003e94 <HAL_RCC_GetHCLKFreq+0x30>)
 8003e78:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003e7a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e82:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <HAL_RCC_GetHCLKFreq+0x34>)
 8003e84:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003e86:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <HAL_RCC_GetHCLKFreq+0x34>)
 8003e88:	681b      	ldr	r3, [r3, #0]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	44020c00 	.word	0x44020c00
 8003e94:	08009f30 	.word	0x08009f30
 8003e98:	20000000 	.word	0x20000000

08003e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003ea0:	f7ff ffe0 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4904      	ldr	r1, [pc, #16]	; (8003ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	44020c00 	.word	0x44020c00
 8003ec4:	08009f40 	.word	0x08009f40

08003ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003ecc:	f7ff ffca 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b06      	ldr	r3, [pc, #24]	; (8003eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	4904      	ldr	r1, [pc, #16]	; (8003ef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ede:	5ccb      	ldrb	r3, [r1, r3]
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	44020c00 	.word	0x44020c00
 8003ef0:	08009f40 	.word	0x08009f40

08003ef4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003ef8:	f7ff ffb4 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	0b1b      	lsrs	r3, r3, #12
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	4904      	ldr	r1, [pc, #16]	; (8003f1c <HAL_RCC_GetPCLK3Freq+0x28>)
 8003f0a:	5ccb      	ldrb	r3, [r1, r3]
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	44020c00 	.word	0x44020c00
 8003f1c:	08009f40 	.word	0x08009f40

08003f20 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f24:	b0d8      	sub	sp, #352	; 0x160
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f32:	2300      	movs	r3, #0
 8003f34:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8003f44:	2500      	movs	r5, #0
 8003f46:	ea54 0305 	orrs.w	r3, r4, r5
 8003f4a:	d00b      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003f4c:	4bcd      	ldr	r3, [pc, #820]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f52:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8003f56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	4ac9      	ldr	r2, [pc, #804]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f002 0801 	and.w	r8, r2, #1
 8003f70:	f04f 0900 	mov.w	r9, #0
 8003f74:	ea58 0309 	orrs.w	r3, r8, r9
 8003f78:	d042      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003f7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	2b05      	cmp	r3, #5
 8003f82:	d823      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003fd5 	.word	0x08003fd5
 8003f90:	08003fa5 	.word	0x08003fa5
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fd5 	.word	0x08003fd5
 8003f9c:	08003fd5 	.word	0x08003fd5
 8003fa0:	08003fd5 	.word	0x08003fd5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fa8:	3308      	adds	r3, #8
 8003faa:	4618      	mov	r0, r3
 8003fac:	f004 feda 	bl	8008d64 <RCCEx_PLL2_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003fb6:	e00e      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fbc:	3330      	adds	r3, #48	; 0x30
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f004 ff68 	bl	8008e94 <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003fca:	e004      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003fde:	4ba9      	ldr	r3, [pc, #676]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003fe0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003fe4:	f023 0107 	bic.w	r1, r3, #7
 8003fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	4aa5      	ldr	r2, [pc, #660]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003ff6:	e003      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ffc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004000:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f002 0a02 	and.w	sl, r2, #2
 800400c:	f04f 0b00 	mov.w	fp, #0
 8004010:	ea5a 030b 	orrs.w	r3, sl, fp
 8004014:	f000 8088 	beq.w	8004128 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004018:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800401c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401e:	2b28      	cmp	r3, #40	; 0x28
 8004020:	d868      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	080040fd 	.word	0x080040fd
 800402c:	080040f5 	.word	0x080040f5
 8004030:	080040f5 	.word	0x080040f5
 8004034:	080040f5 	.word	0x080040f5
 8004038:	080040f5 	.word	0x080040f5
 800403c:	080040f5 	.word	0x080040f5
 8004040:	080040f5 	.word	0x080040f5
 8004044:	080040f5 	.word	0x080040f5
 8004048:	080040cd 	.word	0x080040cd
 800404c:	080040f5 	.word	0x080040f5
 8004050:	080040f5 	.word	0x080040f5
 8004054:	080040f5 	.word	0x080040f5
 8004058:	080040f5 	.word	0x080040f5
 800405c:	080040f5 	.word	0x080040f5
 8004060:	080040f5 	.word	0x080040f5
 8004064:	080040f5 	.word	0x080040f5
 8004068:	080040e1 	.word	0x080040e1
 800406c:	080040f5 	.word	0x080040f5
 8004070:	080040f5 	.word	0x080040f5
 8004074:	080040f5 	.word	0x080040f5
 8004078:	080040f5 	.word	0x080040f5
 800407c:	080040f5 	.word	0x080040f5
 8004080:	080040f5 	.word	0x080040f5
 8004084:	080040f5 	.word	0x080040f5
 8004088:	080040fd 	.word	0x080040fd
 800408c:	080040f5 	.word	0x080040f5
 8004090:	080040f5 	.word	0x080040f5
 8004094:	080040f5 	.word	0x080040f5
 8004098:	080040f5 	.word	0x080040f5
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	080040f5 	.word	0x080040f5
 80040a4:	080040f5 	.word	0x080040f5
 80040a8:	080040fd 	.word	0x080040fd
 80040ac:	080040f5 	.word	0x080040f5
 80040b0:	080040f5 	.word	0x080040f5
 80040b4:	080040f5 	.word	0x080040f5
 80040b8:	080040f5 	.word	0x080040f5
 80040bc:	080040f5 	.word	0x080040f5
 80040c0:	080040f5 	.word	0x080040f5
 80040c4:	080040f5 	.word	0x080040f5
 80040c8:	080040fd 	.word	0x080040fd
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040d0:	3308      	adds	r3, #8
 80040d2:	4618      	mov	r0, r3
 80040d4:	f004 fe46 	bl	8008d64 <RCCEx_PLL2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80040de:	e00e      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040e4:	3330      	adds	r3, #48	; 0x30
 80040e6:	4618      	mov	r0, r3
 80040e8:	f004 fed4 	bl	8008e94 <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80040f2:	e004      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80040fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10c      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004106:	4b5f      	ldr	r3, [pc, #380]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004108:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800410c:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004110:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004116:	4a5b      	ldr	r2, [pc, #364]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004118:	430b      	orrs	r3, r1
 800411a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800411e:	e003      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004124:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004128:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	f002 0304 	and.w	r3, r2, #4
 8004134:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800413e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8004142:	460b      	mov	r3, r1
 8004144:	4313      	orrs	r3, r2
 8004146:	d04e      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004148:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800414c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800414e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004152:	d02c      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004154:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004158:	d825      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800415a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415e:	d028      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004164:	d81f      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004166:	2bc0      	cmp	r3, #192	; 0xc0
 8004168:	d025      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800416a:	2bc0      	cmp	r3, #192	; 0xc0
 800416c:	d81b      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d00f      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004172:	2b80      	cmp	r3, #128	; 0x80
 8004174:	d817      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01f      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	d113      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800417e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004182:	3308      	adds	r3, #8
 8004184:	4618      	mov	r0, r3
 8004186:	f004 fded 	bl	8008d64 <RCCEx_PLL2_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004190:	e014      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004192:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004196:	3330      	adds	r3, #48	; 0x30
 8004198:	4618      	mov	r0, r3
 800419a:	f004 fe7b 	bl	8008e94 <RCCEx_PLL3_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80041a4:	e00a      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80041ac:	e006      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80041ae:	bf00      	nop
 80041b0:	e004      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80041b2:	bf00      	nop
 80041b4:	e002      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80041ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041bc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10c      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80041c4:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80041c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80041ca:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80041ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041d4:	4a2b      	ldr	r2, [pc, #172]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80041d6:	430b      	orrs	r3, r1
 80041d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041e2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f002 0308 	and.w	r3, r2, #8
 80041f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80041fc:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8004200:	460b      	mov	r3, r1
 8004202:	4313      	orrs	r3, r2
 8004204:	d056      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004206:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800420a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800420c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004210:	d031      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004212:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004216:	d82a      	bhi.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421c:	d02d      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800421e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004222:	d824      	bhi.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004224:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004228:	d029      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800422a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800422e:	d81e      	bhi.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004234:	d011      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423a:	d818      	bhi.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d023      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004244:	d113      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004246:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800424a:	3308      	adds	r3, #8
 800424c:	4618      	mov	r0, r3
 800424e:	f004 fd89 	bl	8008d64 <RCCEx_PLL2_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004258:	e017      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800425a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800425e:	3330      	adds	r3, #48	; 0x30
 8004260:	4618      	mov	r0, r3
 8004262:	f004 fe17 	bl	8008e94 <RCCEx_PLL3_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800426c:	e00d      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004274:	e009      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004276:	bf00      	nop
 8004278:	e007      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800427a:	bf00      	nop
 800427c:	e005      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800427e:	bf00      	nop
 8004280:	e003      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004282:	bf00      	nop
 8004284:	44020c00 	.word	0x44020c00
        break;
 8004288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10c      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004292:	4bbb      	ldr	r3, [pc, #748]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004298:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800429c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a2:	4ab7      	ldr	r2, [pc, #732]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80042a4:	430b      	orrs	r3, r1
 80042a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80042aa:	e003      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042b0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f002 0310 	and.w	r3, r2, #16
 80042c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80042ca:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80042ce:	460b      	mov	r3, r1
 80042d0:	4313      	orrs	r3, r2
 80042d2:	d053      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80042d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042da:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80042de:	d031      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80042e0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80042e4:	d82a      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ea:	d02d      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80042ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f0:	d824      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042f6:	d029      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80042f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042fc:	d81e      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004302:	d011      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004308:	d818      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d020      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004312:	d113      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004314:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004318:	3308      	adds	r3, #8
 800431a:	4618      	mov	r0, r3
 800431c:	f004 fd22 	bl	8008d64 <RCCEx_PLL2_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004326:	e014      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004328:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800432c:	3330      	adds	r3, #48	; 0x30
 800432e:	4618      	mov	r0, r3
 8004330:	f004 fdb0 	bl	8008e94 <RCCEx_PLL3_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800433a:	e00a      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004342:	e006      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004344:	bf00      	nop
 8004346:	e004      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004348:	bf00      	nop
 800434a:	e002      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800434c:	bf00      	nop
 800434e:	e000      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004352:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10c      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800435a:	4b89      	ldr	r3, [pc, #548]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800435c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004360:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004364:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800436a:	4a85      	ldr	r2, [pc, #532]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800436c:	430b      	orrs	r3, r1
 800436e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004372:	e003      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004374:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004378:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800437c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f002 0320 	and.w	r3, r2, #32
 8004388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800438c:	2300      	movs	r3, #0
 800438e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004392:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8004396:	460b      	mov	r3, r1
 8004398:	4313      	orrs	r3, r2
 800439a:	d053      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800439c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80043a6:	d031      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80043a8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80043ac:	d82a      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80043ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b2:	d02d      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b8:	d824      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80043ba:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80043be:	d029      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80043c0:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80043c4:	d81e      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80043c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ca:	d011      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d0:	d818      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d020      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80043d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043da:	d113      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043e0:	3308      	adds	r3, #8
 80043e2:	4618      	mov	r0, r3
 80043e4:	f004 fcbe 	bl	8008d64 <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80043ee:	e014      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043f4:	3330      	adds	r3, #48	; 0x30
 80043f6:	4618      	mov	r0, r3
 80043f8:	f004 fd4c 	bl	8008e94 <RCCEx_PLL3_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004402:	e00a      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800440a:	e006      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800440c:	bf00      	nop
 800440e:	e004      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004410:	bf00      	nop
 8004412:	e002      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004414:	bf00      	nop
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004422:	4b57      	ldr	r3, [pc, #348]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004428:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 800442c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	4a53      	ldr	r2, [pc, #332]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004434:	430b      	orrs	r3, r1
 8004436:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800443a:	e003      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004440:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004444:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004450:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004454:	2300      	movs	r3, #0
 8004456:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800445a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800445e:	460b      	mov	r3, r1
 8004460:	4313      	orrs	r3, r2
 8004462:	d053      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8004464:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800446e:	d031      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004470:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004474:	d82a      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447a:	d02d      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800447c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004480:	d824      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004482:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004486:	d029      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004488:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800448c:	d81e      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800448e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004492:	d011      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004494:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004498:	d818      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d020      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800449e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044a2:	d113      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044a8:	3308      	adds	r3, #8
 80044aa:	4618      	mov	r0, r3
 80044ac:	f004 fc5a 	bl	8008d64 <RCCEx_PLL2_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80044b6:	e014      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044bc:	3330      	adds	r3, #48	; 0x30
 80044be:	4618      	mov	r0, r3
 80044c0:	f004 fce8 	bl	8008e94 <RCCEx_PLL3_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80044ca:	e00a      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80044d2:	e006      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80044d4:	bf00      	nop
 80044d6:	e004      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80044d8:	bf00      	nop
 80044da:	e002      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80044dc:	bf00      	nop
 80044de:	e000      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80044e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10c      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80044ea:	4b25      	ldr	r3, [pc, #148]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80044ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80044f0:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 80044f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044fa:	4a21      	ldr	r2, [pc, #132]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80044fc:	430b      	orrs	r3, r1
 80044fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004502:	e003      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004508:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800450c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004518:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004522:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d055      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800452c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004532:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004536:	d033      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004538:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800453c:	d82c      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800453e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004542:	d02f      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004544:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004548:	d826      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800454a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800454e:	d02b      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004550:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004554:	d820      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800455a:	d013      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800455c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004560:	d81a      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004562:	2b00      	cmp	r3, #0
 8004564:	d022      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8004566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800456a:	d115      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800456c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004570:	3308      	adds	r3, #8
 8004572:	4618      	mov	r0, r3
 8004574:	f004 fbf6 	bl	8008d64 <RCCEx_PLL2_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800457e:	e016      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8004580:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004584:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004588:	3330      	adds	r3, #48	; 0x30
 800458a:	4618      	mov	r0, r3
 800458c:	f004 fc82 	bl	8008e94 <RCCEx_PLL3_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004596:	e00a      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800459e:	e006      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80045a0:	bf00      	nop
 80045a2:	e004      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80045a4:	bf00      	nop
 80045a6:	e002      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80045a8:	bf00      	nop
 80045aa:	e000      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80045ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80045b6:	4bbb      	ldr	r3, [pc, #748]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80045b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80045bc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80045c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c6:	4ab7      	ldr	r2, [pc, #732]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80045c8:	430b      	orrs	r3, r1
 80045ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80045ce:	e003      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045d4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80045d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80045e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80045e8:	2300      	movs	r3, #0
 80045ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80045ee:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80045f2:	460b      	mov	r3, r1
 80045f4:	4313      	orrs	r3, r2
 80045f6:	d053      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80045f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045fe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004602:	d031      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004604:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004608:	d82a      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800460a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800460e:	d02d      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004610:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004614:	d824      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004616:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800461a:	d029      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800461c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004620:	d81e      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004626:	d011      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8004628:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800462c:	d818      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800462e:	2b00      	cmp	r3, #0
 8004630:	d020      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8004632:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004636:	d113      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004638:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800463c:	3308      	adds	r3, #8
 800463e:	4618      	mov	r0, r3
 8004640:	f004 fb90 	bl	8008d64 <RCCEx_PLL2_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800464a:	e014      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800464c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004650:	3330      	adds	r3, #48	; 0x30
 8004652:	4618      	mov	r0, r3
 8004654:	f004 fc1e 	bl	8008e94 <RCCEx_PLL3_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800465e:	e00a      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004666:	e006      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004668:	bf00      	nop
 800466a:	e004      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800466c:	bf00      	nop
 800466e:	e002      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004670:	bf00      	nop
 8004672:	e000      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004676:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10c      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800467e:	4b89      	ldr	r3, [pc, #548]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004680:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004684:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004688:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800468c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800468e:	4a85      	ldr	r2, [pc, #532]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004690:	430b      	orrs	r3, r1
 8004692:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004696:	e003      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800469c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80046a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80046ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80046b0:	2300      	movs	r3, #0
 80046b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80046b6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80046ba:	460b      	mov	r3, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	d055      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80046c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80046cc:	d031      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80046ce:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80046d2:	d82a      	bhi.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80046d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046d8:	d02d      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80046da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046de:	d824      	bhi.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80046e0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80046e4:	d029      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80046e6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80046ea:	d81e      	bhi.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80046ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046f0:	d011      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80046f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046f6:	d818      	bhi.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80046fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004700:	d113      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004702:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004706:	3308      	adds	r3, #8
 8004708:	4618      	mov	r0, r3
 800470a:	f004 fb2b 	bl	8008d64 <RCCEx_PLL2_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004714:	e014      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004716:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800471a:	3330      	adds	r3, #48	; 0x30
 800471c:	4618      	mov	r0, r3
 800471e:	f004 fbb9 	bl	8008e94 <RCCEx_PLL3_Config>
 8004722:	4603      	mov	r3, r0
 8004724:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004728:	e00a      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004730:	e006      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004732:	bf00      	nop
 8004734:	e004      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004736:	bf00      	nop
 8004738:	e002      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800473e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004740:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10d      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8004748:	4b56      	ldr	r3, [pc, #344]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800474a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800474e:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8004752:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800475a:	4a52      	ldr	r2, [pc, #328]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800475c:	430b      	orrs	r3, r1
 800475e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004762:	e003      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004768:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800476c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004778:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800477c:	2300      	movs	r3, #0
 800477e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004782:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d044      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800478c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004794:	2b05      	cmp	r3, #5
 8004796:	d823      	bhi.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047e9 	.word	0x080047e9
 80047a4:	080047b9 	.word	0x080047b9
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047e9 	.word	0x080047e9
 80047b0:	080047e9 	.word	0x080047e9
 80047b4:	080047e9 	.word	0x080047e9
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047bc:	3308      	adds	r3, #8
 80047be:	4618      	mov	r0, r3
 80047c0:	f004 fad0 	bl	8008d64 <RCCEx_PLL2_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80047ca:	e00e      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047d0:	3330      	adds	r3, #48	; 0x30
 80047d2:	4618      	mov	r0, r3
 80047d4:	f004 fb5e 	bl	8008e94 <RCCEx_PLL3_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80047de:	e004      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80047e6:	e000      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80047e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80047f2:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80047f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80047f8:	f023 0107 	bic.w	r1, r3, #7
 80047fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004804:	4a27      	ldr	r2, [pc, #156]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004806:	430b      	orrs	r3, r1
 8004808:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800480c:	e003      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004812:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004816:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004822:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004826:	2300      	movs	r3, #0
 8004828:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800482c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004830:	460b      	mov	r3, r1
 8004832:	4313      	orrs	r3, r2
 8004834:	d04f      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8004836:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483e:	2b50      	cmp	r3, #80	; 0x50
 8004840:	d029      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004842:	2b50      	cmp	r3, #80	; 0x50
 8004844:	d823      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004846:	2b40      	cmp	r3, #64	; 0x40
 8004848:	d027      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d81f      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800484e:	2b30      	cmp	r3, #48	; 0x30
 8004850:	d025      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004852:	2b30      	cmp	r3, #48	; 0x30
 8004854:	d81b      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004856:	2b20      	cmp	r3, #32
 8004858:	d00f      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800485a:	2b20      	cmp	r3, #32
 800485c:	d817      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d022      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004862:	2b10      	cmp	r3, #16
 8004864:	d113      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004866:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800486a:	3308      	adds	r3, #8
 800486c:	4618      	mov	r0, r3
 800486e:	f004 fa79 	bl	8008d64 <RCCEx_PLL2_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004878:	e017      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800487a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800487e:	3330      	adds	r3, #48	; 0x30
 8004880:	4618      	mov	r0, r3
 8004882:	f004 fb07 	bl	8008e94 <RCCEx_PLL3_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800488c:	e00d      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004894:	e009      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004896:	bf00      	nop
 8004898:	e007      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800489a:	bf00      	nop
 800489c:	e005      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800489e:	bf00      	nop
 80048a0:	e003      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80048a2:	bf00      	nop
 80048a4:	44020c00 	.word	0x44020c00
        break;
 80048a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10d      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80048b2:	4baf      	ldr	r3, [pc, #700]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80048b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80048b8:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80048bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	4aaa      	ldr	r2, [pc, #680]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80048c6:	430b      	orrs	r3, r1
 80048c8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80048cc:	e003      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048d2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80048e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80048e6:	2300      	movs	r3, #0
 80048e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80048ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4313      	orrs	r3, r2
 80048f4:	d055      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80048f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048fe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004902:	d031      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8004904:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004908:	d82a      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800490a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800490e:	d02d      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004910:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004914:	d824      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004916:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800491a:	d029      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800491c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004920:	d81e      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004926:	d011      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8004928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800492c:	d818      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d020      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8004932:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004936:	d113      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004938:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800493c:	3308      	adds	r3, #8
 800493e:	4618      	mov	r0, r3
 8004940:	f004 fa10 	bl	8008d64 <RCCEx_PLL2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800494a:	e014      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800494c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004950:	3330      	adds	r3, #48	; 0x30
 8004952:	4618      	mov	r0, r3
 8004954:	f004 fa9e 	bl	8008e94 <RCCEx_PLL3_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800495e:	e00a      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004966:	e006      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004968:	bf00      	nop
 800496a:	e004      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800496c:	bf00      	nop
 800496e:	e002      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004970:	bf00      	nop
 8004972:	e000      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004976:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10d      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800497e:	4b7c      	ldr	r3, [pc, #496]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004984:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004988:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800498c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004990:	4a77      	ldr	r2, [pc, #476]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004992:	430b      	orrs	r3, r1
 8004994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004998:	e003      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800499e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80049ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049b2:	2300      	movs	r3, #0
 80049b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80049b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80049bc:	460b      	mov	r3, r1
 80049be:	4313      	orrs	r3, r2
 80049c0:	d03d      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80049c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049ce:	d01b      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80049d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049d4:	d814      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80049d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049da:	d017      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80049dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049e0:	d80e      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d014      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ea:	d109      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049f0:	3330      	adds	r3, #48	; 0x30
 80049f2:	4618      	mov	r0, r3
 80049f4:	f004 fa4e 	bl	8008e94 <RCCEx_PLL3_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80049fe:	e008      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a06:	e004      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004a08:	bf00      	nop
 8004a0a:	e002      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004a0c:	bf00      	nop
 8004a0e:	e000      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a12:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10d      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004a1a:	4b55      	ldr	r3, [pc, #340]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004a1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a20:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	4a50      	ldr	r2, [pc, #320]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004a34:	e003      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a3a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004a4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a54:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	d03d      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004a5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a6a:	d01b      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004a6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a70:	d814      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004a72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a76:	d017      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004a78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a7c:	d80e      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d014      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004a82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a86:	d109      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a8c:	3330      	adds	r3, #48	; 0x30
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f004 fa00 	bl	8008e94 <RCCEx_PLL3_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004a9a:	e008      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004aa2:	e004      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004aa4:	bf00      	nop
 8004aa6:	e002      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004aa8:	bf00      	nop
 8004aaa:	e000      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10d      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004ab6:	4b2e      	ldr	r3, [pc, #184]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004ab8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004abc:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac8:	4a29      	ldr	r2, [pc, #164]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004aca:	430b      	orrs	r3, r1
 8004acc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004ad0:	e003      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ad6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ada:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aea:	2300      	movs	r3, #0
 8004aec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004af0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004af4:	460b      	mov	r3, r1
 8004af6:	4313      	orrs	r3, r2
 8004af8:	d040      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004afa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b06:	d01b      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004b08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b0c:	d814      	bhi.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b12:	d017      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b18:	d80e      	bhi.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d014      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b22:	d109      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b28:	3330      	adds	r3, #48	; 0x30
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f004 f9b2 	bl	8008e94 <RCCEx_PLL3_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004b36:	e008      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b3e:	e004      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004b40:	bf00      	nop
 8004b42:	e002      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004b44:	bf00      	nop
 8004b46:	e000      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b4a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d110      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004b54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b58:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b64:	4a02      	ldr	r2, [pc, #8]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004b66:	430b      	orrs	r3, r1
 8004b68:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004b6c:	e006      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004b6e:	bf00      	nop
 8004b70:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b74:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b78:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	2100      	movs	r1, #0
 8004b86:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	d03d      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8004b9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ba4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ba8:	d01b      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004baa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bae:	d814      	bhi.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004bb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bb4:	d017      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004bb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bba:	d80e      	bhi.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d014      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8004bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc4:	d109      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bca:	3330      	adds	r3, #48	; 0x30
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f004 f961 	bl	8008e94 <RCCEx_PLL3_Config>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004bd8:	e008      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004be0:	e004      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004be2:	bf00      	nop
 8004be4:	e002      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004be6:	bf00      	nop
 8004be8:	e000      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10d      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004bf4:	4bbe      	ldr	r3, [pc, #760]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004bf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004bfa:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004bfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c06:	4aba      	ldr	r2, [pc, #744]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004c0e:	e003      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c10:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c14:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004c24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004c32:	460b      	mov	r3, r1
 8004c34:	4313      	orrs	r3, r2
 8004c36:	d035      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c44:	d015      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8004c46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c4a:	d80e      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d012      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c54:	d109      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c5a:	3330      	adds	r3, #48	; 0x30
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f004 f919 	bl	8008e94 <RCCEx_PLL3_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004c68:	e006      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c70:	e002      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004c72:	bf00      	nop
 8004c74:	e000      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c78:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10d      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004c80:	4b9b      	ldr	r3, [pc, #620]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004c82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c86:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8004c8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c92:	4a97      	ldr	r2, [pc, #604]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004c94:	430b      	orrs	r3, r1
 8004c96:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004c9a:	e003      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ca0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	2100      	movs	r1, #0
 8004cae:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004cc4:	4b8a      	ldr	r3, [pc, #552]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	4a89      	ldr	r2, [pc, #548]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004cca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cce:	61d3      	str	r3, [r2, #28]
 8004cd0:	4b87      	ldr	r3, [pc, #540]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004cd2:	69d9      	ldr	r1, [r3, #28]
 8004cd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cd8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004cdc:	4a84      	ldr	r2, [pc, #528]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ce2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004cee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004cf8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	d055      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004d0e:	d031      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004d10:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004d14:	d82a      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1a:	d02d      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d824      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d26:	d029      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2c:	d81e      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d32:	d011      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d38:	d818      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d020      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d42:	d113      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d48:	3308      	adds	r3, #8
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f004 f80a 	bl	8008d64 <RCCEx_PLL2_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004d56:	e014      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d5c:	3330      	adds	r3, #48	; 0x30
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f004 f898 	bl	8008e94 <RCCEx_PLL3_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d72:	e006      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004d74:	bf00      	nop
 8004d76:	e004      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004d78:	bf00      	nop
 8004d7a:	e002      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004d7c:	bf00      	nop
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10d      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004d8a:	4b59      	ldr	r3, [pc, #356]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004d90:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d9c:	4a54      	ldr	r2, [pc, #336]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004da4:	e003      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004daa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004dba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dc4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	d055      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004dce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004dd6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004dda:	d031      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004ddc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004de0:	d82a      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de6:	d02d      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dec:	d824      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004dee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004df2:	d029      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004df4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004df8:	d81e      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfe:	d011      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e04:	d818      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d020      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0e:	d113      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e14:	3308      	adds	r3, #8
 8004e16:	4618      	mov	r0, r3
 8004e18:	f003 ffa4 	bl	8008d64 <RCCEx_PLL2_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004e22:	e014      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e28:	3330      	adds	r3, #48	; 0x30
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f004 f832 	bl	8008e94 <RCCEx_PLL3_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004e36:	e00a      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004e3e:	e006      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004e40:	bf00      	nop
 8004e42:	e004      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004e44:	bf00      	nop
 8004e46:	e002      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004e48:	bf00      	nop
 8004e4a:	e000      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10d      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004e56:	4b26      	ldr	r3, [pc, #152]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004e5c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004e60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e68:	4a21      	ldr	r2, [pc, #132]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004e70:	e003      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e76:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	2100      	movs	r1, #0
 8004e84:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e94:	460b      	mov	r3, r1
 8004e96:	4313      	orrs	r3, r2
 8004e98:	d057      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004e9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ea6:	d033      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eac:	d82c      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004eae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eb2:	d02f      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004eb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eb8:	d826      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004eba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ebe:	d02b      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004ec0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ec4:	d820      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004ec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eca:	d013      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004ecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ed0:	d81a      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d022      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eda:	d115      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f003 ff3e 	bl	8008d64 <RCCEx_PLL2_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004eee:	e016      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004ef0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ef4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ef8:	3330      	adds	r3, #48	; 0x30
 8004efa:	4618      	mov	r0, r3
 8004efc:	f003 ffca 	bl	8008e94 <RCCEx_PLL3_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004f06:	e00a      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f0e:	e006      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004f10:	bf00      	nop
 8004f12:	e004      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004f14:	bf00      	nop
 8004f16:	e002      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004f18:	bf00      	nop
 8004f1a:	e000      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10d      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004f26:	4bbb      	ldr	r3, [pc, #748]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004f28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004f2c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004f30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f38:	4ab6      	ldr	r2, [pc, #728]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004f40:	e003      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f46:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004f4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	2100      	movs	r1, #0
 8004f54:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4313      	orrs	r3, r2
 8004f68:	d055      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004f6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f72:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004f76:	d031      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004f78:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004f7c:	d82a      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f82:	d02d      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004f84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f88:	d824      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004f8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f8e:	d029      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004f90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f94:	d81e      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f9a:	d011      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8004f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fa0:	d818      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d020      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8004fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004faa:	d113      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f003 fed6 	bl	8008d64 <RCCEx_PLL2_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004fbe:	e014      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fc4:	3330      	adds	r3, #48	; 0x30
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f003 ff64 	bl	8008e94 <RCCEx_PLL3_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004fd2:	e00a      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004fda:	e006      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004fdc:	bf00      	nop
 8004fde:	e004      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004fe0:	bf00      	nop
 8004fe2:	e002      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004fe4:	bf00      	nop
 8004fe6:	e000      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10d      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004ff2:	4b88      	ldr	r3, [pc, #544]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004ff4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004ff8:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8004ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005000:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005004:	4a83      	ldr	r2, [pc, #524]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005006:	430b      	orrs	r3, r1
 8005008:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800500c:	e003      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800500e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005012:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8005016:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501e:	2100      	movs	r1, #0
 8005020:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8005024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800502c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005030:	460b      	mov	r3, r1
 8005032:	4313      	orrs	r3, r2
 8005034:	d055      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005036:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800503a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800503e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005042:	d031      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8005044:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005048:	d82a      	bhi.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800504a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800504e:	d02d      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8005050:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005054:	d824      	bhi.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005056:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800505a:	d029      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800505c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005060:	d81e      	bhi.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005066:	d011      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800506c:	d818      	bhi.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d020      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8005072:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005076:	d113      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005078:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800507c:	3308      	adds	r3, #8
 800507e:	4618      	mov	r0, r3
 8005080:	f003 fe70 	bl	8008d64 <RCCEx_PLL2_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800508a:	e014      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800508c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005090:	3330      	adds	r3, #48	; 0x30
 8005092:	4618      	mov	r0, r3
 8005094:	f003 fefe 	bl	8008e94 <RCCEx_PLL3_Config>
 8005098:	4603      	mov	r3, r0
 800509a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800509e:	e00a      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80050a6:	e006      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80050a8:	bf00      	nop
 80050aa:	e004      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80050ac:	bf00      	nop
 80050ae:	e002      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80050b0:	bf00      	nop
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80050b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10d      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80050be:	4b55      	ldr	r3, [pc, #340]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80050c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80050c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80050c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050d0:	4a50      	ldr	r2, [pc, #320]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80050d2:	430b      	orrs	r3, r1
 80050d4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80050d8:	e003      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80050de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80050e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ea:	2100      	movs	r1, #0
 80050ec:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050f8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80050fc:	460b      	mov	r3, r1
 80050fe:	4313      	orrs	r3, r2
 8005100:	d055      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8005102:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005106:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800510a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800510e:	d031      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005114:	d82a      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511a:	d02d      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800511c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005120:	d824      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005122:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005126:	d029      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005128:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800512c:	d81e      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800512e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005132:	d011      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005138:	d818      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d020      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800513e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005142:	d113      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005144:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005148:	3308      	adds	r3, #8
 800514a:	4618      	mov	r0, r3
 800514c:	f003 fe0a 	bl	8008d64 <RCCEx_PLL2_Config>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005156:	e014      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005158:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800515c:	3330      	adds	r3, #48	; 0x30
 800515e:	4618      	mov	r0, r3
 8005160:	f003 fe98 	bl	8008e94 <RCCEx_PLL3_Config>
 8005164:	4603      	mov	r3, r0
 8005166:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800516a:	e00a      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005172:	e006      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005174:	bf00      	nop
 8005176:	e004      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005178:	bf00      	nop
 800517a:	e002      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800517c:	bf00      	nop
 800517e:	e000      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005182:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10d      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800518a:	4b22      	ldr	r3, [pc, #136]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800518c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005190:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005194:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005198:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800519c:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800519e:	430b      	orrs	r3, r1
 80051a0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80051a4:	e003      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80051aa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80051ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051be:	2300      	movs	r3, #0
 80051c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80051c8:	460b      	mov	r3, r1
 80051ca:	4313      	orrs	r3, r2
 80051cc:	d055      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80051ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051da:	d035      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80051dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051e0:	d82e      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80051e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051e6:	d031      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80051e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051ec:	d828      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80051ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f2:	d01b      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80051f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f8:	d822      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80051fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005202:	d009      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8005204:	e01c      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005206:	4b03      	ldr	r3, [pc, #12]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	4a02      	ldr	r2, [pc, #8]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800520c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005210:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005212:	e01c      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8005214:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005218:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800521c:	3308      	adds	r3, #8
 800521e:	4618      	mov	r0, r3
 8005220:	f003 fda0 	bl	8008d64 <RCCEx_PLL2_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800522a:	e010      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800522c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005230:	3330      	adds	r3, #48	; 0x30
 8005232:	4618      	mov	r0, r3
 8005234:	f003 fe2e 	bl	8008e94 <RCCEx_PLL3_Config>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800523e:	e006      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005246:	e002      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005248:	bf00      	nop
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800524c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10d      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005256:	4bc3      	ldr	r3, [pc, #780]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800525c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005260:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005264:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005268:	4abe      	ldr	r2, [pc, #760]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800526a:	430b      	orrs	r3, r1
 800526c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005270:	e003      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005272:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005276:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800527a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800528a:	2300      	movs	r3, #0
 800528c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005290:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005294:	460b      	mov	r3, r1
 8005296:	4313      	orrs	r3, r2
 8005298:	d051      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800529a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800529e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80052a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052a6:	d033      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80052a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052ac:	d82c      	bhi.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80052ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80052b2:	d02d      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80052b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80052b8:	d826      	bhi.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80052ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052be:	d019      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80052c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c4:	d820      	bhi.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80052ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052ce:	d007      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80052d0:	e01a      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d2:	4ba4      	ldr	r3, [pc, #656]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	4aa3      	ldr	r2, [pc, #652]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80052d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052dc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80052de:	e018      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052e4:	3308      	adds	r3, #8
 80052e6:	4618      	mov	r0, r3
 80052e8:	f003 fd3c 	bl	8008d64 <RCCEx_PLL2_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80052f2:	e00e      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052f8:	3330      	adds	r3, #48	; 0x30
 80052fa:	4618      	mov	r0, r3
 80052fc:	f003 fdca 	bl	8008e94 <RCCEx_PLL3_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005306:	e004      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800530e:	e000      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005312:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10d      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800531a:	4b92      	ldr	r3, [pc, #584]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800531c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005320:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8005324:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005328:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800532c:	4a8d      	ldr	r2, [pc, #564]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800532e:	430b      	orrs	r3, r1
 8005330:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005334:	e003      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005336:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800533a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800533e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800534a:	67bb      	str	r3, [r7, #120]	; 0x78
 800534c:	2300      	movs	r3, #0
 800534e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005350:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005354:	460b      	mov	r3, r1
 8005356:	4313      	orrs	r3, r2
 8005358:	d032      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800535a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800535e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005362:	2b05      	cmp	r3, #5
 8005364:	d80f      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8005366:	2b03      	cmp	r3, #3
 8005368:	d211      	bcs.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800536a:	2b01      	cmp	r3, #1
 800536c:	d911      	bls.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800536e:	2b02      	cmp	r3, #2
 8005370:	d109      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005372:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005376:	3308      	adds	r3, #8
 8005378:	4618      	mov	r0, r3
 800537a:	f003 fcf3 	bl	8008d64 <RCCEx_PLL2_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005384:	e006      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800538c:	e002      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800538e:	bf00      	nop
 8005390:	e000      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005394:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10d      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800539c:	4b71      	ldr	r3, [pc, #452]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800539e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053a2:	f023 0107 	bic.w	r1, r3, #7
 80053a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80053ae:	4a6d      	ldr	r2, [pc, #436]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80053b0:	430b      	orrs	r3, r1
 80053b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80053b6:	e003      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80053c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c8:	2100      	movs	r1, #0
 80053ca:	6739      	str	r1, [r7, #112]	; 0x70
 80053cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d0:	677b      	str	r3, [r7, #116]	; 0x74
 80053d2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80053d6:	460b      	mov	r3, r1
 80053d8:	4313      	orrs	r3, r2
 80053da:	d024      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80053dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d005      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80053f2:	e002      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80053f4:	bf00      	nop
 80053f6:	e000      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80053f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10d      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005402:	4b58      	ldr	r3, [pc, #352]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005408:	f023 0108 	bic.w	r1, r3, #8
 800540c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005414:	4a53      	ldr	r2, [pc, #332]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005416:	430b      	orrs	r3, r1
 8005418:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800541c:	e003      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005422:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005426:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005432:	66bb      	str	r3, [r7, #104]	; 0x68
 8005434:	2300      	movs	r3, #0
 8005436:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005438:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800543c:	460b      	mov	r3, r1
 800543e:	4313      	orrs	r3, r2
 8005440:	f000 80b9 	beq.w	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005444:	4b48      	ldr	r3, [pc, #288]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	4a47      	ldr	r2, [pc, #284]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800544a:	f043 0301 	orr.w	r3, r3, #1
 800544e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005450:	f7fb ff00 	bl	8001254 <HAL_GetTick>
 8005454:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005458:	e00b      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800545a:	f7fb fefb 	bl	8001254 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d903      	bls.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005470:	e005      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005472:	4b3d      	ldr	r3, [pc, #244]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0ed      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800547e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005482:	2b00      	cmp	r3, #0
 8005484:	f040 8093 	bne.w	80055ae <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005488:	4b36      	ldr	r3, [pc, #216]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800548a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800548e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005492:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005496:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d023      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800549e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054a2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80054a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d01b      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054ae:	4b2d      	ldr	r3, [pc, #180]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054bc:	4b29      	ldr	r3, [pc, #164]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054c2:	4a28      	ldr	r2, [pc, #160]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054cc:	4b25      	ldr	r3, [pc, #148]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054d2:	4a24      	ldr	r2, [pc, #144]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054dc:	4a21      	ldr	r2, [pc, #132]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80054e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d019      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f2:	f7fb feaf 	bl	8001254 <HAL_GetTick>
 80054f6:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fa:	e00d      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fc:	f7fb feaa 	bl	8001254 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005506:	1ad2      	subs	r2, r2, r3
 8005508:	f241 3388 	movw	r3, #5000	; 0x1388
 800550c:	429a      	cmp	r2, r3
 800550e:	d903      	bls.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8005516:	e006      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005518:	4b12      	ldr	r3, [pc, #72]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800551a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0ea      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8005526:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800552a:	2b00      	cmp	r3, #0
 800552c:	d13a      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800552e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005532:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800553e:	d115      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8005540:	4b08      	ldr	r3, [pc, #32]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005548:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800554c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005550:	091b      	lsrs	r3, r3, #4
 8005552:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005556:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800555a:	4a02      	ldr	r2, [pc, #8]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800555c:	430b      	orrs	r3, r1
 800555e:	61d3      	str	r3, [r2, #28]
 8005560:	e00a      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8005562:	bf00      	nop
 8005564:	44020c00 	.word	0x44020c00
 8005568:	44020800 	.word	0x44020800
 800556c:	4b9f      	ldr	r3, [pc, #636]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	4a9e      	ldr	r2, [pc, #632]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005572:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005576:	61d3      	str	r3, [r2, #28]
 8005578:	4b9c      	ldr	r3, [pc, #624]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800557a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800557e:	4a9b      	ldr	r2, [pc, #620]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005584:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005588:	4b98      	ldr	r3, [pc, #608]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800558a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800558e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005592:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559a:	4a94      	ldr	r2, [pc, #592]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800559c:	430b      	orrs	r3, r1
 800559e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80055a2:	e008      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80055a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 80055ac:	e003      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80055b2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80055c2:	663b      	str	r3, [r7, #96]	; 0x60
 80055c4:	2300      	movs	r3, #0
 80055c6:	667b      	str	r3, [r7, #100]	; 0x64
 80055c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80055cc:	460b      	mov	r3, r1
 80055ce:	4313      	orrs	r3, r2
 80055d0:	d035      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80055d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80055da:	2b30      	cmp	r3, #48	; 0x30
 80055dc:	d014      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80055de:	2b30      	cmp	r3, #48	; 0x30
 80055e0:	d80e      	bhi.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d012      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d80a      	bhi.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d010      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80055ee:	2b10      	cmp	r3, #16
 80055f0:	d106      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f2:	4b7e      	ldr	r3, [pc, #504]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	4a7d      	ldr	r2, [pc, #500]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80055f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055fc:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80055fe:	e008      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005606:	e004      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005608:	bf00      	nop
 800560a:	e002      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800560c:	bf00      	nop
 800560e:	e000      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005612:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10d      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800561a:	4b74      	ldr	r3, [pc, #464]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800561c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005620:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005624:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005628:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800562c:	4a6f      	ldr	r2, [pc, #444]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800562e:	430b      	orrs	r3, r1
 8005630:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005634:	e003      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005636:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800563a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800563e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800564a:	65bb      	str	r3, [r7, #88]	; 0x58
 800564c:	2300      	movs	r3, #0
 800564e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005650:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005654:	460b      	mov	r3, r1
 8005656:	4313      	orrs	r3, r2
 8005658:	d033      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800565a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800565e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8005666:	2b40      	cmp	r3, #64	; 0x40
 8005668:	d007      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800566a:	e010      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800566c:	4b5f      	ldr	r3, [pc, #380]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	4a5e      	ldr	r2, [pc, #376]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005676:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005678:	e00d      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800567a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800567e:	3308      	adds	r3, #8
 8005680:	4618      	mov	r0, r3
 8005682:	f003 fb6f 	bl	8008d64 <RCCEx_PLL2_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800568c:	e003      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005696:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10d      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800569e:	4b53      	ldr	r3, [pc, #332]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80056a4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80056a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056ac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80056b0:	4a4e      	ldr	r2, [pc, #312]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056b2:	430b      	orrs	r3, r1
 80056b4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80056b8:	e003      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056be:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80056c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80056ce:	653b      	str	r3, [r7, #80]	; 0x50
 80056d0:	2300      	movs	r3, #0
 80056d2:	657b      	str	r3, [r7, #84]	; 0x54
 80056d4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80056d8:	460b      	mov	r3, r1
 80056da:	4313      	orrs	r3, r2
 80056dc:	d033      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80056de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80056ea:	2b80      	cmp	r3, #128	; 0x80
 80056ec:	d007      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80056ee:	e010      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f0:	4b3e      	ldr	r3, [pc, #248]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	4a3d      	ldr	r2, [pc, #244]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056fa:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80056fc:	e00d      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005702:	3308      	adds	r3, #8
 8005704:	4618      	mov	r0, r3
 8005706:	f003 fb2d 	bl	8008d64 <RCCEx_PLL2_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005710:	e003      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800571a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10d      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8005722:	4b32      	ldr	r3, [pc, #200]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005724:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005728:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800572c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005730:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005734:	4a2d      	ldr	r2, [pc, #180]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005736:	430b      	orrs	r3, r1
 8005738:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800573c:	e003      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005742:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005746:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005752:	64bb      	str	r3, [r7, #72]	; 0x48
 8005754:	2300      	movs	r3, #0
 8005756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005758:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800575c:	460b      	mov	r3, r1
 800575e:	4313      	orrs	r3, r2
 8005760:	d04a      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005762:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800576a:	2b04      	cmp	r3, #4
 800576c:	d827      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	08005789 	.word	0x08005789
 8005778:	08005797 	.word	0x08005797
 800577c:	080057ab 	.word	0x080057ab
 8005780:	080057c7 	.word	0x080057c7
 8005784:	080057c7 	.word	0x080057c7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005788:	4b18      	ldr	r3, [pc, #96]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	4a17      	ldr	r2, [pc, #92]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800578e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005792:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005794:	e018      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005796:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800579a:	3308      	adds	r3, #8
 800579c:	4618      	mov	r0, r3
 800579e:	f003 fae1 	bl	8008d64 <RCCEx_PLL2_Config>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80057a8:	e00e      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057ae:	3330      	adds	r3, #48	; 0x30
 80057b0:	4618      	mov	r0, r3
 80057b2:	f003 fb6f 	bl	8008e94 <RCCEx_PLL3_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80057bc:	e004      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80057c4:	e000      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80057c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10f      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057d6:	f023 0107 	bic.w	r1, r3, #7
 80057da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057e2:	4a02      	ldr	r2, [pc, #8]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057e4:	430b      	orrs	r3, r1
 80057e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057ea:	e005      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80057ec:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057f4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80057f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005804:	643b      	str	r3, [r7, #64]	; 0x40
 8005806:	2300      	movs	r3, #0
 8005808:	647b      	str	r3, [r7, #68]	; 0x44
 800580a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800580e:	460b      	mov	r3, r1
 8005810:	4313      	orrs	r3, r2
 8005812:	f000 8081 	beq.w	8005918 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005816:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800581a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800581e:	2b20      	cmp	r3, #32
 8005820:	d85f      	bhi.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8005822:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	080058ad 	.word	0x080058ad
 800582c:	080058e3 	.word	0x080058e3
 8005830:	080058e3 	.word	0x080058e3
 8005834:	080058e3 	.word	0x080058e3
 8005838:	080058e3 	.word	0x080058e3
 800583c:	080058e3 	.word	0x080058e3
 8005840:	080058e3 	.word	0x080058e3
 8005844:	080058e3 	.word	0x080058e3
 8005848:	080058bb 	.word	0x080058bb
 800584c:	080058e3 	.word	0x080058e3
 8005850:	080058e3 	.word	0x080058e3
 8005854:	080058e3 	.word	0x080058e3
 8005858:	080058e3 	.word	0x080058e3
 800585c:	080058e3 	.word	0x080058e3
 8005860:	080058e3 	.word	0x080058e3
 8005864:	080058e3 	.word	0x080058e3
 8005868:	080058cf 	.word	0x080058cf
 800586c:	080058e3 	.word	0x080058e3
 8005870:	080058e3 	.word	0x080058e3
 8005874:	080058e3 	.word	0x080058e3
 8005878:	080058e3 	.word	0x080058e3
 800587c:	080058e3 	.word	0x080058e3
 8005880:	080058e3 	.word	0x080058e3
 8005884:	080058e3 	.word	0x080058e3
 8005888:	080058eb 	.word	0x080058eb
 800588c:	080058e3 	.word	0x080058e3
 8005890:	080058e3 	.word	0x080058e3
 8005894:	080058e3 	.word	0x080058e3
 8005898:	080058e3 	.word	0x080058e3
 800589c:	080058e3 	.word	0x080058e3
 80058a0:	080058e3 	.word	0x080058e3
 80058a4:	080058e3 	.word	0x080058e3
 80058a8:	080058eb 	.word	0x080058eb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ac:	4bab      	ldr	r3, [pc, #684]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	4aaa      	ldr	r2, [pc, #680]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80058b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b6:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80058b8:	e018      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058be:	3308      	adds	r3, #8
 80058c0:	4618      	mov	r0, r3
 80058c2:	f003 fa4f 	bl	8008d64 <RCCEx_PLL2_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80058cc:	e00e      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058d2:	3330      	adds	r3, #48	; 0x30
 80058d4:	4618      	mov	r0, r3
 80058d6:	f003 fadd 	bl	8008e94 <RCCEx_PLL3_Config>
 80058da:	4603      	mov	r3, r0
 80058dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80058e0:	e004      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80058e8:	e000      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80058ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10d      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80058f4:	4b99      	ldr	r3, [pc, #612]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80058f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058fa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80058fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005902:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005906:	4a95      	ldr	r2, [pc, #596]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005908:	430b      	orrs	r3, r1
 800590a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800590e:	e003      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005910:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005914:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005918:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005924:	63bb      	str	r3, [r7, #56]	; 0x38
 8005926:	2300      	movs	r3, #0
 8005928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800592a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800592e:	460b      	mov	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	d04e      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005934:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800593c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005940:	d02e      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8005942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005946:	d827      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005948:	2bc0      	cmp	r3, #192	; 0xc0
 800594a:	d02b      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800594c:	2bc0      	cmp	r3, #192	; 0xc0
 800594e:	d823      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005950:	2b80      	cmp	r3, #128	; 0x80
 8005952:	d017      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8005954:	2b80      	cmp	r3, #128	; 0x80
 8005956:	d81f      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d007      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005960:	e01a      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005962:	4b7e      	ldr	r3, [pc, #504]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005966:	4a7d      	ldr	r2, [pc, #500]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800596c:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800596e:	e01a      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005970:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005974:	3308      	adds	r3, #8
 8005976:	4618      	mov	r0, r3
 8005978:	f003 f9f4 	bl	8008d64 <RCCEx_PLL2_Config>
 800597c:	4603      	mov	r3, r0
 800597e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005982:	e010      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005984:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005988:	3330      	adds	r3, #48	; 0x30
 800598a:	4618      	mov	r0, r3
 800598c:	f003 fa82 	bl	8008e94 <RCCEx_PLL3_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005996:	e006      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800599e:	e002      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80059a0:	bf00      	nop
 80059a2:	e000      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80059a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10d      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80059ae:	4b6b      	ldr	r3, [pc, #428]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80059b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059b4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80059b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059c0:	4a66      	ldr	r2, [pc, #408]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80059c2:	430b      	orrs	r3, r1
 80059c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059c8:	e003      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059ce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80059d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80059de:	633b      	str	r3, [r7, #48]	; 0x30
 80059e0:	2300      	movs	r3, #0
 80059e2:	637b      	str	r3, [r7, #52]	; 0x34
 80059e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80059e8:	460b      	mov	r3, r1
 80059ea:	4313      	orrs	r3, r2
 80059ec:	d055      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80059ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059f2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80059f6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80059fa:	d031      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80059fc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005a00:	d82a      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a06:	d02d      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a0c:	d824      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005a0e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a12:	d029      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005a14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a18:	d81e      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1e:	d011      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a24:	d818      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d020      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8005a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a2e:	d113      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a34:	3308      	adds	r3, #8
 8005a36:	4618      	mov	r0, r3
 8005a38:	f003 f994 	bl	8008d64 <RCCEx_PLL2_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005a42:	e014      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a48:	3330      	adds	r3, #48	; 0x30
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f003 fa22 	bl	8008e94 <RCCEx_PLL3_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005a56:	e00a      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005a5e:	e006      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005a60:	bf00      	nop
 8005a62:	e004      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005a64:	bf00      	nop
 8005a66:	e002      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005a68:	bf00      	nop
 8005a6a:	e000      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10d      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005a76:	4b39      	ldr	r3, [pc, #228]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a7c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a84:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005a88:	4a34      	ldr	r2, [pc, #208]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a90:	e003      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a96:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8005a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	d058      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8005ab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005abe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005ac2:	d031      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8005ac4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005ac8:	d82a      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ace:	d02d      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8005ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ad4:	d824      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005ad6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ada:	d029      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8005adc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ae0:	d81e      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae6:	d011      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8005ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aec:	d818      	bhi.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d020      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8005af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af6:	d113      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005afc:	3308      	adds	r3, #8
 8005afe:	4618      	mov	r0, r3
 8005b00:	f003 f930 	bl	8008d64 <RCCEx_PLL2_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005b0a:	e014      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b10:	3330      	adds	r3, #48	; 0x30
 8005b12:	4618      	mov	r0, r3
 8005b14:	f003 f9be 	bl	8008e94 <RCCEx_PLL3_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005b1e:	e00a      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b26:	e006      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005b28:	bf00      	nop
 8005b2a:	e004      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005b2c:	bf00      	nop
 8005b2e:	e002      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005b30:	bf00      	nop
 8005b32:	e000      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d110      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8005b3e:	4b07      	ldr	r3, [pc, #28]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005b48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b50:	4902      	ldr	r1, [pc, #8]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005b58:	e006      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8005b5a:	bf00      	nop
 8005b5c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b60:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b64:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	2100      	movs	r1, #0
 8005b72:	6239      	str	r1, [r7, #32]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4313      	orrs	r3, r2
 8005b82:	d055      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8005b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b8c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005b90:	d031      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8005b92:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005b96:	d82a      	bhi.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005b98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b9c:	d02d      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8005b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ba2:	d824      	bhi.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005ba4:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005ba8:	d029      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8005baa:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005bae:	d81e      	bhi.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb4:	d011      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8005bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bba:	d818      	bhi.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d020      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8005bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bc4:	d113      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bca:	3308      	adds	r3, #8
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f003 f8c9 	bl	8008d64 <RCCEx_PLL2_Config>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005bd8:	e014      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bde:	3330      	adds	r3, #48	; 0x30
 8005be0:	4618      	mov	r0, r3
 8005be2:	f003 f957 	bl	8008e94 <RCCEx_PLL3_Config>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005bec:	e00a      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005bf4:	e006      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005bf6:	bf00      	nop
 8005bf8:	e004      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005bfa:	bf00      	nop
 8005bfc:	e002      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005bfe:	bf00      	nop
 8005c00:	e000      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c04:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10d      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8005c0c:	4b88      	ldr	r3, [pc, #544]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c12:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8005c16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c1e:	4984      	ldr	r1, [pc, #528]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005c26:	e003      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c28:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c2c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	2100      	movs	r1, #0
 8005c3a:	61b9      	str	r1, [r7, #24]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	61fb      	str	r3, [r7, #28]
 8005c42:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c46:	460b      	mov	r3, r1
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	d03d      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005c4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d81c      	bhi.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8005c58:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8005c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005c9b 	.word	0x08005c9b
 8005c64:	08005c71 	.word	0x08005c71
 8005c68:	08005c7f 	.word	0x08005c7f
 8005c6c:	08005c9b 	.word	0x08005c9b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c70:	4b6f      	ldr	r3, [pc, #444]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	4a6e      	ldr	r2, [pc, #440]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c7a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005c7c:	e00e      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c82:	3308      	adds	r3, #8
 8005c84:	4618      	mov	r0, r3
 8005c86:	f003 f86d 	bl	8008d64 <RCCEx_PLL2_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005c90:	e004      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005c98:	e000      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8005c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c9c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10d      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005ca4:	4b62      	ldr	r3, [pc, #392]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005ca6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005caa:	f023 0203 	bic.w	r2, r3, #3
 8005cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cb2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005cb6:	495e      	ldr	r1, [pc, #376]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005cbe:	e003      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005cc4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	6139      	str	r1, [r7, #16]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	d03a      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005ce4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ce8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf0:	d00e      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8005cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf6:	d815      	bhi.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d017      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8005cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d00:	d110      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d02:	4b4b      	ldr	r3, [pc, #300]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	4a4a      	ldr	r2, [pc, #296]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d0c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005d0e:	e00e      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d14:	3308      	adds	r3, #8
 8005d16:	4618      	mov	r0, r3
 8005d18:	f003 f824 	bl	8008d64 <RCCEx_PLL2_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005d22:	e004      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005d2a:	e000      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d2e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10d      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005d36:	4b3e      	ldr	r3, [pc, #248]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d48:	4939      	ldr	r1, [pc, #228]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8005d50:	e003      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d52:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d56:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	2100      	movs	r1, #0
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d70:	460b      	mov	r3, r1
 8005d72:	4313      	orrs	r3, r2
 8005d74:	d038      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005d7e:	2b30      	cmp	r3, #48	; 0x30
 8005d80:	d01b      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8005d82:	2b30      	cmp	r3, #48	; 0x30
 8005d84:	d815      	bhi.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8005d86:	2b10      	cmp	r3, #16
 8005d88:	d002      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	d007      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8005d8e:	e010      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d90:	4b27      	ldr	r3, [pc, #156]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d94:	4a26      	ldr	r2, [pc, #152]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d9a:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d9c:	e00e      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005da2:	3330      	adds	r3, #48	; 0x30
 8005da4:	4618      	mov	r0, r3
 8005da6:	f003 f875 	bl	8008e94 <RCCEx_PLL3_Config>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005db0:	e004      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005db8:	e000      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8005dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dbc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10d      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005dc4:	4b1a      	ldr	r3, [pc, #104]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005dc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005dca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005dce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005dd2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005dd6:	4916      	ldr	r1, [pc, #88]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005dde:	e003      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005de4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	2100      	movs	r1, #0
 8005df2:	6039      	str	r1, [r7, #0]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	607b      	str	r3, [r7, #4]
 8005dfa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4313      	orrs	r3, r2
 8005e02:	d00c      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e12:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005e16:	4906      	ldr	r1, [pc, #24]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8005e1e:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e2e:	bf00      	nop
 8005e30:	44020c00 	.word	0x44020c00

08005e34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b08b      	sub	sp, #44	; 0x2c
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005e3c:	4bad      	ldr	r3, [pc, #692]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e44:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005e46:	4bab      	ldr	r3, [pc, #684]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005e50:	4ba8      	ldr	r3, [pc, #672]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	0a1b      	lsrs	r3, r3, #8
 8005e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e5a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005e5c:	4ba5      	ldr	r3, [pc, #660]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005e66:	4ba3      	ldr	r3, [pc, #652]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	08db      	lsrs	r3, r3, #3
 8005e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8126 	beq.w	80060d6 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d053      	beq.n	8005f38 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d86f      	bhi.n	8005f76 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d003      	beq.n	8005ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d02b      	beq.n	8005efa <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005ea2:	e068      	b.n	8005f76 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ea4:	4b93      	ldr	r3, [pc, #588]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	08db      	lsrs	r3, r3, #3
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	4a92      	ldr	r2, [pc, #584]	; (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	ee07 3a90 	vmov	s15, r3
 8005ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed8:	ed97 6a04 	vldr	s12, [r7, #16]
 8005edc:	eddf 5a87 	vldr	s11, [pc, #540]	; 80060fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005ef8:	e068      	b.n	8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	ee07 3a90 	vmov	s15, r3
 8005f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f04:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f16:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80060fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f32:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005f36:	e049      	b.n	8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f42:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006104 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	ee07 3a90 	vmov	s15, r3
 8005f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f54:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f58:	eddf 5a68 	vldr	s11, [pc, #416]	; 80060fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005f5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f70:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005f74:	e02a      	b.n	8005fcc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f76:	4b5f      	ldr	r3, [pc, #380]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	08db      	lsrs	r3, r3, #3
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	4a5d      	ldr	r2, [pc, #372]	; (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005f82:	fa22 f303 	lsr.w	r3, r2, r3
 8005f86:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	ee07 3a90 	vmov	s15, r3
 8005f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005faa:	ed97 6a04 	vldr	s12, [r7, #16]
 8005fae:	eddf 5a53 	vldr	s11, [pc, #332]	; 80060fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005fca:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fcc:	4b49      	ldr	r3, [pc, #292]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fd8:	d121      	bne.n	800601e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005fda:	4b46      	ldr	r3, [pc, #280]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d017      	beq.n	8006016 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005fe6:	4b43      	ldr	r3, [pc, #268]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	0a5b      	lsrs	r3, r3, #9
 8005fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005ff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ffc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006000:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800600c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	e006      	b.n	8006024 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	e002      	b.n	8006024 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006024:	4b33      	ldr	r3, [pc, #204]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006030:	d121      	bne.n	8006076 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006032:	4b30      	ldr	r3, [pc, #192]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d017      	beq.n	800606e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800603e:	4b2d      	ldr	r3, [pc, #180]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006042:	0c1b      	lsrs	r3, r3, #16
 8006044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006050:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006054:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006058:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800605c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006064:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	605a      	str	r2, [r3, #4]
 800606c:	e006      	b.n	800607c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	605a      	str	r2, [r3, #4]
 8006074:	e002      	b.n	800607c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800607c:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006088:	d121      	bne.n	80060ce <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800608a:	4b1a      	ldr	r3, [pc, #104]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d017      	beq.n	80060c6 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006096:	4b17      	ldr	r3, [pc, #92]	; (80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609a:	0e1b      	lsrs	r3, r3, #24
 800609c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80060a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060ac:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80060b0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80060b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060bc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80060c4:	e010      	b.n	80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	609a      	str	r2, [r3, #8]
}
 80060cc:	e00c      	b.n	80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	609a      	str	r2, [r3, #8]
}
 80060d4:	e008      	b.n	80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	609a      	str	r2, [r3, #8]
}
 80060e8:	bf00      	nop
 80060ea:	372c      	adds	r7, #44	; 0x2c
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	44020c00 	.word	0x44020c00
 80060f8:	03d09000 	.word	0x03d09000
 80060fc:	46000000 	.word	0x46000000
 8006100:	4a742400 	.word	0x4a742400
 8006104:	4af42400 	.word	0x4af42400

08006108 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006108:	b480      	push	{r7}
 800610a:	b08b      	sub	sp, #44	; 0x2c
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006110:	4bad      	ldr	r3, [pc, #692]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006118:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800611a:	4bab      	ldr	r3, [pc, #684]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8006124:	4ba8      	ldr	r3, [pc, #672]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	0a1b      	lsrs	r3, r3, #8
 800612a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800612e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006130:	4ba5      	ldr	r3, [pc, #660]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800613a:	4ba3      	ldr	r3, [pc, #652]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	08db      	lsrs	r3, r3, #3
 8006140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	fb02 f303 	mul.w	r3, r2, r3
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006152:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8126 	beq.w	80063aa <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	2b03      	cmp	r3, #3
 8006162:	d053      	beq.n	800620c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b03      	cmp	r3, #3
 8006168:	d86f      	bhi.n	800624a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d003      	beq.n	8006178 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	2b02      	cmp	r3, #2
 8006174:	d02b      	beq.n	80061ce <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8006176:	e068      	b.n	800624a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006178:	4b93      	ldr	r3, [pc, #588]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	08db      	lsrs	r3, r3, #3
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	4a92      	ldr	r2, [pc, #584]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006184:	fa22 f303 	lsr.w	r3, r2, r3
 8006188:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	ee07 3a90 	vmov	s15, r3
 80061a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ac:	ed97 6a04 	vldr	s12, [r7, #16]
 80061b0:	eddf 5a87 	vldr	s11, [pc, #540]	; 80063d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80061b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80061cc:	e068      	b.n	80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	ee07 3a90 	vmov	s15, r3
 80061d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80063d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80061dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ea:	ed97 6a04 	vldr	s12, [r7, #16]
 80061ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80063d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80061f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006206:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800620a:	e049      	b.n	80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006216:	eddf 6a70 	vldr	s13, [pc, #448]	; 80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800621a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	ee07 3a90 	vmov	s15, r3
 8006224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006228:	ed97 6a04 	vldr	s12, [r7, #16]
 800622c:	eddf 5a68 	vldr	s11, [pc, #416]	; 80063d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800623c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006244:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006248:	e02a      	b.n	80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800624a:	4b5f      	ldr	r3, [pc, #380]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	08db      	lsrs	r3, r3, #3
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	4a5d      	ldr	r2, [pc, #372]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006256:	fa22 f303 	lsr.w	r3, r2, r3
 800625a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	ee07 3a90 	vmov	s15, r3
 800626c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006282:	eddf 5a53 	vldr	s11, [pc, #332]	; 80063d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800629e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062a0:	4b49      	ldr	r3, [pc, #292]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ac:	d121      	bne.n	80062f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80062ae:	4b46      	ldr	r3, [pc, #280]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d017      	beq.n	80062ea <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80062ba:	4b43      	ldr	r3, [pc, #268]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062be:	0a5b      	lsrs	r3, r3, #9
 80062c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80062cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062d0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80062d4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80062d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062e0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	e006      	b.n	80062f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	e002      	b.n	80062f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062f8:	4b33      	ldr	r3, [pc, #204]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006304:	d121      	bne.n	800634a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006306:	4b30      	ldr	r3, [pc, #192]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d017      	beq.n	8006342 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006312:	4b2d      	ldr	r3, [pc, #180]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006316:	0c1b      	lsrs	r3, r3, #16
 8006318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800631c:	ee07 3a90 	vmov	s15, r3
 8006320:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006328:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800632c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006338:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	605a      	str	r2, [r3, #4]
 8006340:	e006      	b.n	8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	605a      	str	r2, [r3, #4]
 8006348:	e002      	b.n	8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006350:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800635c:	d121      	bne.n	80063a2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800635e:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d017      	beq.n	800639a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800636a:	4b17      	ldr	r3, [pc, #92]	; (80063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	0e1b      	lsrs	r3, r3, #24
 8006370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800637c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006380:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006384:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800638c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006390:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006398:	e010      	b.n	80063bc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	609a      	str	r2, [r3, #8]
}
 80063a0:	e00c      	b.n	80063bc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	609a      	str	r2, [r3, #8]
}
 80063a8:	e008      	b.n	80063bc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	bf00      	nop
 80063be:	372c      	adds	r7, #44	; 0x2c
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	44020c00 	.word	0x44020c00
 80063cc:	03d09000 	.word	0x03d09000
 80063d0:	46000000 	.word	0x46000000
 80063d4:	4a742400 	.word	0x4a742400
 80063d8:	4af42400 	.word	0x4af42400

080063dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80063dc:	b480      	push	{r7}
 80063de:	b08b      	sub	sp, #44	; 0x2c
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80063e4:	4bad      	ldr	r3, [pc, #692]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80063e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ec:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80063ee:	4bab      	ldr	r3, [pc, #684]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80063f8:	4ba8      	ldr	r3, [pc, #672]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80063fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fc:	0a1b      	lsrs	r3, r3, #8
 80063fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006402:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006404:	4ba5      	ldr	r3, [pc, #660]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800640e:	4ba3      	ldr	r3, [pc, #652]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006412:	08db      	lsrs	r3, r3, #3
 8006414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	fb02 f303 	mul.w	r3, r2, r3
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 8126 	beq.w	800667e <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	2b03      	cmp	r3, #3
 8006436:	d053      	beq.n	80064e0 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2b03      	cmp	r3, #3
 800643c:	d86f      	bhi.n	800651e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d003      	beq.n	800644c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d02b      	beq.n	80064a2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800644a:	e068      	b.n	800651e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800644c:	4b93      	ldr	r3, [pc, #588]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	08db      	lsrs	r3, r3, #3
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	4a92      	ldr	r2, [pc, #584]	; (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
 800645c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	ee07 3a90 	vmov	s15, r3
 8006464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	ee07 3a90 	vmov	s15, r3
 800647c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006480:	ed97 6a04 	vldr	s12, [r7, #16]
 8006484:	eddf 5a87 	vldr	s11, [pc, #540]	; 80066a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80064a0:	e068      	b.n	8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	ee07 3a90 	vmov	s15, r3
 80064a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ac:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80066a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80064b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	ee07 3a90 	vmov	s15, r3
 80064ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064be:	ed97 6a04 	vldr	s12, [r7, #16]
 80064c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80066a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80064c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80064de:	e049      	b.n	8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ea:	eddf 6a70 	vldr	s13, [pc, #448]	; 80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80064ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	ee07 3a90 	vmov	s15, r3
 80064f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fc:	ed97 6a04 	vldr	s12, [r7, #16]
 8006500:	eddf 5a68 	vldr	s11, [pc, #416]	; 80066a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800650c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006518:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800651c:	e02a      	b.n	8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800651e:	4b5f      	ldr	r3, [pc, #380]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	08db      	lsrs	r3, r3, #3
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	4a5d      	ldr	r2, [pc, #372]	; (80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800652a:	fa22 f303 	lsr.w	r3, r2, r3
 800652e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	ee07 3a90 	vmov	s15, r3
 8006540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006552:	ed97 6a04 	vldr	s12, [r7, #16]
 8006556:	eddf 5a53 	vldr	s11, [pc, #332]	; 80066a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800655a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800655e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800656a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800656e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006572:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006574:	4b49      	ldr	r3, [pc, #292]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800657c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006580:	d121      	bne.n	80065c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006582:	4b46      	ldr	r3, [pc, #280]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d017      	beq.n	80065be <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800658e:	4b43      	ldr	r3, [pc, #268]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	0a5b      	lsrs	r3, r3, #9
 8006594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006598:	ee07 3a90 	vmov	s15, r3
 800659c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80065a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065a4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80065a8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80065ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065b4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	e006      	b.n	80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	e002      	b.n	80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065cc:	4b33      	ldr	r3, [pc, #204]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065d8:	d121      	bne.n	800661e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80065da:	4b30      	ldr	r3, [pc, #192]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d017      	beq.n	8006616 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80065e6:	4b2d      	ldr	r3, [pc, #180]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ea:	0c1b      	lsrs	r3, r3, #16
 80065ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f0:	ee07 3a90 	vmov	s15, r3
 80065f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80065f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065fc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006600:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800660c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	605a      	str	r2, [r3, #4]
 8006614:	e006      	b.n	8006624 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	605a      	str	r2, [r3, #4]
 800661c:	e002      	b.n	8006624 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006624:	4b1d      	ldr	r3, [pc, #116]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800662c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006630:	d121      	bne.n	8006676 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006632:	4b1a      	ldr	r3, [pc, #104]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d017      	beq.n	800666e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800663e:	4b17      	ldr	r3, [pc, #92]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006642:	0e1b      	lsrs	r3, r3, #24
 8006644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006648:	ee07 3a90 	vmov	s15, r3
 800664c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006654:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006658:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800665c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006664:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800666c:	e010      	b.n	8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	609a      	str	r2, [r3, #8]
}
 8006674:	e00c      	b.n	8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	609a      	str	r2, [r3, #8]
}
 800667c:	e008      	b.n	8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	609a      	str	r2, [r3, #8]
}
 8006690:	bf00      	nop
 8006692:	372c      	adds	r7, #44	; 0x2c
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	44020c00 	.word	0x44020c00
 80066a0:	03d09000 	.word	0x03d09000
 80066a4:	46000000 	.word	0x46000000
 80066a8:	4a742400 	.word	0x4a742400
 80066ac:	4af42400 	.word	0x4af42400

080066b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80066b0:	b590      	push	{r4, r7, lr}
 80066b2:	b08f      	sub	sp, #60	; 0x3c
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80066ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066be:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 80066c2:	4321      	orrs	r1, r4
 80066c4:	d150      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80066c6:	4b26      	ldr	r3, [pc, #152]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80066c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066d0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80066d2:	4b23      	ldr	r3, [pc, #140]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80066d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d108      	bne.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80066e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e6:	d104      	bne.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80066e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ec:	637b      	str	r3, [r7, #52]	; 0x34
 80066ee:	f002 bb2a 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80066f2:	4b1b      	ldr	r3, [pc, #108]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80066f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006700:	d108      	bne.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006708:	d104      	bne.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800670a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
 8006710:	f002 bb19 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006714:	4b12      	ldr	r3, [pc, #72]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006720:	d119      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006728:	d115      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800672a:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8006732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006736:	d30a      	bcc.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006738:	4b09      	ldr	r3, [pc, #36]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	0a1b      	lsrs	r3, r3, #8
 800673e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006742:	4a08      	ldr	r2, [pc, #32]	; (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006744:	fbb2 f3f3 	udiv	r3, r2, r3
 8006748:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800674a:	f002 bafc 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006752:	f002 baf8 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
 800675a:	f002 baf4 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800675e:	bf00      	nop
 8006760:	44020c00 	.word	0x44020c00
 8006764:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006768:	e9d7 0100 	ldrd	r0, r1, [r7]
 800676c:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8006770:	ea50 0104 	orrs.w	r1, r0, r4
 8006774:	f001 8275 	beq.w	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8006778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800677c:	2801      	cmp	r0, #1
 800677e:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8006782:	f082 82dd 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800678a:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800678e:	ea50 0104 	orrs.w	r1, r0, r4
 8006792:	f001 816c 	beq.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8006796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800679a:	2801      	cmp	r0, #1
 800679c:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 80067a0:	f082 82ce 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80067a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067a8:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 80067ac:	ea50 0104 	orrs.w	r1, r0, r4
 80067b0:	f001 8602 	beq.w	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80067b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067b8:	2801      	cmp	r0, #1
 80067ba:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 80067be:	f082 82bf 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80067c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067c6:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 80067ca:	ea50 0104 	orrs.w	r1, r0, r4
 80067ce:	f001 854c 	beq.w	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80067d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067d6:	2801      	cmp	r0, #1
 80067d8:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 80067dc:	f082 82b0 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80067e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067e4:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 80067e8:	ea50 0104 	orrs.w	r1, r0, r4
 80067ec:	f001 849e 	beq.w	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80067f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067f4:	2801      	cmp	r0, #1
 80067f6:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 80067fa:	f082 82a1 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80067fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006802:	f1a1 0420 	sub.w	r4, r1, #32
 8006806:	ea50 0104 	orrs.w	r1, r0, r4
 800680a:	f001 83e8 	beq.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800680e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006812:	2801      	cmp	r0, #1
 8006814:	f171 0120 	sbcs.w	r1, r1, #32
 8006818:	f082 8292 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800681c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006820:	f1a1 0410 	sub.w	r4, r1, #16
 8006824:	ea50 0104 	orrs.w	r1, r0, r4
 8006828:	f002 8256 	beq.w	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800682c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006830:	2801      	cmp	r0, #1
 8006832:	f171 0110 	sbcs.w	r1, r1, #16
 8006836:	f082 8283 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800683a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800683e:	f1a1 0408 	sub.w	r4, r1, #8
 8006842:	ea50 0104 	orrs.w	r1, r0, r4
 8006846:	f002 81cc 	beq.w	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800684a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800684e:	2801      	cmp	r0, #1
 8006850:	f171 0108 	sbcs.w	r1, r1, #8
 8006854:	f082 8274 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800685c:	1f0c      	subs	r4, r1, #4
 800685e:	ea50 0104 	orrs.w	r1, r0, r4
 8006862:	f001 8648 	beq.w	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8006866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800686a:	2801      	cmp	r0, #1
 800686c:	f171 0104 	sbcs.w	r1, r1, #4
 8006870:	f082 8266 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006874:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006878:	1e8c      	subs	r4, r1, #2
 800687a:	ea50 0104 	orrs.w	r1, r0, r4
 800687e:	f002 8143 	beq.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8006882:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006886:	2801      	cmp	r0, #1
 8006888:	f171 0102 	sbcs.w	r1, r1, #2
 800688c:	f082 8258 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006894:	1e4c      	subs	r4, r1, #1
 8006896:	ea50 0104 	orrs.w	r1, r0, r4
 800689a:	f002 80ce 	beq.w	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800689e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068a2:	2801      	cmp	r0, #1
 80068a4:	f171 0101 	sbcs.w	r1, r1, #1
 80068a8:	f082 824a 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068b0:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 80068b4:	4321      	orrs	r1, r4
 80068b6:	f002 8059 	beq.w	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80068ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068be:	4cd9      	ldr	r4, [pc, #868]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80068c0:	42a0      	cmp	r0, r4
 80068c2:	f171 0100 	sbcs.w	r1, r1, #0
 80068c6:	f082 823b 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068ce:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 80068d2:	4321      	orrs	r1, r4
 80068d4:	f001 87d9 	beq.w	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80068d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068dc:	4cd2      	ldr	r4, [pc, #840]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80068de:	42a0      	cmp	r0, r4
 80068e0:	f171 0100 	sbcs.w	r1, r1, #0
 80068e4:	f082 822c 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068ec:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 80068f0:	4321      	orrs	r1, r4
 80068f2:	f001 8751 	beq.w	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80068f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068fa:	4ccc      	ldr	r4, [pc, #816]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80068fc:	42a0      	cmp	r0, r4
 80068fe:	f171 0100 	sbcs.w	r1, r1, #0
 8006902:	f082 821d 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800690a:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 800690e:	4321      	orrs	r1, r4
 8006910:	f001 869a 	beq.w	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8006914:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006918:	4cc5      	ldr	r4, [pc, #788]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800691a:	42a0      	cmp	r0, r4
 800691c:	f171 0100 	sbcs.w	r1, r1, #0
 8006920:	f082 820e 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006924:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006928:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800692c:	4321      	orrs	r1, r4
 800692e:	f001 8612 	beq.w	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8006932:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006936:	4cbf      	ldr	r4, [pc, #764]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8006938:	42a0      	cmp	r0, r4
 800693a:	f171 0100 	sbcs.w	r1, r1, #0
 800693e:	f082 81ff 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006942:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006946:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800694a:	4321      	orrs	r1, r4
 800694c:	f002 817e 	beq.w	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8006950:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006954:	4cb8      	ldr	r4, [pc, #736]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006956:	42a0      	cmp	r0, r4
 8006958:	f171 0100 	sbcs.w	r1, r1, #0
 800695c:	f082 81f0 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006964:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8006968:	4321      	orrs	r1, r4
 800696a:	f000 829e 	beq.w	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800696e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006972:	4cb2      	ldr	r4, [pc, #712]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006974:	42a0      	cmp	r0, r4
 8006976:	f171 0100 	sbcs.w	r1, r1, #0
 800697a:	f082 81e1 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800697e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006982:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8006986:	4321      	orrs	r1, r4
 8006988:	f000 826d 	beq.w	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800698c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006990:	4cab      	ldr	r4, [pc, #684]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006992:	42a0      	cmp	r0, r4
 8006994:	f171 0100 	sbcs.w	r1, r1, #0
 8006998:	f082 81d2 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800699c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069a0:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 80069a4:	4321      	orrs	r1, r4
 80069a6:	f001 800d 	beq.w	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80069aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ae:	4ca5      	ldr	r4, [pc, #660]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80069b0:	42a0      	cmp	r0, r4
 80069b2:	f171 0100 	sbcs.w	r1, r1, #0
 80069b6:	f082 81c3 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069be:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 80069c2:	4321      	orrs	r1, r4
 80069c4:	f000 81d0 	beq.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80069c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069cc:	4c9e      	ldr	r4, [pc, #632]	; (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80069ce:	42a0      	cmp	r0, r4
 80069d0:	f171 0100 	sbcs.w	r1, r1, #0
 80069d4:	f082 81b4 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069dc:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 80069e0:	4321      	orrs	r1, r4
 80069e2:	f000 8142 	beq.w	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80069e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ea:	4c98      	ldr	r4, [pc, #608]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80069ec:	42a0      	cmp	r0, r4
 80069ee:	f171 0100 	sbcs.w	r1, r1, #0
 80069f2:	f082 81a5 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069fa:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 80069fe:	4321      	orrs	r1, r4
 8006a00:	f001 824e 	beq.w	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8006a04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a08:	4c91      	ldr	r4, [pc, #580]	; (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006a0a:	42a0      	cmp	r0, r4
 8006a0c:	f171 0100 	sbcs.w	r1, r1, #0
 8006a10:	f082 8196 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a18:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8006a1c:	4321      	orrs	r1, r4
 8006a1e:	f001 8197 	beq.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8006a22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a26:	4c8b      	ldr	r4, [pc, #556]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006a28:	42a0      	cmp	r0, r4
 8006a2a:	f171 0100 	sbcs.w	r1, r1, #0
 8006a2e:	f082 8187 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a36:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8006a3a:	4321      	orrs	r1, r4
 8006a3c:	f001 8154 	beq.w	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8006a40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a44:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8006a48:	f171 0100 	sbcs.w	r1, r1, #0
 8006a4c:	f082 8178 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a54:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8006a58:	4321      	orrs	r1, r4
 8006a5a:	f001 80b7 	beq.w	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006a5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a62:	f248 0401 	movw	r4, #32769	; 0x8001
 8006a66:	42a0      	cmp	r0, r4
 8006a68:	f171 0100 	sbcs.w	r1, r1, #0
 8006a6c:	f082 8168 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a74:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8006a78:	4321      	orrs	r1, r4
 8006a7a:	f001 8064 	beq.w	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8006a7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a82:	f244 0401 	movw	r4, #16385	; 0x4001
 8006a86:	42a0      	cmp	r0, r4
 8006a88:	f171 0100 	sbcs.w	r1, r1, #0
 8006a8c:	f082 8158 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a94:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8006a98:	4321      	orrs	r1, r4
 8006a9a:	f001 8011 	beq.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8006a9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aa2:	f242 0401 	movw	r4, #8193	; 0x2001
 8006aa6:	42a0      	cmp	r0, r4
 8006aa8:	f171 0100 	sbcs.w	r1, r1, #0
 8006aac:	f082 8148 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ab4:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8006ab8:	4321      	orrs	r1, r4
 8006aba:	f000 871e 	beq.w	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8006abe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ac2:	f241 0401 	movw	r4, #4097	; 0x1001
 8006ac6:	42a0      	cmp	r0, r4
 8006ac8:	f171 0100 	sbcs.w	r1, r1, #0
 8006acc:	f082 8138 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ad4:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8006ad8:	4321      	orrs	r1, r4
 8006ada:	f000 86a8 	beq.w	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8006ade:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ae2:	f640 0401 	movw	r4, #2049	; 0x801
 8006ae6:	42a0      	cmp	r0, r4
 8006ae8:	f171 0100 	sbcs.w	r1, r1, #0
 8006aec:	f082 8128 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006af4:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8006af8:	4321      	orrs	r1, r4
 8006afa:	f000 8632 	beq.w	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8006afe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b02:	f240 4401 	movw	r4, #1025	; 0x401
 8006b06:	42a0      	cmp	r0, r4
 8006b08:	f171 0100 	sbcs.w	r1, r1, #0
 8006b0c:	f082 8118 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b14:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8006b18:	4321      	orrs	r1, r4
 8006b1a:	f000 85b0 	beq.w	800767e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8006b1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b22:	f240 2401 	movw	r4, #513	; 0x201
 8006b26:	42a0      	cmp	r0, r4
 8006b28:	f171 0100 	sbcs.w	r1, r1, #0
 8006b2c:	f082 8108 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b34:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8006b38:	4321      	orrs	r1, r4
 8006b3a:	f000 8535 	beq.w	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006b3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b42:	f240 1401 	movw	r4, #257	; 0x101
 8006b46:	42a0      	cmp	r0, r4
 8006b48:	f171 0100 	sbcs.w	r1, r1, #0
 8006b4c:	f082 80f8 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b54:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8006b58:	4321      	orrs	r1, r4
 8006b5a:	f000 84ba 	beq.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8006b5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b62:	2881      	cmp	r0, #129	; 0x81
 8006b64:	f171 0100 	sbcs.w	r1, r1, #0
 8006b68:	f082 80ea 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b70:	2821      	cmp	r0, #33	; 0x21
 8006b72:	f171 0100 	sbcs.w	r1, r1, #0
 8006b76:	d26f      	bcs.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006b78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b7c:	4301      	orrs	r1, r0
 8006b7e:	f002 80df 	beq.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b86:	1e42      	subs	r2, r0, #1
 8006b88:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006b8c:	2a20      	cmp	r2, #32
 8006b8e:	f173 0100 	sbcs.w	r1, r3, #0
 8006b92:	f082 80d5 	bcs.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b96:	2a1f      	cmp	r2, #31
 8006b98:	f202 80d2 	bhi.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b9c:	a101      	add	r1, pc, #4	; (adr r1, 8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8006b9e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006f05 	.word	0x08006f05
 8006ba8:	08006fd1 	.word	0x08006fd1
 8006bac:	08008d41 	.word	0x08008d41
 8006bb0:	08007091 	.word	0x08007091
 8006bb4:	08008d41 	.word	0x08008d41
 8006bb8:	08008d41 	.word	0x08008d41
 8006bbc:	08008d41 	.word	0x08008d41
 8006bc0:	08007161 	.word	0x08007161
 8006bc4:	08008d41 	.word	0x08008d41
 8006bc8:	08008d41 	.word	0x08008d41
 8006bcc:	08008d41 	.word	0x08008d41
 8006bd0:	08008d41 	.word	0x08008d41
 8006bd4:	08008d41 	.word	0x08008d41
 8006bd8:	08008d41 	.word	0x08008d41
 8006bdc:	08008d41 	.word	0x08008d41
 8006be0:	08007243 	.word	0x08007243
 8006be4:	08008d41 	.word	0x08008d41
 8006be8:	08008d41 	.word	0x08008d41
 8006bec:	08008d41 	.word	0x08008d41
 8006bf0:	08008d41 	.word	0x08008d41
 8006bf4:	08008d41 	.word	0x08008d41
 8006bf8:	08008d41 	.word	0x08008d41
 8006bfc:	08008d41 	.word	0x08008d41
 8006c00:	08008d41 	.word	0x08008d41
 8006c04:	08008d41 	.word	0x08008d41
 8006c08:	08008d41 	.word	0x08008d41
 8006c0c:	08008d41 	.word	0x08008d41
 8006c10:	08008d41 	.word	0x08008d41
 8006c14:	08008d41 	.word	0x08008d41
 8006c18:	08008d41 	.word	0x08008d41
 8006c1c:	08008d41 	.word	0x08008d41
 8006c20:	08007319 	.word	0x08007319
 8006c24:	80000001 	.word	0x80000001
 8006c28:	40000001 	.word	0x40000001
 8006c2c:	20000001 	.word	0x20000001
 8006c30:	10000001 	.word	0x10000001
 8006c34:	08000001 	.word	0x08000001
 8006c38:	04000001 	.word	0x04000001
 8006c3c:	00800001 	.word	0x00800001
 8006c40:	00400001 	.word	0x00400001
 8006c44:	00200001 	.word	0x00200001
 8006c48:	00100001 	.word	0x00100001
 8006c4c:	00080001 	.word	0x00080001
 8006c50:	00040001 	.word	0x00040001
 8006c54:	00020001 	.word	0x00020001
 8006c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c5c:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006c60:	430b      	orrs	r3, r1
 8006c62:	f000 83c4 	beq.w	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006c66:	f002 b86b 	b.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006c6a:	4ba1      	ldr	r3, [pc, #644]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c70:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006c74:	633b      	str	r3, [r7, #48]	; 0x30
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c7c:	d036      	beq.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c84:	d86b      	bhi.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c8c:	d02b      	beq.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c94:	d863      	bhi.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c9c:	d01b      	beq.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca4:	d85b      	bhi.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d004      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb2:	d008      	beq.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8006cb4:	e053      	b.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cb6:	f107 0320 	add.w	r3, r7, #32
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff f8ba 	bl	8005e34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006cc4:	e04e      	b.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cc6:	f107 0314 	add.w	r3, r7, #20
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7ff fa1c 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006cd4:	e046      	b.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cd6:	f107 0308 	add.w	r3, r7, #8
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff fb7e 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ce4:	e03e      	b.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006ce6:	4b83      	ldr	r3, [pc, #524]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006ce8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006cea:	e03b      	b.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cec:	4b80      	ldr	r3, [pc, #512]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cf2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cf8:	4b7d      	ldr	r3, [pc, #500]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d10c      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d109      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d0a:	4b79      	ldr	r3, [pc, #484]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	08db      	lsrs	r3, r3, #3
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	4a78      	ldr	r2, [pc, #480]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006d16:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d1c:	e01e      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d1e:	4b74      	ldr	r3, [pc, #464]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d2a:	d106      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d32:	d102      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006d34:	4b71      	ldr	r3, [pc, #452]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006d36:	637b      	str	r3, [r7, #52]	; 0x34
 8006d38:	e010      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d3a:	4b6d      	ldr	r3, [pc, #436]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d46:	d106      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8006d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d4e:	d102      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006d50:	4b6b      	ldr	r3, [pc, #428]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006d52:	637b      	str	r3, [r7, #52]	; 0x34
 8006d54:	e002      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006d5a:	e003      	b.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8006d5c:	e002      	b.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d62:	bf00      	nop
          }
        }
        break;
 8006d64:	f001 bfef 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006d68:	4b61      	ldr	r3, [pc, #388]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d6e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006d72:	633b      	str	r3, [r7, #48]	; 0x30
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d7a:	d036      	beq.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d82:	d86b      	bhi.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006d8a:	d02b      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006d92:	d863      	bhi.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d9a:	d01b      	beq.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da2:	d85b      	bhi.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d004      	beq.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006db0:	d008      	beq.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8006db2:	e053      	b.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006db4:	f107 0320 	add.w	r3, r7, #32
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff f83b 	bl	8005e34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006dc2:	e04e      	b.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dc4:	f107 0314 	add.w	r3, r7, #20
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7ff f99d 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006dd2:	e046      	b.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dd4:	f107 0308 	add.w	r3, r7, #8
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff faff 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006de2:	e03e      	b.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006de4:	4b43      	ldr	r3, [pc, #268]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006de6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006de8:	e03b      	b.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dea:	4b41      	ldr	r3, [pc, #260]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006df0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006df6:	4b3e      	ldr	r3, [pc, #248]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d10c      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d109      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e08:	4b39      	ldr	r3, [pc, #228]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	08db      	lsrs	r3, r3, #3
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	4a39      	ldr	r2, [pc, #228]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006e14:	fa22 f303 	lsr.w	r3, r2, r3
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
 8006e1a:	e01e      	b.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e1c:	4b34      	ldr	r3, [pc, #208]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e28:	d106      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e30:	d102      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e32:	4b32      	ldr	r3, [pc, #200]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006e34:	637b      	str	r3, [r7, #52]	; 0x34
 8006e36:	e010      	b.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e38:	4b2d      	ldr	r3, [pc, #180]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e44:	d106      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e4c:	d102      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e4e:	4b2c      	ldr	r3, [pc, #176]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006e50:	637b      	str	r3, [r7, #52]	; 0x34
 8006e52:	e002      	b.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006e58:	e003      	b.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8006e5a:	e002      	b.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e60:	bf00      	nop
          }
        }
        break;
 8006e62:	f001 bf70 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006e66:	4b22      	ldr	r3, [pc, #136]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d108      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e78:	f107 0320 	add.w	r3, r7, #32
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fe ffd9 	bl	8005e34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e86:	f001 bf5e 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	2b40      	cmp	r3, #64	; 0x40
 8006e8e:	d108      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e90:	f107 0314 	add.w	r3, r7, #20
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff f937 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e9e:	f001 bf52 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ea6:	f001 bf4e 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8006eaa:	4b11      	ldr	r3, [pc, #68]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006eac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d108      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ebc:	f107 0320 	add.w	r3, r7, #32
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fe ffb7 	bl	8005e34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006eca:	f001 bf3c 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	2b80      	cmp	r3, #128	; 0x80
 8006ed2:	d108      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ed4:	f107 0314 	add.w	r3, r7, #20
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff f915 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ee2:	f001 bf30 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006eea:	f001 bf2c 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006eee:	bf00      	nop
 8006ef0:	44020c00 	.word	0x44020c00
 8006ef4:	00bb8000 	.word	0x00bb8000
 8006ef8:	03d09000 	.word	0x03d09000
 8006efc:	003d0900 	.word	0x003d0900
 8006f00:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006f04:	4b9d      	ldr	r3, [pc, #628]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006f06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d104      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006f16:	f7fc ffd7 	bl	8003ec8 <HAL_RCC_GetPCLK2Freq>
 8006f1a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f1c:	f001 bf13 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006f20:	4b96      	ldr	r3, [pc, #600]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f2c:	d10a      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d107      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f34:	f107 0314 	add.w	r3, r7, #20
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff f8e5 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	637b      	str	r3, [r7, #52]	; 0x34
 8006f42:	e043      	b.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006f44:	4b8d      	ldr	r3, [pc, #564]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f50:	d10a      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d107      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f58:	f107 0308 	add.w	r3, r7, #8
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff fa3d 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	637b      	str	r3, [r7, #52]	; 0x34
 8006f66:	e031      	b.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006f68:	4b84      	ldr	r3, [pc, #528]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d10c      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d109      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f7a:	4b80      	ldr	r3, [pc, #512]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	08db      	lsrs	r3, r3, #3
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	4a7e      	ldr	r2, [pc, #504]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006f86:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f8c:	e01e      	b.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006f8e:	4b7b      	ldr	r3, [pc, #492]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f9a:	d105      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d102      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8006fa2:	4b78      	ldr	r3, [pc, #480]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fa6:	e011      	b.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006fa8:	4b74      	ldr	r3, [pc, #464]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d106      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	2b05      	cmp	r3, #5
 8006fba:	d103      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006fbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc2:	e003      	b.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fc8:	f001 bebd 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006fcc:	f001 bebb 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006fd0:	4b6a      	ldr	r3, [pc, #424]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fda:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d104      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fe2:	f7fc ff5b 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8006fe6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006fe8:	f001 bead 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006fec:	4b63      	ldr	r3, [pc, #396]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ff8:	d10a      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d107      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007000:	f107 0314 	add.w	r3, r7, #20
 8007004:	4618      	mov	r0, r3
 8007006:	f7ff f87f 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	637b      	str	r3, [r7, #52]	; 0x34
 800700e:	e03d      	b.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	2b10      	cmp	r3, #16
 8007014:	d108      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007016:	f107 0308 	add.w	r3, r7, #8
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff f9de 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007024:	f001 be8f 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007028:	4b54      	ldr	r3, [pc, #336]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b02      	cmp	r3, #2
 8007032:	d10c      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	2b18      	cmp	r3, #24
 8007038:	d109      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800703a:	4b50      	ldr	r3, [pc, #320]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	08db      	lsrs	r3, r3, #3
 8007040:	f003 0303 	and.w	r3, r3, #3
 8007044:	4a4e      	ldr	r2, [pc, #312]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007046:	fa22 f303 	lsr.w	r3, r2, r3
 800704a:	637b      	str	r3, [r7, #52]	; 0x34
 800704c:	e01e      	b.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800704e:	4b4b      	ldr	r3, [pc, #300]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800705a:	d105      	bne.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	2b20      	cmp	r3, #32
 8007060:	d102      	bne.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8007062:	4b48      	ldr	r3, [pc, #288]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007064:	637b      	str	r3, [r7, #52]	; 0x34
 8007066:	e011      	b.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007068:	4b44      	ldr	r3, [pc, #272]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800706a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b02      	cmp	r3, #2
 8007074:	d106      	bne.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8007076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007078:	2b28      	cmp	r3, #40	; 0x28
 800707a:	d103      	bne.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800707c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007080:	637b      	str	r3, [r7, #52]	; 0x34
 8007082:	e003      	b.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007088:	f001 be5d 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800708c:	f001 be5b 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007090:	4b3a      	ldr	r3, [pc, #232]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007092:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007096:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800709a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d104      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80070a2:	f7fc fefb 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 80070a6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80070a8:	f001 be4d 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80070ac:	4b33      	ldr	r3, [pc, #204]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070b8:	d10a      	bne.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	2b40      	cmp	r3, #64	; 0x40
 80070be:	d107      	bne.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070c0:	f107 0314 	add.w	r3, r7, #20
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7ff f81f 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	637b      	str	r3, [r7, #52]	; 0x34
 80070ce:	e045      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80070d0:	4b2a      	ldr	r3, [pc, #168]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070dc:	d10a      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	2b80      	cmp	r3, #128	; 0x80
 80070e2:	d107      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070e4:	f107 0308 	add.w	r3, r7, #8
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7ff f977 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	637b      	str	r3, [r7, #52]	; 0x34
 80070f2:	e033      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80070f4:	4b21      	ldr	r3, [pc, #132]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d10c      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	2bc0      	cmp	r3, #192	; 0xc0
 8007104:	d109      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007106:	4b1d      	ldr	r3, [pc, #116]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	08db      	lsrs	r3, r3, #3
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	4a1b      	ldr	r2, [pc, #108]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007112:	fa22 f303 	lsr.w	r3, r2, r3
 8007116:	637b      	str	r3, [r7, #52]	; 0x34
 8007118:	e020      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800711a:	4b18      	ldr	r3, [pc, #96]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007126:	d106      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712e:	d102      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8007130:	4b14      	ldr	r3, [pc, #80]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007132:	637b      	str	r3, [r7, #52]	; 0x34
 8007134:	e012      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007136:	4b11      	ldr	r3, [pc, #68]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800713c:	f003 0302 	and.w	r3, r3, #2
 8007140:	2b02      	cmp	r3, #2
 8007142:	d107      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800714a:	d103      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800714c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007150:	637b      	str	r3, [r7, #52]	; 0x34
 8007152:	e003      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007158:	f001 bdf5 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800715c:	f001 bdf3 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007160:	4b06      	ldr	r3, [pc, #24]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007162:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007166:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800716a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10a      	bne.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007172:	f7fc fe93 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8007176:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007178:	f001 bde5 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800717c:	44020c00 	.word	0x44020c00
 8007180:	03d09000 	.word	0x03d09000
 8007184:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007188:	4ba0      	ldr	r3, [pc, #640]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007194:	d10b      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800719c:	d107      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800719e:	f107 0314 	add.w	r3, r7, #20
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe ffb0 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	637b      	str	r3, [r7, #52]	; 0x34
 80071ac:	e047      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80071ae:	4b97      	ldr	r3, [pc, #604]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ba:	d10b      	bne.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c2:	d107      	bne.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071c4:	f107 0308 	add.w	r3, r7, #8
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7ff f907 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
 80071d2:	e034      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80071d4:	4b8d      	ldr	r3, [pc, #564]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d10d      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80071e6:	d109      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071e8:	4b88      	ldr	r3, [pc, #544]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	08db      	lsrs	r3, r3, #3
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	4a87      	ldr	r2, [pc, #540]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80071f4:	fa22 f303 	lsr.w	r3, r2, r3
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
 80071fa:	e020      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80071fc:	4b83      	ldr	r3, [pc, #524]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007208:	d106      	bne.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007210:	d102      	bne.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8007212:	4b80      	ldr	r3, [pc, #512]	; (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
 8007216:	e012      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007218:	4b7c      	ldr	r3, [pc, #496]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800721a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b02      	cmp	r3, #2
 8007224:	d107      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800722c:	d103      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800722e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007232:	637b      	str	r3, [r7, #52]	; 0x34
 8007234:	e003      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800723a:	f001 bd84 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800723e:	f001 bd82 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007242:	4b72      	ldr	r3, [pc, #456]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007244:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007248:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800724c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007254:	f7fc fe22 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8007258:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800725a:	f001 bd74 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800725e:	4b6b      	ldr	r3, [pc, #428]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800726a:	d10b      	bne.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800726c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007272:	d107      	bne.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007274:	f107 0314 	add.w	r3, r7, #20
 8007278:	4618      	mov	r0, r3
 800727a:	f7fe ff45 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	637b      	str	r3, [r7, #52]	; 0x34
 8007282:	e047      	b.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007284:	4b61      	ldr	r3, [pc, #388]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800728c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007290:	d10b      	bne.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007298:	d107      	bne.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800729a:	f107 0308 	add.w	r3, r7, #8
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff f89c 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	637b      	str	r3, [r7, #52]	; 0x34
 80072a8:	e034      	b.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80072aa:	4b58      	ldr	r3, [pc, #352]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d10d      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072bc:	d109      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072be:	4b53      	ldr	r3, [pc, #332]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	08db      	lsrs	r3, r3, #3
 80072c4:	f003 0303 	and.w	r3, r3, #3
 80072c8:	4a51      	ldr	r2, [pc, #324]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80072ca:	fa22 f303 	lsr.w	r3, r2, r3
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
 80072d0:	e020      	b.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80072d2:	4b4e      	ldr	r3, [pc, #312]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072de:	d106      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072e6:	d102      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80072e8:	4b4a      	ldr	r3, [pc, #296]	; (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80072ea:	637b      	str	r3, [r7, #52]	; 0x34
 80072ec:	e012      	b.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80072ee:	4b47      	ldr	r3, [pc, #284]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80072f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d107      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007302:	d103      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8007304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007308:	637b      	str	r3, [r7, #52]	; 0x34
 800730a:	e003      	b.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007310:	f001 bd19 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007314:	f001 bd17 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007318:	4b3c      	ldr	r3, [pc, #240]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800731a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800731e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8007322:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	2b00      	cmp	r3, #0
 8007328:	d104      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800732a:	f7fc fdb7 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 800732e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007330:	f001 bd09 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007334:	4b35      	ldr	r3, [pc, #212]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800733c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007340:	d10b      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007348:	d107      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800734a:	f107 0314 	add.w	r3, r7, #20
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe feda 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	637b      	str	r3, [r7, #52]	; 0x34
 8007358:	e047      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800735a:	4b2c      	ldr	r3, [pc, #176]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007366:	d10b      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800736e:	d107      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007370:	f107 0308 	add.w	r3, r7, #8
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff f831 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
 800737e:	e034      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007380:	4b22      	ldr	r3, [pc, #136]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b02      	cmp	r3, #2
 800738a:	d10d      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007392:	d109      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007394:	4b1d      	ldr	r3, [pc, #116]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	08db      	lsrs	r3, r3, #3
 800739a:	f003 0303 	and.w	r3, r3, #3
 800739e:	4a1c      	ldr	r2, [pc, #112]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
 80073a4:	637b      	str	r3, [r7, #52]	; 0x34
 80073a6:	e020      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80073a8:	4b18      	ldr	r3, [pc, #96]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b4:	d106      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073bc:	d102      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80073be:	4b15      	ldr	r3, [pc, #84]	; (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80073c0:	637b      	str	r3, [r7, #52]	; 0x34
 80073c2:	e012      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80073c4:	4b11      	ldr	r3, [pc, #68]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d107      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80073d8:	d103      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80073da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073de:	637b      	str	r3, [r7, #52]	; 0x34
 80073e0:	e003      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073e6:	f001 bcae 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80073ea:	f001 bcac 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80073ee:	4b07      	ldr	r3, [pc, #28]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80073f4:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 80073f8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10b      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007400:	f7fc fd4c 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8007404:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8007406:	f001 bc9e 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800740a:	bf00      	nop
 800740c:	44020c00 	.word	0x44020c00
 8007410:	03d09000 	.word	0x03d09000
 8007414:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007418:	4ba0      	ldr	r3, [pc, #640]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007424:	d10b      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800742c:	d107      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800742e:	f107 0314 	add.w	r3, r7, #20
 8007432:	4618      	mov	r0, r3
 8007434:	f7fe fe68 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	637b      	str	r3, [r7, #52]	; 0x34
 800743c:	e047      	b.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800743e:	4b97      	ldr	r3, [pc, #604]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800744a:	d10b      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007452:	d107      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	4618      	mov	r0, r3
 800745a:	f7fe ffbf 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	637b      	str	r3, [r7, #52]	; 0x34
 8007462:	e034      	b.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8007464:	4b8d      	ldr	r3, [pc, #564]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b02      	cmp	r3, #2
 800746e:	d10d      	bne.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007476:	d109      	bne.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007478:	4b88      	ldr	r3, [pc, #544]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	08db      	lsrs	r3, r3, #3
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	4a87      	ldr	r2, [pc, #540]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007484:	fa22 f303 	lsr.w	r3, r2, r3
 8007488:	637b      	str	r3, [r7, #52]	; 0x34
 800748a:	e020      	b.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800748c:	4b83      	ldr	r3, [pc, #524]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007498:	d106      	bne.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074a0:	d102      	bne.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80074a2:	4b80      	ldr	r3, [pc, #512]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80074a4:	637b      	str	r3, [r7, #52]	; 0x34
 80074a6:	e012      	b.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80074a8:	4b7c      	ldr	r3, [pc, #496]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80074aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d107      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80074bc:	d103      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80074be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34
 80074c4:	e003      	b.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074ca:	f001 bc3c 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80074ce:	f001 bc3a 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80074d2:	4b72      	ldr	r3, [pc, #456]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80074d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074d8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80074dc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d104      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80074e4:	f7fc fcda 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 80074e8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80074ea:	f001 bc2c 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80074ee:	4b6b      	ldr	r3, [pc, #428]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074fa:	d10b      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007502:	d107      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007504:	f107 0314 	add.w	r3, r7, #20
 8007508:	4618      	mov	r0, r3
 800750a:	f7fe fdfd 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	637b      	str	r3, [r7, #52]	; 0x34
 8007512:	e047      	b.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8007514:	4b61      	ldr	r3, [pc, #388]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800751c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007520:	d10b      	bne.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007528:	d107      	bne.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800752a:	f107 0308 	add.w	r3, r7, #8
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe ff54 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	637b      	str	r3, [r7, #52]	; 0x34
 8007538:	e034      	b.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800753a:	4b58      	ldr	r3, [pc, #352]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b02      	cmp	r3, #2
 8007544:	d10d      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800754c:	d109      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800754e:	4b53      	ldr	r3, [pc, #332]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	08db      	lsrs	r3, r3, #3
 8007554:	f003 0303 	and.w	r3, r3, #3
 8007558:	4a51      	ldr	r2, [pc, #324]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800755a:	fa22 f303 	lsr.w	r3, r2, r3
 800755e:	637b      	str	r3, [r7, #52]	; 0x34
 8007560:	e020      	b.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8007562:	4b4e      	ldr	r3, [pc, #312]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800756a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800756e:	d106      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007576:	d102      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8007578:	4b4a      	ldr	r3, [pc, #296]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800757a:	637b      	str	r3, [r7, #52]	; 0x34
 800757c:	e012      	b.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800757e:	4b47      	ldr	r3, [pc, #284]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b02      	cmp	r3, #2
 800758a:	d107      	bne.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007592:	d103      	bne.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8007594:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007598:	637b      	str	r3, [r7, #52]	; 0x34
 800759a:	e003      	b.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800759c:	2300      	movs	r3, #0
 800759e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075a0:	f001 bbd1 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80075a4:	f001 bbcf 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80075a8:	4b3c      	ldr	r3, [pc, #240]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80075ae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80075b2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d104      	bne.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80075ba:	f7fc fc6f 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 80075be:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80075c0:	f001 bbc1 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80075c4:	4b35      	ldr	r3, [pc, #212]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075d0:	d10b      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075d8:	d107      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075da:	f107 0314 	add.w	r3, r7, #20
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe fd92 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	637b      	str	r3, [r7, #52]	; 0x34
 80075e8:	e047      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80075ea:	4b2c      	ldr	r3, [pc, #176]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f6:	d10b      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075fe:	d107      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007600:	f107 0308 	add.w	r3, r7, #8
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe fee9 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
 800760e:	e034      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8007610:	4b22      	ldr	r3, [pc, #136]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b02      	cmp	r3, #2
 800761a:	d10d      	bne.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007622:	d109      	bne.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007624:	4b1d      	ldr	r3, [pc, #116]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	08db      	lsrs	r3, r3, #3
 800762a:	f003 0303 	and.w	r3, r3, #3
 800762e:	4a1c      	ldr	r2, [pc, #112]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007630:	fa22 f303 	lsr.w	r3, r2, r3
 8007634:	637b      	str	r3, [r7, #52]	; 0x34
 8007636:	e020      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8007638:	4b18      	ldr	r3, [pc, #96]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007644:	d106      	bne.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800764c:	d102      	bne.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800764e:	4b15      	ldr	r3, [pc, #84]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007650:	637b      	str	r3, [r7, #52]	; 0x34
 8007652:	e012      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8007654:	4b11      	ldr	r3, [pc, #68]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b02      	cmp	r3, #2
 8007660:	d107      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007668:	d103      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800766a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766e:	637b      	str	r3, [r7, #52]	; 0x34
 8007670:	e003      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007676:	f001 bb66 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800767a:	f001 bb64 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800767e:	4b07      	ldr	r3, [pc, #28]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007680:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007684:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8007688:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10b      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007690:	f7fc fc04 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8007694:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8007696:	f001 bb56 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800769a:	bf00      	nop
 800769c:	44020c00 	.word	0x44020c00
 80076a0:	03d09000 	.word	0x03d09000
 80076a4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80076a8:	4ba1      	ldr	r3, [pc, #644]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076b4:	d10b      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076bc:	d107      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076be:	f107 0314 	add.w	r3, r7, #20
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe fd20 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34
 80076cc:	e047      	b.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80076ce:	4b98      	ldr	r3, [pc, #608]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076da:	d10b      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076e2:	d107      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076e4:	f107 0308 	add.w	r3, r7, #8
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fe fe77 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
 80076f2:	e034      	b.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80076f4:	4b8e      	ldr	r3, [pc, #568]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d10d      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007706:	d109      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007708:	4b89      	ldr	r3, [pc, #548]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	08db      	lsrs	r3, r3, #3
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	4a88      	ldr	r2, [pc, #544]	; (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007714:	fa22 f303 	lsr.w	r3, r2, r3
 8007718:	637b      	str	r3, [r7, #52]	; 0x34
 800771a:	e020      	b.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800771c:	4b84      	ldr	r3, [pc, #528]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007728:	d106      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007730:	d102      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8007732:	4b81      	ldr	r3, [pc, #516]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007734:	637b      	str	r3, [r7, #52]	; 0x34
 8007736:	e012      	b.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007738:	4b7d      	ldr	r3, [pc, #500]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800773a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b02      	cmp	r3, #2
 8007744:	d107      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800774c:	d103      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800774e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007752:	637b      	str	r3, [r7, #52]	; 0x34
 8007754:	e003      	b.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800775a:	f001 baf4 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800775e:	f001 baf2 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8007762:	4b73      	ldr	r3, [pc, #460]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007764:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	2b00      	cmp	r3, #0
 8007772:	d104      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007774:	f7fc fb92 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8007778:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800777a:	f001 bae4 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800777e:	4b6c      	ldr	r3, [pc, #432]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800778a:	d10a      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	2b01      	cmp	r3, #1
 8007790:	d107      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007792:	f107 0314 	add.w	r3, r7, #20
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe fcb6 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
 80077a0:	e043      	b.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80077a2:	4b63      	ldr	r3, [pc, #396]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ae:	d10a      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80077b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d107      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077b6:	f107 0308 	add.w	r3, r7, #8
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe fe0e 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	637b      	str	r3, [r7, #52]	; 0x34
 80077c4:	e031      	b.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80077c6:	4b5a      	ldr	r3, [pc, #360]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d10c      	bne.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	d109      	bne.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077d8:	4b55      	ldr	r3, [pc, #340]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	08db      	lsrs	r3, r3, #3
 80077de:	f003 0303 	and.w	r3, r3, #3
 80077e2:	4a54      	ldr	r2, [pc, #336]	; (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80077e4:	fa22 f303 	lsr.w	r3, r2, r3
 80077e8:	637b      	str	r3, [r7, #52]	; 0x34
 80077ea:	e01e      	b.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80077ec:	4b50      	ldr	r3, [pc, #320]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077f8:	d105      	bne.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d102      	bne.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8007800:	4b4d      	ldr	r3, [pc, #308]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007802:	637b      	str	r3, [r7, #52]	; 0x34
 8007804:	e011      	b.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8007806:	4b4a      	ldr	r3, [pc, #296]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b02      	cmp	r3, #2
 8007812:	d106      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	2b05      	cmp	r3, #5
 8007818:	d103      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800781a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800781e:	637b      	str	r3, [r7, #52]	; 0x34
 8007820:	e003      	b.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007826:	f001 ba8e 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800782a:	f001 ba8c 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800782e:	4b40      	ldr	r3, [pc, #256]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007830:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007834:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007838:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	2b00      	cmp	r3, #0
 800783e:	d104      	bne.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007840:	f7fc fb2c 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8007844:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8007846:	f001 ba7e 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800784a:	4b39      	ldr	r3, [pc, #228]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007852:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007856:	d10a      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	2b10      	cmp	r3, #16
 800785c:	d107      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800785e:	f107 0314 	add.w	r3, r7, #20
 8007862:	4618      	mov	r0, r3
 8007864:	f7fe fc50 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	637b      	str	r3, [r7, #52]	; 0x34
 800786c:	e043      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800786e:	4b30      	ldr	r3, [pc, #192]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800787a:	d10a      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	2b20      	cmp	r3, #32
 8007880:	d107      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007882:	f107 0308 	add.w	r3, r7, #8
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fda8 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	637b      	str	r3, [r7, #52]	; 0x34
 8007890:	e031      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8007892:	4b27      	ldr	r3, [pc, #156]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b02      	cmp	r3, #2
 800789c:	d10c      	bne.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	2b30      	cmp	r3, #48	; 0x30
 80078a2:	d109      	bne.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078a4:	4b22      	ldr	r3, [pc, #136]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	08db      	lsrs	r3, r3, #3
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	4a21      	ldr	r2, [pc, #132]	; (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80078b0:	fa22 f303 	lsr.w	r3, r2, r3
 80078b4:	637b      	str	r3, [r7, #52]	; 0x34
 80078b6:	e01e      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80078b8:	4b1d      	ldr	r3, [pc, #116]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078c4:	d105      	bne.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	2b40      	cmp	r3, #64	; 0x40
 80078ca:	d102      	bne.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80078cc:	4b1a      	ldr	r3, [pc, #104]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80078ce:	637b      	str	r3, [r7, #52]	; 0x34
 80078d0:	e011      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80078d2:	4b17      	ldr	r3, [pc, #92]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d106      	bne.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	2b50      	cmp	r3, #80	; 0x50
 80078e4:	d103      	bne.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80078e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ea:	637b      	str	r3, [r7, #52]	; 0x34
 80078ec:	e003      	b.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078f2:	f001 ba28 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80078f6:	f001 ba26 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80078fa:	4b0d      	ldr	r3, [pc, #52]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007900:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007904:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	2b00      	cmp	r3, #0
 800790a:	d104      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800790c:	f7fc faf2 	bl	8003ef4 <HAL_RCC_GetPCLK3Freq>
 8007910:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007912:	f001 ba18 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800791c:	d10e      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800791e:	f107 0314 	add.w	r3, r7, #20
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe fbf0 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800792c:	f001 ba0b 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007930:	44020c00 	.word	0x44020c00
 8007934:	03d09000 	.word	0x03d09000
 8007938:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007942:	d108      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007944:	f107 0308 	add.w	r3, r7, #8
 8007948:	4618      	mov	r0, r3
 800794a:	f7fe fd47 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007952:	f001 b9f8 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007956:	4ba4      	ldr	r3, [pc, #656]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b02      	cmp	r3, #2
 8007960:	d10d      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007968:	d109      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800796a:	4b9f      	ldr	r3, [pc, #636]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	08db      	lsrs	r3, r3, #3
 8007970:	f003 0303 	and.w	r3, r3, #3
 8007974:	4a9d      	ldr	r2, [pc, #628]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007976:	fa22 f303 	lsr.w	r3, r2, r3
 800797a:	637b      	str	r3, [r7, #52]	; 0x34
 800797c:	e020      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800797e:	4b9a      	ldr	r3, [pc, #616]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800798a:	d106      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007992:	d102      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8007994:	4b96      	ldr	r3, [pc, #600]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007996:	637b      	str	r3, [r7, #52]	; 0x34
 8007998:	e012      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800799a:	4b93      	ldr	r3, [pc, #588]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800799c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d107      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80079a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079aa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80079ae:	d103      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80079b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079b4:	637b      	str	r3, [r7, #52]	; 0x34
 80079b6:	e003      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079bc:	f001 b9c3 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80079c0:	f001 b9c1 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80079c4:	4b88      	ldr	r3, [pc, #544]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80079c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079ca:	f003 0307 	and.w	r3, r3, #7
 80079ce:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d104      	bne.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80079d6:	f7fc fa45 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 80079da:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80079dc:	f001 b9b3 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d104      	bne.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80079e6:	f7fc f911 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 80079ea:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80079ec:	f001 b9ab 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d108      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079f6:	f107 0314 	add.w	r3, r7, #20
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fe fb84 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a04:	f001 b99f 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007a08:	4b77      	ldr	r3, [pc, #476]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a14:	d105      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d102      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8007a1c:	4b75      	ldr	r3, [pc, #468]	; (8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8007a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a20:	e023      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007a22:	4b71      	ldr	r3, [pc, #452]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d10c      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	d109      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a34:	4b6c      	ldr	r3, [pc, #432]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	08db      	lsrs	r3, r3, #3
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	4a6b      	ldr	r2, [pc, #428]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
 8007a44:	637b      	str	r3, [r7, #52]	; 0x34
 8007a46:	e010      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007a48:	4b67      	ldr	r3, [pc, #412]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a54:	d105      	bne.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	2b05      	cmp	r3, #5
 8007a5a:	d102      	bne.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8007a5c:	4b64      	ldr	r3, [pc, #400]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a60:	e003      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a66:	f001 b96e 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a6a:	f001 b96c 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007a6e:	4b5e      	ldr	r3, [pc, #376]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a74:	f003 0308 	and.w	r3, r3, #8
 8007a78:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007a7a:	4b5b      	ldr	r3, [pc, #364]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a80:	f003 0302 	and.w	r3, r3, #2
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d106      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d103      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8007a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
 8007a94:	e012      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007a96:	4b54      	ldr	r3, [pc, #336]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aa4:	d106      	bne.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d103      	bne.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8007aac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab2:	e003      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007ab8:	f001 b945 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007abc:	f001 b943 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007ac0:	4b49      	ldr	r3, [pc, #292]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ac2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ac6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d104      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ad2:	f7fc f9e3 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8007ad6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007ad8:	f001 b935 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae2:	d108      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ae4:	f107 0308 	add.w	r3, r7, #8
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe fc77 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007af2:	f001 b928 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007af6:	4b3c      	ldr	r3, [pc, #240]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d10d      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b08:	d109      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b0a:	4b37      	ldr	r3, [pc, #220]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	08db      	lsrs	r3, r3, #3
 8007b10:	f003 0303 	and.w	r3, r3, #3
 8007b14:	4a35      	ldr	r2, [pc, #212]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007b16:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1c:	e011      	b.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8007b1e:	4b32      	ldr	r3, [pc, #200]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b2a:	d106      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b32:	d102      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8007b34:	4b2e      	ldr	r3, [pc, #184]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007b36:	637b      	str	r3, [r7, #52]	; 0x34
 8007b38:	e003      	b.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b3e:	f001 b902 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b42:	f001 b900 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007b46:	4b28      	ldr	r3, [pc, #160]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007b50:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d104      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b58:	f7fc f9a0 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8007b5c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b5e:	f001 b8f2 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b68:	d108      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b6a:	f107 0308 	add.w	r3, r7, #8
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe fc34 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b78:	f001 b8e5 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007b7c:	4b1a      	ldr	r3, [pc, #104]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d10d      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b8e:	d109      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b90:	4b15      	ldr	r3, [pc, #84]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	08db      	lsrs	r3, r3, #3
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	4a14      	ldr	r2, [pc, #80]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba2:	e011      	b.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007ba4:	4b10      	ldr	r3, [pc, #64]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb0:	d106      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007bb8:	d102      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8007bba:	4b0d      	ldr	r3, [pc, #52]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bbe:	e003      	b.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bc4:	f001 b8bf 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bc8:	f001 b8bd 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007bcc:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007bce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007bd2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007bd6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10c      	bne.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007bde:	f7fc f989 	bl	8003ef4 <HAL_RCC_GetPCLK3Freq>
 8007be2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007be4:	f001 b8af 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007be8:	44020c00 	.word	0x44020c00
 8007bec:	03d09000 	.word	0x03d09000
 8007bf0:	003d0900 	.word	0x003d0900
 8007bf4:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bfe:	d108      	bne.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c00:	f107 0308 	add.w	r3, r7, #8
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fe fbe9 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c0e:	f001 b89a 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007c12:	4b9f      	ldr	r3, [pc, #636]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d10d      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c24:	d109      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c26:	4b9a      	ldr	r3, [pc, #616]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	08db      	lsrs	r3, r3, #3
 8007c2c:	f003 0303 	and.w	r3, r3, #3
 8007c30:	4a98      	ldr	r2, [pc, #608]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007c32:	fa22 f303 	lsr.w	r3, r2, r3
 8007c36:	637b      	str	r3, [r7, #52]	; 0x34
 8007c38:	e011      	b.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8007c3a:	4b95      	ldr	r3, [pc, #596]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c46:	d106      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8007c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c4e:	d102      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8007c50:	4b91      	ldr	r3, [pc, #580]	; (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007c52:	637b      	str	r3, [r7, #52]	; 0x34
 8007c54:	e003      	b.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c5a:	f001 b874 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c5e:	f001 b872 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007c62:	4b8b      	ldr	r3, [pc, #556]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007c64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c68:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007c6c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d104      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007c74:	f7fc f93e 	bl	8003ef4 <HAL_RCC_GetPCLK3Freq>
 8007c78:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c7a:	f001 b864 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c84:	d108      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c86:	f107 0308 	add.w	r3, r7, #8
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fba6 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c94:	f001 b857 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007c98:	4b7d      	ldr	r3, [pc, #500]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0302 	and.w	r3, r3, #2
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d10d      	bne.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8007ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007caa:	d109      	bne.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cac:	4b78      	ldr	r3, [pc, #480]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	08db      	lsrs	r3, r3, #3
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	4a77      	ldr	r2, [pc, #476]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007cbe:	e011      	b.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8007cc0:	4b73      	ldr	r3, [pc, #460]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ccc:	d106      	bne.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007cd4:	d102      	bne.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8007cd6:	4b70      	ldr	r3, [pc, #448]	; (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cda:	e003      	b.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ce0:	f001 b831 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ce4:	f001 b82f 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007ce8:	4b69      	ldr	r3, [pc, #420]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007cea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007cee:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007cf2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d104      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007cfa:	f7fc f8cf 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8007cfe:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d00:	f001 b821 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d0a:	d108      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d0c:	f107 0308 	add.w	r3, r7, #8
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fe fb63 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d1a:	f001 b814 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007d1e:	4b5c      	ldr	r3, [pc, #368]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d10e      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d30:	d10a      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d32:	4b57      	ldr	r3, [pc, #348]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	08db      	lsrs	r3, r3, #3
 8007d38:	f003 0303 	and.w	r3, r3, #3
 8007d3c:	4a55      	ldr	r2, [pc, #340]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d44:	f000 bfff 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d4c:	f000 bffb 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007d50:	4b4f      	ldr	r3, [pc, #316]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007d62:	d056      	beq.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007d6a:	f200 808b 	bhi.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d74:	d03e      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8007d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7c:	f200 8082 	bhi.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d86:	d027      	beq.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d8e:	d879      	bhi.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d96:	d017      	beq.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d9e:	d871      	bhi.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d004      	beq.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dac:	d004      	beq.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8007dae:	e069      	b.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007db0:	f7fc f8a0 	bl	8003ef4 <HAL_RCC_GetPCLK3Freq>
 8007db4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007db6:	e068      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007db8:	f107 0314 	add.w	r3, r7, #20
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe f9a3 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007dc6:	e060      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dc8:	f107 0308 	add.w	r3, r7, #8
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fe fb05 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007dd6:	e058      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007dd8:	4b2d      	ldr	r3, [pc, #180]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d103      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8007de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dea:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007dec:	e04d      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007df2:	e04a      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007df4:	4b26      	ldr	r3, [pc, #152]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e02:	d103      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8007e04:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e08:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007e0a:	e03e      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e10:	e03b      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e12:	4b1f      	ldr	r3, [pc, #124]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e18:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007e1c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e1e:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0302 	and.w	r3, r3, #2
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d10c      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d109      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e30:	4b17      	ldr	r3, [pc, #92]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	08db      	lsrs	r3, r3, #3
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	4a16      	ldr	r2, [pc, #88]	; (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e40:	637b      	str	r3, [r7, #52]	; 0x34
 8007e42:	e01e      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e44:	4b12      	ldr	r3, [pc, #72]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e50:	d106      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e58:	d102      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007e5a:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e5e:	e010      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e60:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e6c:	d106      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e74:	d102      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e76:	4b09      	ldr	r3, [pc, #36]	; (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8007e78:	637b      	str	r3, [r7, #52]	; 0x34
 8007e7a:	e002      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007e80:	e003      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8007e82:	e002      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e88:	bf00      	nop
          }
        }
        break;
 8007e8a:	f000 bf5c 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e8e:	bf00      	nop
 8007e90:	44020c00 	.word	0x44020c00
 8007e94:	03d09000 	.word	0x03d09000
 8007e98:	003d0900 	.word	0x003d0900
 8007e9c:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007ea0:	4b9e      	ldr	r3, [pc, #632]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007ea2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007ea6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007eb2:	d056      	beq.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007eba:	f200 808b 	bhi.w	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ec4:	d03e      	beq.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ecc:	f200 8082 	bhi.w	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ed6:	d027      	beq.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ede:	d879      	bhi.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee6:	d017      	beq.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eee:	d871      	bhi.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efc:	d004      	beq.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8007efe:	e069      	b.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007f00:	f7fb ffcc 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8007f04:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007f06:	e068      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f08:	f107 0314 	add.w	r3, r7, #20
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe f8fb 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f16:	e060      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f18:	f107 0308 	add.w	r3, r7, #8
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe fa5d 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f26:	e058      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f28:	4b7c      	ldr	r3, [pc, #496]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d103      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8007f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f3a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007f3c:	e04d      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f42:	e04a      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007f44:	4b75      	ldr	r3, [pc, #468]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007f46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f52:	d103      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8007f54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f58:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007f5a:	e03e      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f60:	e03b      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f62:	4b6e      	ldr	r3, [pc, #440]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f68:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007f6c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f6e:	4b6b      	ldr	r3, [pc, #428]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d10c      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8007f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d109      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f80:	4b66      	ldr	r3, [pc, #408]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	08db      	lsrs	r3, r3, #3
 8007f86:	f003 0303 	and.w	r3, r3, #3
 8007f8a:	4a65      	ldr	r2, [pc, #404]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f90:	637b      	str	r3, [r7, #52]	; 0x34
 8007f92:	e01e      	b.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f94:	4b61      	ldr	r3, [pc, #388]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fa0:	d106      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa8:	d102      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007faa:	4b5e      	ldr	r3, [pc, #376]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007fac:	637b      	str	r3, [r7, #52]	; 0x34
 8007fae:	e010      	b.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fb0:	4b5a      	ldr	r3, [pc, #360]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fbc:	d106      	bne.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fc4:	d102      	bne.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007fc6:	4b58      	ldr	r3, [pc, #352]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8007fca:	e002      	b.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007fd0:	e003      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8007fd2:	e002      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fd8:	bf00      	nop
          }
        }
        break;
 8007fda:	f000 beb4 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007fde:	4b4f      	ldr	r3, [pc, #316]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007fe0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007fe4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ff0:	d056      	beq.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ff8:	f200 808b 	bhi.w	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008002:	d03e      	beq.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8008004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008006:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800800a:	f200 8082 	bhi.w	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008014:	d027      	beq.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800801c:	d879      	bhi.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008024:	d017      	beq.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800802c:	d871      	bhi.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800802e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8008034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800803a:	d004      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800803c:	e069      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800803e:	f7fb ff59 	bl	8003ef4 <HAL_RCC_GetPCLK3Freq>
 8008042:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008044:	e068      	b.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008046:	f107 0314 	add.w	r3, r7, #20
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe f85c 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008054:	e060      	b.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008056:	f107 0308 	add.w	r3, r7, #8
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe f9be 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008064:	e058      	b.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008066:	4b2d      	ldr	r3, [pc, #180]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800806c:	f003 0302 	and.w	r3, r3, #2
 8008070:	2b02      	cmp	r3, #2
 8008072:	d103      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8008074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008078:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800807a:	e04d      	b.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008080:	e04a      	b.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008082:	4b26      	ldr	r3, [pc, #152]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800808c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008090:	d103      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8008092:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008096:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008098:	e03e      	b.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800809e:	e03b      	b.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080a0:	4b1e      	ldr	r3, [pc, #120]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80080a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080a6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80080aa:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080ac:	4b1b      	ldr	r3, [pc, #108]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d10c      	bne.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80080b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d109      	bne.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080be:	4b17      	ldr	r3, [pc, #92]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	08db      	lsrs	r3, r3, #3
 80080c4:	f003 0303 	and.w	r3, r3, #3
 80080c8:	4a15      	ldr	r2, [pc, #84]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80080ca:	fa22 f303 	lsr.w	r3, r2, r3
 80080ce:	637b      	str	r3, [r7, #52]	; 0x34
 80080d0:	e01e      	b.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080d2:	4b12      	ldr	r3, [pc, #72]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080de:	d106      	bne.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80080e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e6:	d102      	bne.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80080e8:	4b0e      	ldr	r3, [pc, #56]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80080ea:	637b      	str	r3, [r7, #52]	; 0x34
 80080ec:	e010      	b.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080ee:	4b0b      	ldr	r3, [pc, #44]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080fa:	d106      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80080fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008102:	d102      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008104:	4b08      	ldr	r3, [pc, #32]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008106:	637b      	str	r3, [r7, #52]	; 0x34
 8008108:	e002      	b.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800810a:	2300      	movs	r3, #0
 800810c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800810e:	e003      	b.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8008110:	e002      	b.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008116:	bf00      	nop
          }
        }
        break;
 8008118:	f000 be15 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800811c:	44020c00 	.word	0x44020c00
 8008120:	03d09000 	.word	0x03d09000
 8008124:	003d0900 	.word	0x003d0900
 8008128:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800812c:	4b9e      	ldr	r3, [pc, #632]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800812e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008132:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8008136:	633b      	str	r3, [r7, #48]	; 0x30
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800813e:	d056      	beq.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8008146:	f200 808b 	bhi.w	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008150:	d03e      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008158:	f200 8082 	bhi.w	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008162:	d027      	beq.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800816a:	d879      	bhi.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008172:	d017      	beq.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800817a:	d871      	bhi.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	2b00      	cmp	r3, #0
 8008180:	d004      	beq.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008188:	d004      	beq.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800818a:	e069      	b.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800818c:	f7fb feb2 	bl	8003ef4 <HAL_RCC_GetPCLK3Freq>
 8008190:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008192:	e068      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008194:	f107 0314 	add.w	r3, r7, #20
 8008198:	4618      	mov	r0, r3
 800819a:	f7fd ffb5 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081a2:	e060      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081a4:	f107 0308 	add.w	r3, r7, #8
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe f917 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081b2:	e058      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80081b4:	4b7c      	ldr	r3, [pc, #496]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80081b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d103      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80081c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081c6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80081c8:	e04d      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081ce:	e04a      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80081d0:	4b75      	ldr	r3, [pc, #468]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80081d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081de:	d103      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80081e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80081e4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80081e6:	e03e      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081ec:	e03b      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081ee:	4b6e      	ldr	r3, [pc, #440]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80081f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081f4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80081f8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081fa:	4b6b      	ldr	r3, [pc, #428]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b02      	cmp	r3, #2
 8008204:	d10c      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d109      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800820c:	4b66      	ldr	r3, [pc, #408]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	08db      	lsrs	r3, r3, #3
 8008212:	f003 0303 	and.w	r3, r3, #3
 8008216:	4a65      	ldr	r2, [pc, #404]	; (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008218:	fa22 f303 	lsr.w	r3, r2, r3
 800821c:	637b      	str	r3, [r7, #52]	; 0x34
 800821e:	e01e      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008220:	4b61      	ldr	r3, [pc, #388]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800822c:	d106      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800822e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008234:	d102      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008236:	4b5e      	ldr	r3, [pc, #376]	; (80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008238:	637b      	str	r3, [r7, #52]	; 0x34
 800823a:	e010      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800823c:	4b5a      	ldr	r3, [pc, #360]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008248:	d106      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008250:	d102      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008252:	4b58      	ldr	r3, [pc, #352]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008254:	637b      	str	r3, [r7, #52]	; 0x34
 8008256:	e002      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008258:	2300      	movs	r3, #0
 800825a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800825c:	e003      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800825e:	e002      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008264:	bf00      	nop
          }
        }
        break;
 8008266:	f000 bd6e 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800826a:	4b4f      	ldr	r3, [pc, #316]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800826c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008270:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008274:	633b      	str	r3, [r7, #48]	; 0x30
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800827c:	d056      	beq.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008284:	f200 808b 	bhi.w	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800828e:	d03e      	beq.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008296:	f200 8082 	bhi.w	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082a0:	d027      	beq.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082a8:	d879      	bhi.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082b0:	d017      	beq.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082b8:	d871      	bhi.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d004      	beq.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082c6:	d004      	beq.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80082c8:	e069      	b.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80082ca:	f7fb fe13 	bl	8003ef4 <HAL_RCC_GetPCLK3Freq>
 80082ce:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80082d0:	e068      	b.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082d2:	f107 0314 	add.w	r3, r7, #20
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fd ff16 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082e0:	e060      	b.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082e2:	f107 0308 	add.w	r3, r7, #8
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe f878 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082f0:	e058      	b.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80082f2:	4b2d      	ldr	r3, [pc, #180]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80082f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d103      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008304:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008306:	e04d      	b.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800830c:	e04a      	b.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800830e:	4b26      	ldr	r3, [pc, #152]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800831c:	d103      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800831e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008322:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008324:	e03e      	b.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800832a:	e03b      	b.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800832c:	4b1e      	ldr	r3, [pc, #120]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800832e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008332:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008336:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008338:	4b1b      	ldr	r3, [pc, #108]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	2b02      	cmp	r3, #2
 8008342:	d10c      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8008344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008346:	2b00      	cmp	r3, #0
 8008348:	d109      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800834a:	4b17      	ldr	r3, [pc, #92]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	08db      	lsrs	r3, r3, #3
 8008350:	f003 0303 	and.w	r3, r3, #3
 8008354:	4a15      	ldr	r2, [pc, #84]	; (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008356:	fa22 f303 	lsr.w	r3, r2, r3
 800835a:	637b      	str	r3, [r7, #52]	; 0x34
 800835c:	e01e      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800835e:	4b12      	ldr	r3, [pc, #72]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800836a:	d106      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800836c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008372:	d102      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008374:	4b0e      	ldr	r3, [pc, #56]	; (80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008376:	637b      	str	r3, [r7, #52]	; 0x34
 8008378:	e010      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800837a:	4b0b      	ldr	r3, [pc, #44]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008386:	d106      	bne.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800838e:	d102      	bne.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008390:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008392:	637b      	str	r3, [r7, #52]	; 0x34
 8008394:	e002      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800839a:	e003      	b.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800839c:	e002      	b.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800839e:	2300      	movs	r3, #0
 80083a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80083a2:	bf00      	nop
          }
        }
        break;
 80083a4:	f000 bccf 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083a8:	44020c00 	.word	0x44020c00
 80083ac:	03d09000 	.word	0x03d09000
 80083b0:	003d0900 	.word	0x003d0900
 80083b4:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80083b8:	4b9e      	ldr	r3, [pc, #632]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80083ba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80083be:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80083c2:	633b      	str	r3, [r7, #48]	; 0x30
 80083c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083ca:	d056      	beq.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083d2:	f200 808b 	bhi.w	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083dc:	d03e      	beq.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e4:	f200 8082 	bhi.w	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083ee:	d027      	beq.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083f6:	d879      	bhi.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083fe:	d017      	beq.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008406:	d871      	bhi.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	2b00      	cmp	r3, #0
 800840c:	d004      	beq.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008414:	d004      	beq.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8008416:	e069      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008418:	f7fb fd6c 	bl	8003ef4 <HAL_RCC_GetPCLK3Freq>
 800841c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800841e:	e068      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008420:	f107 0314 	add.w	r3, r7, #20
 8008424:	4618      	mov	r0, r3
 8008426:	f7fd fe6f 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800842e:	e060      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008430:	f107 0308 	add.w	r3, r7, #8
 8008434:	4618      	mov	r0, r3
 8008436:	f7fd ffd1 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800843e:	e058      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008440:	4b7c      	ldr	r3, [pc, #496]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b02      	cmp	r3, #2
 800844c:	d103      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800844e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008452:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008454:	e04d      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800845a:	e04a      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800845c:	4b75      	ldr	r3, [pc, #468]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800845e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008462:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008466:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800846a:	d103      	bne.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800846c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008470:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008472:	e03e      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008478:	e03b      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800847a:	4b6e      	ldr	r3, [pc, #440]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800847c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008480:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008484:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008486:	4b6b      	ldr	r3, [pc, #428]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b02      	cmp	r3, #2
 8008490:	d10c      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8008492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d109      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008498:	4b66      	ldr	r3, [pc, #408]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	08db      	lsrs	r3, r3, #3
 800849e:	f003 0303 	and.w	r3, r3, #3
 80084a2:	4a65      	ldr	r2, [pc, #404]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80084a4:	fa22 f303 	lsr.w	r3, r2, r3
 80084a8:	637b      	str	r3, [r7, #52]	; 0x34
 80084aa:	e01e      	b.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084ac:	4b61      	ldr	r3, [pc, #388]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084b8:	d106      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80084ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c0:	d102      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80084c2:	4b5e      	ldr	r3, [pc, #376]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80084c4:	637b      	str	r3, [r7, #52]	; 0x34
 80084c6:	e010      	b.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084c8:	4b5a      	ldr	r3, [pc, #360]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084d4:	d106      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084dc:	d102      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80084de:	4b58      	ldr	r3, [pc, #352]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34
 80084e2:	e002      	b.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80084e8:	e003      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80084ea:	e002      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084f0:	bf00      	nop
          }
        }
        break;
 80084f2:	f000 bc28 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80084f6:	4b4f      	ldr	r3, [pc, #316]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80084f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008500:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008502:	4b4c      	ldr	r3, [pc, #304]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800850a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800850e:	d106      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008512:	2b00      	cmp	r3, #0
 8008514:	d103      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8008516:	4b4a      	ldr	r3, [pc, #296]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008518:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800851a:	f000 bc14 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008524:	d108      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008526:	f107 0320 	add.w	r3, r7, #32
 800852a:	4618      	mov	r0, r3
 800852c:	f7fd fc82 	bl	8005e34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008534:	f000 bc07 	b.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800853e:	d107      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008540:	f107 0314 	add.w	r3, r7, #20
 8008544:	4618      	mov	r0, r3
 8008546:	f7fd fddf 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800854e:	e3fa      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008554:	e3f7      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008556:	4b37      	ldr	r3, [pc, #220]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800855c:	f003 0307 	and.w	r3, r3, #7
 8008560:	633b      	str	r3, [r7, #48]	; 0x30
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	2b04      	cmp	r3, #4
 8008566:	d861      	bhi.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8008568:	a201      	add	r2, pc, #4	; (adr r2, 8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800856a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856e:	bf00      	nop
 8008570:	08008585 	.word	0x08008585
 8008574:	08008595 	.word	0x08008595
 8008578:	080085a5 	.word	0x080085a5
 800857c:	080085b5 	.word	0x080085b5
 8008580:	080085bb 	.word	0x080085bb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008584:	f107 0320 	add.w	r3, r7, #32
 8008588:	4618      	mov	r0, r3
 800858a:	f7fd fc53 	bl	8005e34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008592:	e04e      	b.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008594:	f107 0314 	add.w	r3, r7, #20
 8008598:	4618      	mov	r0, r3
 800859a:	f7fd fdb5 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085a2:	e046      	b.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085a4:	f107 0308 	add.w	r3, r7, #8
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fd ff17 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085b2:	e03e      	b.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80085b4:	4b23      	ldr	r3, [pc, #140]	; (8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80085b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085b8:	e03b      	b.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085ba:	4b1e      	ldr	r3, [pc, #120]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80085bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80085c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80085c4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085c6:	4b1b      	ldr	r3, [pc, #108]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0302 	and.w	r3, r3, #2
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d10c      	bne.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80085d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d109      	bne.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085d8:	4b16      	ldr	r3, [pc, #88]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	08db      	lsrs	r3, r3, #3
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	4a15      	ldr	r2, [pc, #84]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80085e4:	fa22 f303 	lsr.w	r3, r2, r3
 80085e8:	637b      	str	r3, [r7, #52]	; 0x34
 80085ea:	e01e      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085ec:	4b11      	ldr	r3, [pc, #68]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f8:	d106      	bne.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008600:	d102      	bne.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008602:	4b0e      	ldr	r3, [pc, #56]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008604:	637b      	str	r3, [r7, #52]	; 0x34
 8008606:	e010      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008608:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008614:	d106      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8008616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800861c:	d102      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800861e:	4b08      	ldr	r3, [pc, #32]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008620:	637b      	str	r3, [r7, #52]	; 0x34
 8008622:	e002      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008628:	e003      	b.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800862a:	e002      	b.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800862c:	2300      	movs	r3, #0
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008630:	bf00      	nop
          }
        }
        break;
 8008632:	e388      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008634:	44020c00 	.word	0x44020c00
 8008638:	03d09000 	.word	0x03d09000
 800863c:	003d0900 	.word	0x003d0900
 8008640:	007a1200 	.word	0x007a1200
 8008644:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008648:	4ba9      	ldr	r3, [pc, #676]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800864a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800864e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008652:	633b      	str	r3, [r7, #48]	; 0x30
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	2b20      	cmp	r3, #32
 8008658:	f200 809a 	bhi.w	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800865c:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008662:	bf00      	nop
 8008664:	080086e9 	.word	0x080086e9
 8008668:	08008791 	.word	0x08008791
 800866c:	08008791 	.word	0x08008791
 8008670:	08008791 	.word	0x08008791
 8008674:	08008791 	.word	0x08008791
 8008678:	08008791 	.word	0x08008791
 800867c:	08008791 	.word	0x08008791
 8008680:	08008791 	.word	0x08008791
 8008684:	080086f9 	.word	0x080086f9
 8008688:	08008791 	.word	0x08008791
 800868c:	08008791 	.word	0x08008791
 8008690:	08008791 	.word	0x08008791
 8008694:	08008791 	.word	0x08008791
 8008698:	08008791 	.word	0x08008791
 800869c:	08008791 	.word	0x08008791
 80086a0:	08008791 	.word	0x08008791
 80086a4:	08008709 	.word	0x08008709
 80086a8:	08008791 	.word	0x08008791
 80086ac:	08008791 	.word	0x08008791
 80086b0:	08008791 	.word	0x08008791
 80086b4:	08008791 	.word	0x08008791
 80086b8:	08008791 	.word	0x08008791
 80086bc:	08008791 	.word	0x08008791
 80086c0:	08008791 	.word	0x08008791
 80086c4:	08008719 	.word	0x08008719
 80086c8:	08008791 	.word	0x08008791
 80086cc:	08008791 	.word	0x08008791
 80086d0:	08008791 	.word	0x08008791
 80086d4:	08008791 	.word	0x08008791
 80086d8:	08008791 	.word	0x08008791
 80086dc:	08008791 	.word	0x08008791
 80086e0:	08008791 	.word	0x08008791
 80086e4:	0800871f 	.word	0x0800871f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086e8:	f107 0320 	add.w	r3, r7, #32
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fd fba1 	bl	8005e34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086f6:	e04e      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086f8:	f107 0314 	add.w	r3, r7, #20
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fd fd03 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008706:	e046      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008708:	f107 0308 	add.w	r3, r7, #8
 800870c:	4618      	mov	r0, r3
 800870e:	f7fd fe65 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008716:	e03e      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008718:	4b76      	ldr	r3, [pc, #472]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800871a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800871c:	e03b      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800871e:	4b74      	ldr	r3, [pc, #464]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008724:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008728:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800872a:	4b71      	ldr	r3, [pc, #452]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b02      	cmp	r3, #2
 8008734:	d10c      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8008736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008738:	2b00      	cmp	r3, #0
 800873a:	d109      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800873c:	4b6c      	ldr	r3, [pc, #432]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	08db      	lsrs	r3, r3, #3
 8008742:	f003 0303 	and.w	r3, r3, #3
 8008746:	4a6c      	ldr	r2, [pc, #432]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008748:	fa22 f303 	lsr.w	r3, r2, r3
 800874c:	637b      	str	r3, [r7, #52]	; 0x34
 800874e:	e01e      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008750:	4b67      	ldr	r3, [pc, #412]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800875c:	d106      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008764:	d102      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008766:	4b65      	ldr	r3, [pc, #404]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008768:	637b      	str	r3, [r7, #52]	; 0x34
 800876a:	e010      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800876c:	4b60      	ldr	r3, [pc, #384]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008778:	d106      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008780:	d102      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008782:	4b5f      	ldr	r3, [pc, #380]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008784:	637b      	str	r3, [r7, #52]	; 0x34
 8008786:	e002      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800878c:	e003      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800878e:	e002      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8008790:	2300      	movs	r3, #0
 8008792:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008794:	bf00      	nop
          }
        }
        break;
 8008796:	e2d6      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008798:	4b55      	ldr	r3, [pc, #340]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800879a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800879e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80087a2:	633b      	str	r3, [r7, #48]	; 0x30
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087aa:	d031      	beq.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b2:	d866      	bhi.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80087b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b6:	2bc0      	cmp	r3, #192	; 0xc0
 80087b8:	d027      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80087ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087bc:	2bc0      	cmp	r3, #192	; 0xc0
 80087be:	d860      	bhi.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80087c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c2:	2b80      	cmp	r3, #128	; 0x80
 80087c4:	d019      	beq.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	2b80      	cmp	r3, #128	; 0x80
 80087ca:	d85a      	bhi.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	2b40      	cmp	r3, #64	; 0x40
 80087d6:	d008      	beq.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80087d8:	e053      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087da:	f107 0320 	add.w	r3, r7, #32
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fd fb28 	bl	8005e34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087e8:	e04e      	b.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ea:	f107 0314 	add.w	r3, r7, #20
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fd fc8a 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087f8:	e046      	b.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087fa:	f107 0308 	add.w	r3, r7, #8
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fd fdec 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008808:	e03e      	b.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800880a:	4b3a      	ldr	r3, [pc, #232]	; (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800880c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800880e:	e03b      	b.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008810:	4b37      	ldr	r3, [pc, #220]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008816:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800881a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800881c:	4b34      	ldr	r3, [pc, #208]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b02      	cmp	r3, #2
 8008826:	d10c      	bne.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8008828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800882e:	4b30      	ldr	r3, [pc, #192]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	08db      	lsrs	r3, r3, #3
 8008834:	f003 0303 	and.w	r3, r3, #3
 8008838:	4a2f      	ldr	r2, [pc, #188]	; (80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800883a:	fa22 f303 	lsr.w	r3, r2, r3
 800883e:	637b      	str	r3, [r7, #52]	; 0x34
 8008840:	e01e      	b.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008842:	4b2b      	ldr	r3, [pc, #172]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800884a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800884e:	d106      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8008850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008856:	d102      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008858:	4b28      	ldr	r3, [pc, #160]	; (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800885a:	637b      	str	r3, [r7, #52]	; 0x34
 800885c:	e010      	b.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800885e:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008866:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800886a:	d106      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800886c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008872:	d102      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008874:	4b22      	ldr	r3, [pc, #136]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008876:	637b      	str	r3, [r7, #52]	; 0x34
 8008878:	e002      	b.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800887a:	2300      	movs	r3, #0
 800887c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800887e:	e003      	b.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8008880:	e002      	b.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8008882:	2300      	movs	r3, #0
 8008884:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008886:	bf00      	nop
          }
        }
        break;
 8008888:	e25d      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800888a:	4b19      	ldr	r3, [pc, #100]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800888c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008890:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008894:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	2b00      	cmp	r3, #0
 800889a:	d103      	bne.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800889c:	f7fb fb14 	bl	8003ec8 <HAL_RCC_GetPCLK2Freq>
 80088a0:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80088a2:	e250      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80088a4:	4b12      	ldr	r3, [pc, #72]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088b0:	d10b      	bne.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088b8:	d107      	bne.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ba:	f107 0314 	add.w	r3, r7, #20
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fd fc22 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	637b      	str	r3, [r7, #52]	; 0x34
 80088c8:	e04f      	b.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80088ca:	4b09      	ldr	r3, [pc, #36]	; (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d6:	d115      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088de:	d111      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088e0:	f107 0308 	add.w	r3, r7, #8
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fd fd79 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34
 80088ee:	e03c      	b.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80088f0:	44020c00 	.word	0x44020c00
 80088f4:	00bb8000 	.word	0x00bb8000
 80088f8:	03d09000 	.word	0x03d09000
 80088fc:	003d0900 	.word	0x003d0900
 8008900:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008904:	4b94      	ldr	r3, [pc, #592]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b02      	cmp	r3, #2
 800890e:	d10d      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8008910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008912:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008916:	d109      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008918:	4b8f      	ldr	r3, [pc, #572]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	08db      	lsrs	r3, r3, #3
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	4a8e      	ldr	r2, [pc, #568]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008924:	fa22 f303 	lsr.w	r3, r2, r3
 8008928:	637b      	str	r3, [r7, #52]	; 0x34
 800892a:	e01e      	b.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800892c:	4b8a      	ldr	r3, [pc, #552]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008938:	d106      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008940:	d102      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8008942:	4b87      	ldr	r3, [pc, #540]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008944:	637b      	str	r3, [r7, #52]	; 0x34
 8008946:	e010      	b.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008948:	4b83      	ldr	r3, [pc, #524]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008954:	d106      	bne.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800895c:	d102      	bne.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800895e:	4b81      	ldr	r3, [pc, #516]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008960:	637b      	str	r3, [r7, #52]	; 0x34
 8008962:	e002      	b.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008968:	e1ed      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800896a:	e1ec      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800896c:	4b7a      	ldr	r3, [pc, #488]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800896e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008972:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008976:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	2b00      	cmp	r3, #0
 800897c:	d103      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800897e:	f7fb fab9 	bl	8003ef4 <HAL_RCC_GetPCLK3Freq>
 8008982:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008984:	e1df      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8008986:	4b74      	ldr	r3, [pc, #464]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800898e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008992:	d10b      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8008994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800899a:	d107      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800899c:	f107 0314 	add.w	r3, r7, #20
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fd fbb1 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	637b      	str	r3, [r7, #52]	; 0x34
 80089aa:	e045      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80089ac:	4b6a      	ldr	r3, [pc, #424]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b8:	d10b      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089c0:	d107      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089c2:	f107 0308 	add.w	r3, r7, #8
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fd fd08 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	637b      	str	r3, [r7, #52]	; 0x34
 80089d0:	e032      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80089d2:	4b61      	ldr	r3, [pc, #388]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d10d      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089e4:	d109      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089e6:	4b5c      	ldr	r3, [pc, #368]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	08db      	lsrs	r3, r3, #3
 80089ec:	f003 0303 	and.w	r3, r3, #3
 80089f0:	4a5a      	ldr	r2, [pc, #360]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80089f2:	fa22 f303 	lsr.w	r3, r2, r3
 80089f6:	637b      	str	r3, [r7, #52]	; 0x34
 80089f8:	e01e      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80089fa:	4b57      	ldr	r3, [pc, #348]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a06:	d106      	bne.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a0e:	d102      	bne.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8008a10:	4b53      	ldr	r3, [pc, #332]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008a12:	637b      	str	r3, [r7, #52]	; 0x34
 8008a14:	e010      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8008a16:	4b50      	ldr	r3, [pc, #320]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a22:	d106      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008a2a:	d102      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8008a2c:	4b4d      	ldr	r3, [pc, #308]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a30:	e002      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a36:	e186      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a38:	e185      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008a3a:	4b47      	ldr	r3, [pc, #284]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a40:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8008a44:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d103      	bne.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008a4c:	f7fb fa3c 	bl	8003ec8 <HAL_RCC_GetPCLK2Freq>
 8008a50:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008a52:	e178      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008a54:	4b40      	ldr	r3, [pc, #256]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a60:	d10b      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a68:	d107      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a6a:	f107 0314 	add.w	r3, r7, #20
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fd fb4a 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	637b      	str	r3, [r7, #52]	; 0x34
 8008a78:	e045      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8008a7a:	4b37      	ldr	r3, [pc, #220]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a86:	d10b      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a8e:	d107      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a90:	f107 0308 	add.w	r3, r7, #8
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fd fca1 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a9e:	e032      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8008aa0:	4b2d      	ldr	r3, [pc, #180]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0302 	and.w	r3, r3, #2
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d10d      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008ab2:	d109      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ab4:	4b28      	ldr	r3, [pc, #160]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	08db      	lsrs	r3, r3, #3
 8008aba:	f003 0303 	and.w	r3, r3, #3
 8008abe:	4a27      	ldr	r2, [pc, #156]	; (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ac6:	e01e      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8008ac8:	4b23      	ldr	r3, [pc, #140]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad4:	d106      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008adc:	d102      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8008ade:	4b20      	ldr	r3, [pc, #128]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ae2:	e010      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8008ae4:	4b1c      	ldr	r3, [pc, #112]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008af0:	d106      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008af8:	d102      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8008afa:	4b1a      	ldr	r3, [pc, #104]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008afc:	637b      	str	r3, [r7, #52]	; 0x34
 8008afe:	e002      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b04:	e11f      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b06:	e11e      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008b08:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008b0e:	f003 0303 	and.w	r3, r3, #3
 8008b12:	633b      	str	r3, [r7, #48]	; 0x30
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d85f      	bhi.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8008b1a:	a201      	add	r2, pc, #4	; (adr r2, 8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008b31 	.word	0x08008b31
 8008b24:	08008b39 	.word	0x08008b39
 8008b28:	08008b49 	.word	0x08008b49
 8008b2c:	08008b69 	.word	0x08008b69

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8008b30:	f7fb f998 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8008b34:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008b36:	e053      	b.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b38:	f107 0320 	add.w	r3, r7, #32
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fd f979 	bl	8005e34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b46:	e04b      	b.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b48:	f107 0314 	add.w	r3, r7, #20
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fd fadb 	bl	8006108 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b56:	e043      	b.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008b58:	44020c00 	.word	0x44020c00
 8008b5c:	03d09000 	.word	0x03d09000
 8008b60:	003d0900 	.word	0x003d0900
 8008b64:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b68:	4b79      	ldr	r3, [pc, #484]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008b6e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008b72:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b74:	4b76      	ldr	r3, [pc, #472]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0302 	and.w	r3, r3, #2
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d10c      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8008b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d109      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b86:	4b72      	ldr	r3, [pc, #456]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	08db      	lsrs	r3, r3, #3
 8008b8c:	f003 0303 	and.w	r3, r3, #3
 8008b90:	4a70      	ldr	r2, [pc, #448]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8008b92:	fa22 f303 	lsr.w	r3, r2, r3
 8008b96:	637b      	str	r3, [r7, #52]	; 0x34
 8008b98:	e01e      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b9a:	4b6d      	ldr	r3, [pc, #436]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ba6:	d106      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bae:	d102      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008bb0:	4b69      	ldr	r3, [pc, #420]	; (8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8008bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8008bb4:	e010      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bb6:	4b66      	ldr	r3, [pc, #408]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bc2:	d106      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8008bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bca:	d102      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008bcc:	4b63      	ldr	r3, [pc, #396]	; (8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8008bce:	637b      	str	r3, [r7, #52]	; 0x34
 8008bd0:	e002      	b.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008bd6:	e003      	b.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008bd8:	e002      	b.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008bde:	bf00      	nop
          }
        }
        break;
 8008be0:	e0b1      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008be2:	4b5b      	ldr	r3, [pc, #364]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008be8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008bec:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008bee:	4b58      	ldr	r3, [pc, #352]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008bf4:	f003 0302 	and.w	r3, r3, #2
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d106      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d103      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8008c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c06:	637b      	str	r3, [r7, #52]	; 0x34
 8008c08:	e01f      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8008c0a:	4b51      	ldr	r3, [pc, #324]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c18:	d106      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1c:	2b40      	cmp	r3, #64	; 0x40
 8008c1e:	d103      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8008c20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008c24:	637b      	str	r3, [r7, #52]	; 0x34
 8008c26:	e010      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8008c28:	4b49      	ldr	r3, [pc, #292]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c34:	d106      	bne.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	2b80      	cmp	r3, #128	; 0x80
 8008c3a:	d103      	bne.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8008c3c:	f248 0312 	movw	r3, #32786	; 0x8012
 8008c40:	637b      	str	r3, [r7, #52]	; 0x34
 8008c42:	e002      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8008c44:	2300      	movs	r3, #0
 8008c46:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008c48:	e07d      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c4a:	e07c      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008c4c:	4b40      	ldr	r3, [pc, #256]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c56:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008c58:	4b3d      	ldr	r3, [pc, #244]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c64:	d105      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d102      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8008c6c:	4b3c      	ldr	r3, [pc, #240]	; (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c70:	e031      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008c72:	4b37      	ldr	r3, [pc, #220]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c7e:	d10a      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	2b10      	cmp	r3, #16
 8008c84:	d107      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c86:	f107 0320 	add.w	r3, r7, #32
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fd f8d2 	bl	8005e34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	637b      	str	r3, [r7, #52]	; 0x34
 8008c94:	e01f      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8008c96:	4b2e      	ldr	r3, [pc, #184]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c9c:	f003 0302 	and.w	r3, r3, #2
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d106      	bne.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca6:	2b20      	cmp	r3, #32
 8008ca8:	d103      	bne.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8008caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cae:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb0:	e011      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008cb2:	4b27      	ldr	r3, [pc, #156]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cc0:	d106      	bne.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	2b30      	cmp	r3, #48	; 0x30
 8008cc6:	d103      	bne.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8008cc8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cce:	e002      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008cd4:	e037      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cd6:	e036      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008cd8:	4b1d      	ldr	r3, [pc, #116]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008cda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008cde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ce2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce6:	2b10      	cmp	r3, #16
 8008ce8:	d107      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cea:	f107 0320 	add.w	r3, r7, #32
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fd f8a0 	bl	8005e34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008cf8:	e025      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8008cfa:	4b15      	ldr	r3, [pc, #84]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d06:	d10a      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8008d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0a:	2b20      	cmp	r3, #32
 8008d0c:	d107      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d0e:	f107 0308 	add.w	r3, r7, #8
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fd fb62 	bl	80063dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d1c:	e00f      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008d1e:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d2a:	d105      	bne.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2e:	2b30      	cmp	r3, #48	; 0x30
 8008d30:	d102      	bne.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8008d32:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008d34:	637b      	str	r3, [r7, #52]	; 0x34
 8008d36:	e002      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8008d3c:	e003      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d3e:	e002      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8008d40:	2300      	movs	r3, #0
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d44:	bf00      	nop
    }
  }

  return (frequency);
 8008d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	373c      	adds	r7, #60	; 0x3c
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd90      	pop	{r4, r7, pc}
 8008d50:	44020c00 	.word	0x44020c00
 8008d54:	03d09000 	.word	0x03d09000
 8008d58:	003d0900 	.word	0x003d0900
 8008d5c:	007a1200 	.word	0x007a1200
 8008d60:	02dc6c00 	.word	0x02dc6c00

08008d64 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008d6c:	4b48      	ldr	r3, [pc, #288]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a47      	ldr	r2, [pc, #284]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008d72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d78:	f7f8 fa6c 	bl	8001254 <HAL_GetTick>
 8008d7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d7e:	e008      	b.n	8008d92 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d80:	f7f8 fa68 	bl	8001254 <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d901      	bls.n	8008d92 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e07a      	b.n	8008e88 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d92:	4b3f      	ldr	r3, [pc, #252]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1f0      	bne.n	8008d80 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008d9e:	4b3c      	ldr	r3, [pc, #240]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	6811      	ldr	r1, [r2, #0]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	6852      	ldr	r2, [r2, #4]
 8008db2:	0212      	lsls	r2, r2, #8
 8008db4:	430a      	orrs	r2, r1
 8008db6:	4936      	ldr	r1, [pc, #216]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	025b      	lsls	r3, r3, #9
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	431a      	orrs	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	041b      	lsls	r3, r3, #16
 8008dda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008dde:	431a      	orrs	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	061b      	lsls	r3, r3, #24
 8008de8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008dec:	4928      	ldr	r1, [pc, #160]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008df2:	4b27      	ldr	r3, [pc, #156]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df6:	f023 020c 	bic.w	r2, r3, #12
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	4924      	ldr	r1, [pc, #144]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008e04:	4b22      	ldr	r3, [pc, #136]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e08:	f023 0220 	bic.w	r2, r3, #32
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	491f      	ldr	r1, [pc, #124]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008e16:	4b1e      	ldr	r3, [pc, #120]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	491c      	ldr	r1, [pc, #112]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e20:	4313      	orrs	r3, r2
 8008e22:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008e24:	4b1a      	ldr	r3, [pc, #104]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e28:	4a19      	ldr	r2, [pc, #100]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e2a:	f023 0310 	bic.w	r3, r3, #16
 8008e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008e30:	4b17      	ldr	r3, [pc, #92]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e38:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	6a12      	ldr	r2, [r2, #32]
 8008e40:	00d2      	lsls	r2, r2, #3
 8008e42:	4913      	ldr	r1, [pc, #76]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e44:	4313      	orrs	r3, r2
 8008e46:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008e48:	4b11      	ldr	r3, [pc, #68]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	4a10      	ldr	r2, [pc, #64]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e4e:	f043 0310 	orr.w	r3, r3, #16
 8008e52:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008e54:	4b0e      	ldr	r3, [pc, #56]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a0d      	ldr	r2, [pc, #52]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e5e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e60:	f7f8 f9f8 	bl	8001254 <HAL_GetTick>
 8008e64:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e66:	e008      	b.n	8008e7a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e68:	f7f8 f9f4 	bl	8001254 <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d901      	bls.n	8008e7a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e006      	b.n	8008e88 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e7a:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <RCCEx_PLL2_Config+0x12c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0f0      	beq.n	8008e68 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008e86:	2300      	movs	r3, #0

}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	44020c00 	.word	0x44020c00

08008e94 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008e9c:	4b48      	ldr	r3, [pc, #288]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a47      	ldr	r2, [pc, #284]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ea6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ea8:	f7f8 f9d4 	bl	8001254 <HAL_GetTick>
 8008eac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008eae:	e008      	b.n	8008ec2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008eb0:	f7f8 f9d0 	bl	8001254 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d901      	bls.n	8008ec2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e07a      	b.n	8008fb8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ec2:	4b3f      	ldr	r3, [pc, #252]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1f0      	bne.n	8008eb0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008ece:	4b3c      	ldr	r3, [pc, #240]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008ed6:	f023 0303 	bic.w	r3, r3, #3
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	6811      	ldr	r1, [r2, #0]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	6852      	ldr	r2, [r2, #4]
 8008ee2:	0212      	lsls	r2, r2, #8
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	4936      	ldr	r1, [pc, #216]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	630b      	str	r3, [r1, #48]	; 0x30
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	025b      	lsls	r3, r3, #9
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	431a      	orrs	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	041b      	lsls	r3, r3, #16
 8008f0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	695b      	ldr	r3, [r3, #20]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	061b      	lsls	r3, r3, #24
 8008f18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f1c:	4928      	ldr	r1, [pc, #160]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f22:	4b27      	ldr	r3, [pc, #156]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f26:	f023 020c 	bic.w	r2, r3, #12
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	4924      	ldr	r1, [pc, #144]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008f34:	4b22      	ldr	r3, [pc, #136]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f38:	f023 0220 	bic.w	r2, r3, #32
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	491f      	ldr	r1, [pc, #124]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008f46:	4b1e      	ldr	r3, [pc, #120]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4e:	491c      	ldr	r1, [pc, #112]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f50:	4313      	orrs	r3, r2
 8008f52:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008f54:	4b1a      	ldr	r3, [pc, #104]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f58:	4a19      	ldr	r2, [pc, #100]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f5a:	f023 0310 	bic.w	r3, r3, #16
 8008f5e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008f60:	4b17      	ldr	r3, [pc, #92]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f68:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	6a12      	ldr	r2, [r2, #32]
 8008f70:	00d2      	lsls	r2, r2, #3
 8008f72:	4913      	ldr	r1, [pc, #76]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f74:	4313      	orrs	r3, r2
 8008f76:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008f78:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7c:	4a10      	ldr	r2, [pc, #64]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f7e:	f043 0310 	orr.w	r3, r3, #16
 8008f82:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008f84:	4b0e      	ldr	r3, [pc, #56]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a0d      	ldr	r2, [pc, #52]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f8e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f90:	f7f8 f960 	bl	8001254 <HAL_GetTick>
 8008f94:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f96:	e008      	b.n	8008faa <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008f98:	f7f8 f95c 	bl	8001254 <HAL_GetTick>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d901      	bls.n	8008faa <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e006      	b.n	8008fb8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008faa:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <RCCEx_PLL3_Config+0x12c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d0f0      	beq.n	8008f98 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	44020c00 	.word	0x44020c00

08008fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e042      	b.n	800905c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d106      	bne.n	8008fee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7f7 fed7 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2224      	movs	r2, #36	; 0x24
 8008ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f022 0201 	bic.w	r2, r2, #1
 8009004:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fa16 	bl	8009440 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f825 	bl	8009064 <UART_SetConfig>
 800901a:	4603      	mov	r3, r0
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e01b      	b.n	800905c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fa95 	bl	8009584 <UART_CheckIdleState>
 800905a:	4603      	mov	r3, r0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009068:	b094      	sub	sp, #80	; 0x50
 800906a:	af00      	add	r7, sp, #0
 800906c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	4b78      	ldr	r3, [pc, #480]	; (800925c <UART_SetConfig+0x1f8>)
 800907a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800907c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907e:	689a      	ldr	r2, [r3, #8]
 8009080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	431a      	orrs	r2, r3
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	431a      	orrs	r2, r3
 800908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908e:	69db      	ldr	r3, [r3, #28]
 8009090:	4313      	orrs	r3, r2
 8009092:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4971      	ldr	r1, [pc, #452]	; (8009260 <UART_SetConfig+0x1fc>)
 800909c:	4019      	ands	r1, r3
 800909e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a4:	430b      	orrs	r3, r1
 80090a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80090b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b4:	68d9      	ldr	r1, [r3, #12]
 80090b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	ea40 0301 	orr.w	r3, r0, r1
 80090be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	4b64      	ldr	r3, [pc, #400]	; (800925c <UART_SetConfig+0x1f8>)
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d009      	beq.n	80090e4 <UART_SetConfig+0x80>
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	4b63      	ldr	r3, [pc, #396]	; (8009264 <UART_SetConfig+0x200>)
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d004      	beq.n	80090e4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090dc:	6a1a      	ldr	r2, [r3, #32]
 80090de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e0:	4313      	orrs	r3, r2
 80090e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80090ee:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090f8:	430b      	orrs	r3, r1
 80090fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009102:	f023 000f 	bic.w	r0, r3, #15
 8009106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009108:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800910a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	ea40 0301 	orr.w	r3, r0, r1
 8009112:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	4b53      	ldr	r3, [pc, #332]	; (8009268 <UART_SetConfig+0x204>)
 800911a:	429a      	cmp	r2, r3
 800911c:	d102      	bne.n	8009124 <UART_SetConfig+0xc0>
 800911e:	2301      	movs	r3, #1
 8009120:	64bb      	str	r3, [r7, #72]	; 0x48
 8009122:	e066      	b.n	80091f2 <UART_SetConfig+0x18e>
 8009124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	4b50      	ldr	r3, [pc, #320]	; (800926c <UART_SetConfig+0x208>)
 800912a:	429a      	cmp	r2, r3
 800912c:	d102      	bne.n	8009134 <UART_SetConfig+0xd0>
 800912e:	2302      	movs	r3, #2
 8009130:	64bb      	str	r3, [r7, #72]	; 0x48
 8009132:	e05e      	b.n	80091f2 <UART_SetConfig+0x18e>
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	4b4d      	ldr	r3, [pc, #308]	; (8009270 <UART_SetConfig+0x20c>)
 800913a:	429a      	cmp	r2, r3
 800913c:	d102      	bne.n	8009144 <UART_SetConfig+0xe0>
 800913e:	2304      	movs	r3, #4
 8009140:	64bb      	str	r3, [r7, #72]	; 0x48
 8009142:	e056      	b.n	80091f2 <UART_SetConfig+0x18e>
 8009144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	4b4a      	ldr	r3, [pc, #296]	; (8009274 <UART_SetConfig+0x210>)
 800914a:	429a      	cmp	r2, r3
 800914c:	d102      	bne.n	8009154 <UART_SetConfig+0xf0>
 800914e:	2308      	movs	r3, #8
 8009150:	64bb      	str	r3, [r7, #72]	; 0x48
 8009152:	e04e      	b.n	80091f2 <UART_SetConfig+0x18e>
 8009154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	4b47      	ldr	r3, [pc, #284]	; (8009278 <UART_SetConfig+0x214>)
 800915a:	429a      	cmp	r2, r3
 800915c:	d102      	bne.n	8009164 <UART_SetConfig+0x100>
 800915e:	2310      	movs	r3, #16
 8009160:	64bb      	str	r3, [r7, #72]	; 0x48
 8009162:	e046      	b.n	80091f2 <UART_SetConfig+0x18e>
 8009164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	4b44      	ldr	r3, [pc, #272]	; (800927c <UART_SetConfig+0x218>)
 800916a:	429a      	cmp	r2, r3
 800916c:	d102      	bne.n	8009174 <UART_SetConfig+0x110>
 800916e:	2320      	movs	r3, #32
 8009170:	64bb      	str	r3, [r7, #72]	; 0x48
 8009172:	e03e      	b.n	80091f2 <UART_SetConfig+0x18e>
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	4b41      	ldr	r3, [pc, #260]	; (8009280 <UART_SetConfig+0x21c>)
 800917a:	429a      	cmp	r2, r3
 800917c:	d102      	bne.n	8009184 <UART_SetConfig+0x120>
 800917e:	2340      	movs	r3, #64	; 0x40
 8009180:	64bb      	str	r3, [r7, #72]	; 0x48
 8009182:	e036      	b.n	80091f2 <UART_SetConfig+0x18e>
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	4b3e      	ldr	r3, [pc, #248]	; (8009284 <UART_SetConfig+0x220>)
 800918a:	429a      	cmp	r2, r3
 800918c:	d102      	bne.n	8009194 <UART_SetConfig+0x130>
 800918e:	2380      	movs	r3, #128	; 0x80
 8009190:	64bb      	str	r3, [r7, #72]	; 0x48
 8009192:	e02e      	b.n	80091f2 <UART_SetConfig+0x18e>
 8009194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	4b3b      	ldr	r3, [pc, #236]	; (8009288 <UART_SetConfig+0x224>)
 800919a:	429a      	cmp	r2, r3
 800919c:	d103      	bne.n	80091a6 <UART_SetConfig+0x142>
 800919e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80091a4:	e025      	b.n	80091f2 <UART_SetConfig+0x18e>
 80091a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	4b38      	ldr	r3, [pc, #224]	; (800928c <UART_SetConfig+0x228>)
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d103      	bne.n	80091b8 <UART_SetConfig+0x154>
 80091b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80091b6:	e01c      	b.n	80091f2 <UART_SetConfig+0x18e>
 80091b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	4b34      	ldr	r3, [pc, #208]	; (8009290 <UART_SetConfig+0x22c>)
 80091be:	429a      	cmp	r2, r3
 80091c0:	d103      	bne.n	80091ca <UART_SetConfig+0x166>
 80091c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80091c8:	e013      	b.n	80091f2 <UART_SetConfig+0x18e>
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	4b31      	ldr	r3, [pc, #196]	; (8009294 <UART_SetConfig+0x230>)
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d103      	bne.n	80091dc <UART_SetConfig+0x178>
 80091d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80091da:	e00a      	b.n	80091f2 <UART_SetConfig+0x18e>
 80091dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	4b1e      	ldr	r3, [pc, #120]	; (800925c <UART_SetConfig+0x1f8>)
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d103      	bne.n	80091ee <UART_SetConfig+0x18a>
 80091e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80091ec:	e001      	b.n	80091f2 <UART_SetConfig+0x18e>
 80091ee:	2300      	movs	r3, #0
 80091f0:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	4b19      	ldr	r3, [pc, #100]	; (800925c <UART_SetConfig+0x1f8>)
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d005      	beq.n	8009208 <UART_SetConfig+0x1a4>
 80091fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	4b18      	ldr	r3, [pc, #96]	; (8009264 <UART_SetConfig+0x200>)
 8009202:	429a      	cmp	r2, r3
 8009204:	f040 8094 	bne.w	8009330 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800920a:	2200      	movs	r2, #0
 800920c:	623b      	str	r3, [r7, #32]
 800920e:	627a      	str	r2, [r7, #36]	; 0x24
 8009210:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009214:	f7fd fa4c 	bl	80066b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009218:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800921a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 80f7 	beq.w	8009410 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009226:	4a1c      	ldr	r2, [pc, #112]	; (8009298 <UART_SetConfig+0x234>)
 8009228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800922c:	461a      	mov	r2, r3
 800922e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009230:	fbb3 f3f2 	udiv	r3, r3, r2
 8009234:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	4613      	mov	r3, r2
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	4413      	add	r3, r2
 8009240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009242:	429a      	cmp	r2, r3
 8009244:	d305      	bcc.n	8009252 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800924c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800924e:	429a      	cmp	r2, r3
 8009250:	d924      	bls.n	800929c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009258:	e069      	b.n	800932e <UART_SetConfig+0x2ca>
 800925a:	bf00      	nop
 800925c:	44002400 	.word	0x44002400
 8009260:	cfff69f3 	.word	0xcfff69f3
 8009264:	54002400 	.word	0x54002400
 8009268:	40013800 	.word	0x40013800
 800926c:	40004400 	.word	0x40004400
 8009270:	40004800 	.word	0x40004800
 8009274:	40004c00 	.word	0x40004c00
 8009278:	40005000 	.word	0x40005000
 800927c:	40006400 	.word	0x40006400
 8009280:	40007800 	.word	0x40007800
 8009284:	40007c00 	.word	0x40007c00
 8009288:	40008000 	.word	0x40008000
 800928c:	40006800 	.word	0x40006800
 8009290:	40006c00 	.word	0x40006c00
 8009294:	40008400 	.word	0x40008400
 8009298:	08009f48 	.word	0x08009f48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800929c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800929e:	2200      	movs	r2, #0
 80092a0:	61bb      	str	r3, [r7, #24]
 80092a2:	61fa      	str	r2, [r7, #28]
 80092a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	4a64      	ldr	r2, [pc, #400]	; (800943c <UART_SetConfig+0x3d8>)
 80092aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	2200      	movs	r2, #0
 80092b2:	613b      	str	r3, [r7, #16]
 80092b4:	617a      	str	r2, [r7, #20]
 80092b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80092ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80092be:	f7f6 ffe5 	bl	800028c <__aeabi_uldivmod>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	4610      	mov	r0, r2
 80092c8:	4619      	mov	r1, r3
 80092ca:	f04f 0200 	mov.w	r2, #0
 80092ce:	f04f 0300 	mov.w	r3, #0
 80092d2:	020b      	lsls	r3, r1, #8
 80092d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092d8:	0202      	lsls	r2, r0, #8
 80092da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092dc:	6849      	ldr	r1, [r1, #4]
 80092de:	0849      	lsrs	r1, r1, #1
 80092e0:	2000      	movs	r0, #0
 80092e2:	460c      	mov	r4, r1
 80092e4:	4605      	mov	r5, r0
 80092e6:	eb12 0804 	adds.w	r8, r2, r4
 80092ea:	eb43 0905 	adc.w	r9, r3, r5
 80092ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	60bb      	str	r3, [r7, #8]
 80092f6:	60fa      	str	r2, [r7, #12]
 80092f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092fc:	4640      	mov	r0, r8
 80092fe:	4649      	mov	r1, r9
 8009300:	f7f6 ffc4 	bl	800028c <__aeabi_uldivmod>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4613      	mov	r3, r2
 800930a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800930c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009312:	d308      	bcc.n	8009326 <UART_SetConfig+0x2c2>
 8009314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800931a:	d204      	bcs.n	8009326 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009322:	60da      	str	r2, [r3, #12]
 8009324:	e003      	b.n	800932e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800932c:	e070      	b.n	8009410 <UART_SetConfig+0x3ac>
 800932e:	e06f      	b.n	8009410 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009338:	d13c      	bne.n	80093b4 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800933a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800933c:	2200      	movs	r2, #0
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	607a      	str	r2, [r7, #4]
 8009342:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009346:	f7fd f9b3 	bl	80066b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800934a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800934c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800934e:	2b00      	cmp	r3, #0
 8009350:	d05e      	beq.n	8009410 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009356:	4a39      	ldr	r2, [pc, #228]	; (800943c <UART_SetConfig+0x3d8>)
 8009358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800935c:	461a      	mov	r2, r3
 800935e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009360:	fbb3 f3f2 	udiv	r3, r3, r2
 8009364:	005a      	lsls	r2, r3, #1
 8009366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	085b      	lsrs	r3, r3, #1
 800936c:	441a      	add	r2, r3
 800936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	fbb2 f3f3 	udiv	r3, r2, r3
 8009376:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800937a:	2b0f      	cmp	r3, #15
 800937c:	d916      	bls.n	80093ac <UART_SetConfig+0x348>
 800937e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009384:	d212      	bcs.n	80093ac <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009388:	b29b      	uxth	r3, r3
 800938a:	f023 030f 	bic.w	r3, r3, #15
 800938e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009392:	085b      	lsrs	r3, r3, #1
 8009394:	b29b      	uxth	r3, r3
 8009396:	f003 0307 	and.w	r3, r3, #7
 800939a:	b29a      	uxth	r2, r3
 800939c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800939e:	4313      	orrs	r3, r2
 80093a0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80093a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80093a8:	60da      	str	r2, [r3, #12]
 80093aa:	e031      	b.n	8009410 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80093b2:	e02d      	b.n	8009410 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80093b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093b6:	2200      	movs	r2, #0
 80093b8:	469a      	mov	sl, r3
 80093ba:	4693      	mov	fp, r2
 80093bc:	4650      	mov	r0, sl
 80093be:	4659      	mov	r1, fp
 80093c0:	f7fd f976 	bl	80066b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80093c4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80093c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d021      	beq.n	8009410 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d0:	4a1a      	ldr	r2, [pc, #104]	; (800943c <UART_SetConfig+0x3d8>)
 80093d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093d6:	461a      	mov	r2, r3
 80093d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093da:	fbb3 f2f2 	udiv	r2, r3, r2
 80093de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	085b      	lsrs	r3, r3, #1
 80093e4:	441a      	add	r2, r3
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f2:	2b0f      	cmp	r3, #15
 80093f4:	d909      	bls.n	800940a <UART_SetConfig+0x3a6>
 80093f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093fc:	d205      	bcs.n	800940a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009400:	b29a      	uxth	r2, r3
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	60da      	str	r2, [r3, #12]
 8009408:	e002      	b.n	8009410 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009412:	2201      	movs	r2, #1
 8009414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941a:	2201      	movs	r2, #1
 800941c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009422:	2200      	movs	r2, #0
 8009424:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	2200      	movs	r2, #0
 800942a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800942c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009430:	4618      	mov	r0, r3
 8009432:	3750      	adds	r7, #80	; 0x50
 8009434:	46bd      	mov	sp, r7
 8009436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800943a:	bf00      	nop
 800943c:	08009f48 	.word	0x08009f48

08009440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00a      	beq.n	800946a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00a      	beq.n	80094ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b2:	f003 0304 	and.w	r3, r3, #4
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00a      	beq.n	80094d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	430a      	orrs	r2, r1
 80094ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d4:	f003 0310 	and.w	r3, r3, #16
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00a      	beq.n	80094f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	430a      	orrs	r2, r1
 80094f0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f6:	f003 0320 	and.w	r3, r3, #32
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00a      	beq.n	8009514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	430a      	orrs	r2, r1
 8009512:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951c:	2b00      	cmp	r3, #0
 800951e:	d01a      	beq.n	8009556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	430a      	orrs	r2, r1
 8009534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800953a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800953e:	d10a      	bne.n	8009556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	430a      	orrs	r2, r1
 8009554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00a      	beq.n	8009578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	430a      	orrs	r2, r1
 8009576:	605a      	str	r2, [r3, #4]
  }
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b098      	sub	sp, #96	; 0x60
 8009588:	af02      	add	r7, sp, #8
 800958a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009594:	f7f7 fe5e 	bl	8001254 <HAL_GetTick>
 8009598:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0308 	and.w	r3, r3, #8
 80095a4:	2b08      	cmp	r3, #8
 80095a6:	d12f      	bne.n	8009608 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095b0:	2200      	movs	r2, #0
 80095b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f88e 	bl	80096d8 <UART_WaitOnFlagUntilTimeout>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d022      	beq.n	8009608 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	e853 3f00 	ldrex	r3, [r3]
 80095ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095d6:	653b      	str	r3, [r7, #80]	; 0x50
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095e0:	647b      	str	r3, [r7, #68]	; 0x44
 80095e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095e8:	e841 2300 	strex	r3, r2, [r1]
 80095ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e6      	bne.n	80095c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e063      	b.n	80096d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 0304 	and.w	r3, r3, #4
 8009612:	2b04      	cmp	r3, #4
 8009614:	d149      	bne.n	80096aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009616:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800961e:	2200      	movs	r2, #0
 8009620:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f857 	bl	80096d8 <UART_WaitOnFlagUntilTimeout>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d03c      	beq.n	80096aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	623b      	str	r3, [r7, #32]
   return(result);
 800963e:	6a3b      	ldr	r3, [r7, #32]
 8009640:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009644:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800964e:	633b      	str	r3, [r7, #48]	; 0x30
 8009650:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800965c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e6      	bne.n	8009630 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3308      	adds	r3, #8
 8009668:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	e853 3f00 	ldrex	r3, [r3]
 8009670:	60fb      	str	r3, [r7, #12]
   return(result);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f023 0301 	bic.w	r3, r3, #1
 8009678:	64bb      	str	r3, [r7, #72]	; 0x48
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3308      	adds	r3, #8
 8009680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009682:	61fa      	str	r2, [r7, #28]
 8009684:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009686:	69b9      	ldr	r1, [r7, #24]
 8009688:	69fa      	ldr	r2, [r7, #28]
 800968a:	e841 2300 	strex	r3, r2, [r1]
 800968e:	617b      	str	r3, [r7, #20]
   return(result);
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1e5      	bne.n	8009662 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2220      	movs	r2, #32
 800969a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e012      	b.n	80096d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3758      	adds	r7, #88	; 0x58
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	4613      	mov	r3, r2
 80096e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096e8:	e049      	b.n	800977e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f0:	d045      	beq.n	800977e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096f2:	f7f7 fdaf 	bl	8001254 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	69ba      	ldr	r2, [r7, #24]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d302      	bcc.n	8009708 <UART_WaitOnFlagUntilTimeout+0x30>
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e048      	b.n	800979e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 0304 	and.w	r3, r3, #4
 8009716:	2b00      	cmp	r3, #0
 8009718:	d031      	beq.n	800977e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	f003 0308 	and.w	r3, r3, #8
 8009724:	2b08      	cmp	r3, #8
 8009726:	d110      	bne.n	800974a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2208      	movs	r2, #8
 800972e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f000 f838 	bl	80097a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2208      	movs	r2, #8
 800973a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e029      	b.n	800979e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	69db      	ldr	r3, [r3, #28]
 8009750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009758:	d111      	bne.n	800977e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009762:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 f81e 	bl	80097a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2220      	movs	r2, #32
 800976e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e00f      	b.n	800979e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	69da      	ldr	r2, [r3, #28]
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	4013      	ands	r3, r2
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	429a      	cmp	r2, r3
 800978c:	bf0c      	ite	eq
 800978e:	2301      	moveq	r3, #1
 8009790:	2300      	movne	r3, #0
 8009792:	b2db      	uxtb	r3, r3
 8009794:	461a      	mov	r2, r3
 8009796:	79fb      	ldrb	r3, [r7, #7]
 8009798:	429a      	cmp	r2, r3
 800979a:	d0a6      	beq.n	80096ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b095      	sub	sp, #84	; 0x54
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b6:	e853 3f00 	ldrex	r3, [r3]
 80097ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	461a      	mov	r2, r3
 80097ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097cc:	643b      	str	r3, [r7, #64]	; 0x40
 80097ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097d4:	e841 2300 	strex	r3, r2, [r1]
 80097d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1e6      	bne.n	80097ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3308      	adds	r3, #8
 80097e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	e853 3f00 	ldrex	r3, [r3]
 80097ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097f6:	f023 0301 	bic.w	r3, r3, #1
 80097fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	3308      	adds	r3, #8
 8009802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009804:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800980a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800980c:	e841 2300 	strex	r3, r2, [r1]
 8009810:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1e3      	bne.n	80097e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800981c:	2b01      	cmp	r3, #1
 800981e:	d118      	bne.n	8009852 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	e853 3f00 	ldrex	r3, [r3]
 800982c:	60bb      	str	r3, [r7, #8]
   return(result);
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f023 0310 	bic.w	r3, r3, #16
 8009834:	647b      	str	r3, [r7, #68]	; 0x44
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	461a      	mov	r2, r3
 800983c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800983e:	61bb      	str	r3, [r7, #24]
 8009840:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009842:	6979      	ldr	r1, [r7, #20]
 8009844:	69ba      	ldr	r2, [r7, #24]
 8009846:	e841 2300 	strex	r3, r2, [r1]
 800984a:	613b      	str	r3, [r7, #16]
   return(result);
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1e6      	bne.n	8009820 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2220      	movs	r2, #32
 8009856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009866:	bf00      	nop
 8009868:	3754      	adds	r7, #84	; 0x54
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009872:	b480      	push	{r7}
 8009874:	b085      	sub	sp, #20
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009880:	2b01      	cmp	r3, #1
 8009882:	d101      	bne.n	8009888 <HAL_UARTEx_DisableFifoMode+0x16>
 8009884:	2302      	movs	r3, #2
 8009886:	e027      	b.n	80098d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2224      	movs	r2, #36	; 0x24
 8009894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f022 0201 	bic.w	r2, r2, #1
 80098ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80098b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2220      	movs	r2, #32
 80098ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d101      	bne.n	80098fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098f8:	2302      	movs	r3, #2
 80098fa:	e02d      	b.n	8009958 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2224      	movs	r2, #36	; 0x24
 8009908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f022 0201 	bic.w	r2, r2, #1
 8009922:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	430a      	orrs	r2, r1
 8009936:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f84f 	bl	80099dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2220      	movs	r2, #32
 800994a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009970:	2b01      	cmp	r3, #1
 8009972:	d101      	bne.n	8009978 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009974:	2302      	movs	r3, #2
 8009976:	e02d      	b.n	80099d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2224      	movs	r2, #36	; 0x24
 8009984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f022 0201 	bic.w	r2, r2, #1
 800999e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	430a      	orrs	r2, r1
 80099b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f811 	bl	80099dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d108      	bne.n	80099fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099fc:	e031      	b.n	8009a62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099fe:	2308      	movs	r3, #8
 8009a00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a02:	2308      	movs	r3, #8
 8009a04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	0e5b      	lsrs	r3, r3, #25
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	f003 0307 	and.w	r3, r3, #7
 8009a14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	0f5b      	lsrs	r3, r3, #29
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	f003 0307 	and.w	r3, r3, #7
 8009a24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
 8009a28:	7b3a      	ldrb	r2, [r7, #12]
 8009a2a:	4911      	ldr	r1, [pc, #68]	; (8009a70 <UARTEx_SetNbDataToProcess+0x94>)
 8009a2c:	5c8a      	ldrb	r2, [r1, r2]
 8009a2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a32:	7b3a      	ldrb	r2, [r7, #12]
 8009a34:	490f      	ldr	r1, [pc, #60]	; (8009a74 <UARTEx_SetNbDataToProcess+0x98>)
 8009a36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a38:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	7b7a      	ldrb	r2, [r7, #13]
 8009a48:	4909      	ldr	r1, [pc, #36]	; (8009a70 <UARTEx_SetNbDataToProcess+0x94>)
 8009a4a:	5c8a      	ldrb	r2, [r1, r2]
 8009a4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a50:	7b7a      	ldrb	r2, [r7, #13]
 8009a52:	4908      	ldr	r1, [pc, #32]	; (8009a74 <UARTEx_SetNbDataToProcess+0x98>)
 8009a54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a56:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a62:	bf00      	nop
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	08009f60 	.word	0x08009f60
 8009a74:	08009f68 	.word	0x08009f68

08009a78 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b08b      	sub	sp, #44	; 0x2c
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	fa93 f3a3 	rbit	r3, r3
 8009a92:	613b      	str	r3, [r7, #16]
  return result;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009a9e:	2320      	movs	r3, #32
 8009aa0:	e003      	b.n	8009aaa <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	fab3 f383 	clz	r3, r3
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	2103      	movs	r1, #3
 8009aae:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab2:	43db      	mvns	r3, r3
 8009ab4:	401a      	ands	r2, r3
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	fa93 f3a3 	rbit	r3, r3
 8009ac0:	61fb      	str	r3, [r7, #28]
  return result;
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d101      	bne.n	8009ad0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009acc:	2320      	movs	r3, #32
 8009ace:	e003      	b.n	8009ad8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad2:	fab3 f383 	clz	r3, r3
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	601a      	str	r2, [r3, #0]
}
 8009ae6:	bf00      	nop
 8009ae8:	372c      	adds	r7, #44	; 0x2c
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009af2:	b480      	push	{r7}
 8009af4:	b085      	sub	sp, #20
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	60f8      	str	r0, [r7, #12]
 8009afa:	60b9      	str	r1, [r7, #8]
 8009afc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	685a      	ldr	r2, [r3, #4]
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	43db      	mvns	r3, r3
 8009b06:	401a      	ands	r2, r3
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	6879      	ldr	r1, [r7, #4]
 8009b0c:	fb01 f303 	mul.w	r3, r1, r3
 8009b10:	431a      	orrs	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	605a      	str	r2, [r3, #4]
}
 8009b16:	bf00      	nop
 8009b18:	3714      	adds	r7, #20
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b08b      	sub	sp, #44	; 0x2c
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	60f8      	str	r0, [r7, #12]
 8009b2a:	60b9      	str	r1, [r7, #8]
 8009b2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	689a      	ldr	r2, [r3, #8]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	fa93 f3a3 	rbit	r3, r3
 8009b3c:	613b      	str	r3, [r7, #16]
  return result;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009b48:	2320      	movs	r3, #32
 8009b4a:	e003      	b.n	8009b54 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	fab3 f383 	clz	r3, r3
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	2103      	movs	r1, #3
 8009b58:	fa01 f303 	lsl.w	r3, r1, r3
 8009b5c:	43db      	mvns	r3, r3
 8009b5e:	401a      	ands	r2, r3
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	fa93 f3a3 	rbit	r3, r3
 8009b6a:	61fb      	str	r3, [r7, #28]
  return result;
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009b76:	2320      	movs	r3, #32
 8009b78:	e003      	b.n	8009b82 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	fab3 f383 	clz	r3, r3
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	6879      	ldr	r1, [r7, #4]
 8009b86:	fa01 f303 	lsl.w	r3, r1, r3
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009b90:	bf00      	nop
 8009b92:	372c      	adds	r7, #44	; 0x2c
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b08b      	sub	sp, #44	; 0x2c
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	68da      	ldr	r2, [r3, #12]
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	fa93 f3a3 	rbit	r3, r3
 8009bb6:	613b      	str	r3, [r7, #16]
  return result;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009bc2:	2320      	movs	r3, #32
 8009bc4:	e003      	b.n	8009bce <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	fab3 f383 	clz	r3, r3
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	2103      	movs	r1, #3
 8009bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd6:	43db      	mvns	r3, r3
 8009bd8:	401a      	ands	r2, r3
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	fa93 f3a3 	rbit	r3, r3
 8009be4:	61fb      	str	r3, [r7, #28]
  return result;
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009bf0:	2320      	movs	r3, #32
 8009bf2:	e003      	b.n	8009bfc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	fab3 f383 	clz	r3, r3
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	005b      	lsls	r3, r3, #1
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	fa01 f303 	lsl.w	r3, r1, r3
 8009c04:	431a      	orrs	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	60da      	str	r2, [r3, #12]
}
 8009c0a:	bf00      	nop
 8009c0c:	372c      	adds	r7, #44	; 0x2c
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b08b      	sub	sp, #44	; 0x2c
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	60f8      	str	r0, [r7, #12]
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6a1a      	ldr	r2, [r3, #32]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	fa93 f3a3 	rbit	r3, r3
 8009c30:	613b      	str	r3, [r7, #16]
  return result;
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009c3c:	2320      	movs	r3, #32
 8009c3e:	e003      	b.n	8009c48 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	fab3 f383 	clz	r3, r3
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	210f      	movs	r1, #15
 8009c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c50:	43db      	mvns	r3, r3
 8009c52:	401a      	ands	r2, r3
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c58:	6a3b      	ldr	r3, [r7, #32]
 8009c5a:	fa93 f3a3 	rbit	r3, r3
 8009c5e:	61fb      	str	r3, [r7, #28]
  return result;
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009c6a:	2320      	movs	r3, #32
 8009c6c:	e003      	b.n	8009c76 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c70:	fab3 f383 	clz	r3, r3
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	6879      	ldr	r1, [r7, #4]
 8009c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c7e:	431a      	orrs	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009c84:	bf00      	nop
 8009c86:	372c      	adds	r7, #44	; 0x2c
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b08b      	sub	sp, #44	; 0x2c
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	0a1b      	lsrs	r3, r3, #8
 8009ca4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	fa93 f3a3 	rbit	r3, r3
 8009cac:	613b      	str	r3, [r7, #16]
  return result;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009cb8:	2320      	movs	r3, #32
 8009cba:	e003      	b.n	8009cc4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	fab3 f383 	clz	r3, r3
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	210f      	movs	r1, #15
 8009cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ccc:	43db      	mvns	r3, r3
 8009cce:	401a      	ands	r2, r3
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	0a1b      	lsrs	r3, r3, #8
 8009cd4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	fa93 f3a3 	rbit	r3, r3
 8009cdc:	61fb      	str	r3, [r7, #28]
  return result;
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d101      	bne.n	8009cec <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009ce8:	2320      	movs	r3, #32
 8009cea:	e003      	b.n	8009cf4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	fab3 f383 	clz	r3, r3
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	6879      	ldr	r1, [r7, #4]
 8009cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009d02:	bf00      	nop
 8009d04:	372c      	adds	r7, #44	; 0x2c
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b08a      	sub	sp, #40	; 0x28
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	fa93 f3a3 	rbit	r3, r3
 8009d24:	617b      	str	r3, [r7, #20]
  return result;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <LL_GPIO_Init+0x26>
    return 32U;
 8009d30:	2320      	movs	r3, #32
 8009d32:	e003      	b.n	8009d3c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	fab3 f383 	clz	r3, r3
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009d3e:	e058      	b.n	8009df2 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	2101      	movs	r1, #1
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	fa01 f303 	lsl.w	r3, r1, r3
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d04a      	beq.n	8009dec <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d003      	beq.n	8009d66 <LL_GPIO_Init+0x58>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d10e      	bne.n	8009d84 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	6a39      	ldr	r1, [r7, #32]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff fed7 	bl	8009b22 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	6819      	ldr	r1, [r3, #0]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7ff feb7 	bl	8009af2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	6a39      	ldr	r1, [r7, #32]
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7ff ff05 	bl	8009b9c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d121      	bne.n	8009dde <LL_GPIO_Init+0xd0>
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	fa93 f3a3 	rbit	r3, r3
 8009da4:	60bb      	str	r3, [r7, #8]
  return result;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <LL_GPIO_Init+0xa6>
    return 32U;
 8009db0:	2320      	movs	r3, #32
 8009db2:	e003      	b.n	8009dbc <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	fab3 f383 	clz	r3, r3
 8009dba:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8009dbc:	2b07      	cmp	r3, #7
 8009dbe:	d807      	bhi.n	8009dd0 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6a39      	ldr	r1, [r7, #32]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7ff ff24 	bl	8009c16 <LL_GPIO_SetAFPin_0_7>
 8009dce:	e006      	b.n	8009dde <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	6a39      	ldr	r1, [r7, #32]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7ff ff59 	bl	8009c90 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	461a      	mov	r2, r3
 8009de4:	6a39      	ldr	r1, [r7, #32]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7ff fe46 	bl	8009a78 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	3301      	adds	r3, #1
 8009df0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d19f      	bne.n	8009d40 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3728      	adds	r7, #40	; 0x28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b085      	sub	sp, #20
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009e12:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009e16:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	43db      	mvns	r3, r3
 8009e20:	401a      	ands	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d106      	bne.n	8009e54 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	641a      	str	r2, [r3, #64]	; 0x40
 8009e52:	e00b      	b.n	8009e6c <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8009e54:	78fb      	ldrb	r3, [r7, #3]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d106      	bne.n	8009e68 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	641a      	str	r2, [r3, #64]	; 0x40
 8009e66:	e001      	b.n	8009e6c <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e000      	b.n	8009e6e <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	f107 001c 	add.w	r0, r7, #28
 8009e88:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e96:	f023 0201 	bic.w	r2, r3, #1
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff ffc7 	bl	8009e34 <USB_SetCurrentMode>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ebc:	b004      	add	sp, #16
 8009ebe:	4770      	bx	lr

08009ec0 <memset>:
 8009ec0:	4402      	add	r2, r0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d100      	bne.n	8009eca <memset+0xa>
 8009ec8:	4770      	bx	lr
 8009eca:	f803 1b01 	strb.w	r1, [r3], #1
 8009ece:	e7f9      	b.n	8009ec4 <memset+0x4>

08009ed0 <__libc_init_array>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	4d0d      	ldr	r5, [pc, #52]	; (8009f08 <__libc_init_array+0x38>)
 8009ed4:	2600      	movs	r6, #0
 8009ed6:	4c0d      	ldr	r4, [pc, #52]	; (8009f0c <__libc_init_array+0x3c>)
 8009ed8:	1b64      	subs	r4, r4, r5
 8009eda:	10a4      	asrs	r4, r4, #2
 8009edc:	42a6      	cmp	r6, r4
 8009ede:	d109      	bne.n	8009ef4 <__libc_init_array+0x24>
 8009ee0:	4d0b      	ldr	r5, [pc, #44]	; (8009f10 <__libc_init_array+0x40>)
 8009ee2:	2600      	movs	r6, #0
 8009ee4:	4c0b      	ldr	r4, [pc, #44]	; (8009f14 <__libc_init_array+0x44>)
 8009ee6:	f000 f817 	bl	8009f18 <_init>
 8009eea:	1b64      	subs	r4, r4, r5
 8009eec:	10a4      	asrs	r4, r4, #2
 8009eee:	42a6      	cmp	r6, r4
 8009ef0:	d105      	bne.n	8009efe <__libc_init_array+0x2e>
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
 8009ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ef8:	3601      	adds	r6, #1
 8009efa:	4798      	blx	r3
 8009efc:	e7ee      	b.n	8009edc <__libc_init_array+0xc>
 8009efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f02:	3601      	adds	r6, #1
 8009f04:	4798      	blx	r3
 8009f06:	e7f2      	b.n	8009eee <__libc_init_array+0x1e>
 8009f08:	08009f78 	.word	0x08009f78
 8009f0c:	08009f78 	.word	0x08009f78
 8009f10:	08009f78 	.word	0x08009f78
 8009f14:	08009f7c 	.word	0x08009f7c

08009f18 <_init>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	bf00      	nop
 8009f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1e:	bc08      	pop	{r3}
 8009f20:	469e      	mov	lr, r3
 8009f22:	4770      	bx	lr

08009f24 <_fini>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	bf00      	nop
 8009f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2a:	bc08      	pop	{r3}
 8009f2c:	469e      	mov	lr, r3
 8009f2e:	4770      	bx	lr
